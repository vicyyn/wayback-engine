{"version":3,"file":"index.cjs.js","sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/message/legacy.ts","../src/utils/assert.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/agent-manager.ts","../src/epoch-schedule.ts","../src/errors.ts","../src/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","import http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: ReturnType<typeof setTimeout> | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    if (this._destroyTimeout !== null) {\n      clearTimeout(this._destroyTimeout);\n      this._destroyTimeout = null;\n    }\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import * as nodeFetch from 'node-fetch';\n\nexport * from 'node-fetch';\nexport default async function (\n  input: nodeFetch.RequestInfo,\n  init?: nodeFetch.RequestInit,\n): Promise<nodeFetch.Response> {\n  const processedInput =\n    typeof input === 'string' && input.slice(0, 2) === '//'\n      ? 'https:' + input\n      : input;\n  return await nodeFetch.default(processedInput, init);\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = 2n ** 64n - 1n;\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["ed25519","utils","sha512Sync","m","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","Message","args","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","version","staticAccountKeys","compiledInstructions","accountKeyIndexes","accounts","addressTableLookups","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","MessageV0","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","lookup","encodedWritableIndexesLength","writableIndexes","encodedReadonlyIndexesLength","readonlyIndexes","addressTableLookupLayout","accountKey","maskedPrefix","assert","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","call","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","keepAlive","maxSockets","https","Agent","http","_agent","_activeRequests","_destroyTimeout","_useHttps","requestStart","clearTimeout","requestEnd","destroy","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","input","init","processedInput","nodeFetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","state","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","addresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","url","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetch","fetchImpl","agentManager","fetchWithMiddleware","info","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","rawConfig","_buildArgsAtLeastConfirmed","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonceAndContext","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","includeAccounts","originalTx","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","hash","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","Number","decodeExtendLookupTable","lookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","devnet","testnet","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;;AAWAA,kBAAO,CAACC,KAAR,CAAcC,UAAd,GAA2B,CAAC,GAAGC,CAAJ,KAAUC,aAAM,CAACJ,kBAAO,CAACC,KAAR,CAAcI,WAAd,CAA0B,GAAGF,CAA7B,CAAD,CAA3C,CAAA;;AAEO,MAAMG,kBAAkB,GAAGN,kBAAO,CAACC,KAAR,CAAcM,gBAAzC,CAAA;AACA,MAAMC,eAAe,GAAG,MAAsB;AACnD,EAAA,MAAMC,aAAa,GAAGT,kBAAO,CAACC,KAAR,CAAcM,gBAAd,EAAtB,CAAA;AACA,EAAA,MAAMG,SAAS,GAAGC,YAAY,CAACF,aAAD,CAA9B,CAAA;AACA,EAAA,MAAMG,SAAS,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAlB,CAAA;EACAD,SAAS,CAACE,GAAV,CAAcL,aAAd,CAAA,CAAA;AACAG,EAAAA,SAAS,CAACE,GAAV,CAAcJ,SAAd,EAAyB,EAAzB,CAAA,CAAA;EACA,OAAO;IACLA,SADK;AAELE,IAAAA,SAAAA;GAFF,CAAA;AAID,CAVM,CAAA;AAWA,MAAMD,YAAY,GAAGX,kBAAO,CAACe,IAAR,CAAaJ,YAAlC,CAAA;AACA,SAASK,SAAT,CAAmBN,SAAnB,EAAmD;EACxD,IAAI;AACFV,IAAAA,kBAAO,CAACiB,KAAR,CAAcC,OAAd,CAAsBR,SAAtB,EAAiC,IAAA;AAAK;AAAtC,KAAA,CAAA;AACA,IAAA,OAAO,IAAP,CAAA;AACD,GAHD,CAGE,MAAM;AACN,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AACF,CAAA;AACM,MAAMS,IAAI,GAAG,CAClBC,OADkB,EAElBR,SAFkB,KAGfZ,kBAAO,CAACe,IAAR,CAAaI,IAAb,CAAkBC,OAAlB,EAA2BR,SAAS,CAACS,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAA3B,CAHE,CAAA;AAIA,MAAMC,MAAM,GAAGtB,kBAAO,CAACe,IAAR,CAAaO,MAA5B;;AC3CA,MAAMC,QAAQ,GAAIC,GAAD,IAAsD;AAC5E,EAAA,IAAIC,aAAM,CAACC,QAAP,CAAgBF,GAAhB,CAAJ,EAA0B;AACxB,IAAA,OAAOA,GAAP,CAAA;AACD,GAFD,MAEO,IAAIA,GAAG,YAAYX,UAAnB,EAA+B;AACpC,IAAA,OAAOY,aAAM,CAACE,IAAP,CAAYH,GAAG,CAACI,MAAhB,EAAwBJ,GAAG,CAACK,UAA5B,EAAwCL,GAAG,CAACM,UAA5C,CAAP,CAAA;AACD,GAFM,MAEA;AACL,IAAA,OAAOL,aAAM,CAACE,IAAP,CAAYH,GAAZ,CAAP,CAAA;AACD,GAAA;AACF,CARM;;ACEA,MAAMO,MAAN,CAAa;EAClBC,WAAW,CAACC,UAAD,EAAkB;AAC3BC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,UAApB,CAAA,CAAA;AACD,GAAA;;AAEDG,EAAAA,MAAM,GAAW;IACf,OAAOX,aAAM,CAACE,IAAP,CAAYU,eAAS,CAACC,aAAD,EAAgB,IAAhB,CAArB,CAAP,CAAA;AACD,GAAA;;EAEY,OAANC,MAAM,CAACC,IAAD,EAAoB;AAC/B,IAAA,OAAOC,iBAAW,CAACH,aAAD,EAAgB,IAAhB,EAAsBE,IAAtB,CAAlB,CAAA;AACD,GAAA;;EAEqB,OAAfE,eAAe,CAACF,IAAD,EAAoB;AACxC,IAAA,OAAOG,0BAAoB,CAACL,aAAD,EAAgB,IAAhB,EAAsBE,IAAtB,CAA3B,CAAA;AACD,GAAA;;AAfiB;AAmBpB;;AACO,MAAMI,IAAN,SAAmBb,MAAnB,CAA0B;EAE/BC,WAAW,CAACC,UAAD,EAAkB;AAC3B,IAAA,KAAA,CAAMA,UAAN,CAAA,CAAA;IAD2B,IAD7BY,CAAAA,IAC6B,GADd,EACc,CAAA;;IAE3B,IAAIX,MAAM,CAACY,IAAP,CAAYb,UAAZ,CAAwBc,CAAAA,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,MAAA,MAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN,CAAA;AACD,KAAA;;IACDd,MAAM,CAACY,IAAP,CAAYb,UAAZ,EAAwBgB,GAAxB,CAA4BC,GAAG,IAAI;MACjC,IAAKL,CAAAA,IAAL,GAAYK,GAAZ,CAAA;KADF,CAAA,CAAA;AAGD,GAAA;;AAV8B,CAAA;AAapBZ,MAAAA,aAAiC,GAAG,IAAIa,GAAJ;;AC5BjD;AACA;AACA;;AACO,MAAMC,eAAe,GAAG,GAAxB;AAEP;AACA;AACA;;AACO,MAAMC,iBAAiB,GAAG,GAA1B;AAEP;AACA;AACA;;AAiBA,SAASC,eAAT,CAAyBC,KAAzB,EAA2E;AACzE,EAAA,OAAQA,KAAD,CAAyBC,GAAzB,KAAiCC,SAAxC,CAAA;AACD,CAAA;AAED;AACA;AACA;;;AACO,MAAMC,SAAN,SAAwB3B,MAAxB,CAA+B;AACpC;;AAGA;AACF;AACA;AACA;EACEC,WAAW,CAACuB,KAAD,EAA2B;AACpC,IAAA,KAAA,CAAM,EAAN,CAAA,CAAA;AADoC,IAAA,IAAA,CANtCC,GAMsC,GAAA,KAAA,CAAA,CAAA;;AAEpC,IAAA,IAAIF,eAAe,CAACC,KAAD,CAAnB,EAA4B;AAC1B,MAAA,IAAA,CAAKC,GAAL,GAAWD,KAAK,CAACC,GAAjB,CAAA;AACD,KAFD,MAEO;AACL,MAAA,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAA,MAAMI,OAAO,GAAGC,wBAAI,CAACrB,MAAL,CAAYgB,KAAZ,CAAhB,CAAA;;AACA,QAAA,IAAII,OAAO,CAACZ,MAAR,IAAkBM,iBAAtB,EAAyC;AACvC,UAAA,MAAM,IAAIL,KAAJ,CAAW,CAAA,wBAAA,CAAX,CAAN,CAAA;AACD,SAAA;;AACD,QAAA,IAAA,CAAKQ,GAAL,GAAW,IAAIK,sBAAJ,CAAOF,OAAP,CAAX,CAAA;AACD,OAPD,MAOO;AACL,QAAA,IAAA,CAAKH,GAAL,GAAW,IAAIK,sBAAJ,CAAON,KAAP,CAAX,CAAA;AACD,OAAA;;AAED,MAAA,IAAI,KAAKC,GAAL,CAAS1B,UAAT,EAAA,GAAwB,EAA5B,EAAgC;AAC9B,QAAA,MAAM,IAAIkB,KAAJ,CAAW,CAAA,wBAAA,CAAX,CAAN,CAAA;AACD,OAAA;AACF,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AAGE;AACF;AACA;EACEc,MAAM,CAACpD,SAAD,EAAgC;IACpC,OAAO,IAAA,CAAK8C,GAAL,CAASO,EAAT,CAAYrD,SAAS,CAAC8C,GAAtB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEQ,EAAAA,QAAQ,GAAW;AACjB,IAAA,OAAOJ,wBAAI,CAACxB,MAAL,CAAY,IAAK6B,CAAAA,OAAL,EAAZ,CAAP,CAAA;AACD,GAAA;;AAEDC,EAAAA,MAAM,GAAW;IACf,OAAO,IAAA,CAAKF,QAAL,EAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEC,EAAAA,OAAO,GAAe;IACpB,OAAO,IAAA,CAAK1C,QAAL,EAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEA,EAAAA,QAAQ,GAAW;IACjB,MAAM4C,CAAC,GAAG,IAAKX,CAAAA,GAAL,CAASY,WAAT,CAAqB3C,aAArB,CAAV,CAAA;;AACA,IAAA,IAAI0C,CAAC,CAACpB,MAAF,KAAaM,iBAAjB,EAAoC;AAClC,MAAA,OAAOc,CAAP,CAAA;AACD,KAAA;;AAED,IAAA,MAAME,OAAO,GAAG5C,aAAM,CAAC6C,KAAP,CAAa,EAAb,CAAhB,CAAA;IACAH,CAAC,CAACI,IAAF,CAAOF,OAAP,EAAgB,EAAKF,GAAAA,CAAC,CAACpB,MAAvB,CAAA,CAAA;AACA,IAAA,OAAOsB,OAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEG,EAAAA,QAAQ,GAAW;IACjB,OAAO,IAAA,CAAKR,QAAL,EAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;AACE;;;AAC2B,EAAA,aAAdS,cAAc,CACzBC,aADyB,EAEzBC,IAFyB,EAGzBC,SAHyB,EAIL;IACpB,MAAMhD,QAAM,GAAGH,aAAM,CAACoD,MAAP,CAAc,CAC3BH,aAAa,CAACnD,QAAd,EAD2B,EAE3BE,aAAM,CAACE,IAAP,CAAYgD,IAAZ,CAF2B,EAG3BC,SAAS,CAACrD,QAAV,EAH2B,CAAd,CAAf,CAAA;AAKA,IAAA,MAAMuD,cAAc,GAAGC,aAAM,CAACnD,QAAD,CAA7B,CAAA;AACA,IAAA,OAAO,IAAI8B,SAAJ,CAAcoB,cAAd,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;AACE;;;AAC+B,EAAA,OAAxBE,wBAAwB,CAC7BC,KAD6B,EAE7BL,SAF6B,EAGlB;AACX,IAAA,IAAIhD,QAAM,GAAGH,aAAM,CAAC6C,KAAP,CAAa,CAAb,CAAb,CAAA;AACAW,IAAAA,KAAK,CAACC,OAAN,CAAc,UAAUP,IAAV,EAAgB;AAC5B,MAAA,IAAIA,IAAI,CAAC5B,MAAL,GAAcK,eAAlB,EAAmC;AACjC,QAAA,MAAM,IAAI+B,SAAJ,CAAe,CAAA,wBAAA,CAAf,CAAN,CAAA;AACD,OAAA;;AACDvD,MAAAA,QAAM,GAAGH,aAAM,CAACoD,MAAP,CAAc,CAACjD,QAAD,EAASL,QAAQ,CAACoD,IAAD,CAAjB,CAAd,CAAT,CAAA;KAJF,CAAA,CAAA;IAMA/C,QAAM,GAAGH,aAAM,CAACoD,MAAP,CAAc,CACrBjD,QADqB,EAErBgD,SAAS,CAACrD,QAAV,EAFqB,EAGrBE,aAAM,CAACE,IAAP,CAAY,uBAAZ,CAHqB,CAAd,CAAT,CAAA;AAKA,IAAA,MAAMmD,cAAc,GAAGC,aAAM,CAACnD,QAAD,CAA7B,CAAA;;AACA,IAAA,IAAIZ,SAAS,CAAC8D,cAAD,CAAb,EAA+B;AAC7B,MAAA,MAAM,IAAI9B,KAAJ,CAAW,CAAA,8CAAA,CAAX,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,IAAIU,SAAJ,CAAcoB,cAAd,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;AACE;;;AACiC,EAAA,aAApBM,oBAAoB,CAC/BH,KAD+B,EAE/BL,SAF+B,EAGX;AACpB,IAAA,OAAO,KAAKI,wBAAL,CAA8BC,KAA9B,EAAqCL,SAArC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC+B,EAAA,OAAtBS,sBAAsB,CAC3BJ,KAD2B,EAE3BL,SAF2B,EAGN;IACrB,IAAIU,KAAK,GAAG,GAAZ,CAAA;AACA,IAAA,IAAIC,OAAJ,CAAA;;IACA,OAAOD,KAAK,IAAI,CAAhB,EAAmB;MACjB,IAAI;AACF,QAAA,MAAME,cAAc,GAAGP,KAAK,CAACJ,MAAN,CAAapD,aAAM,CAACE,IAAP,CAAY,CAAC2D,KAAD,CAAZ,CAAb,CAAvB,CAAA;AACAC,QAAAA,OAAO,GAAG,IAAKP,CAAAA,wBAAL,CAA8BQ,cAA9B,EAA8CZ,SAA9C,CAAV,CAAA;OAFF,CAGE,OAAOa,GAAP,EAAY;QACZ,IAAIA,GAAG,YAAYN,SAAnB,EAA8B;AAC5B,UAAA,MAAMM,GAAN,CAAA;AACD,SAAA;;QACDH,KAAK,EAAA,CAAA;AACL,QAAA,SAAA;AACD,OAAA;;AACD,MAAA,OAAO,CAACC,OAAD,EAAUD,KAAV,CAAP,CAAA;AACD,KAAA;;AACD,IAAA,MAAM,IAAItC,KAAJ,CAAW,CAAA,6CAAA,CAAX,CAAN,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACiC,EAAA,aAAlB0C,kBAAkB,CAC7BT,KAD6B,EAE7BL,SAF6B,EAGC;AAC9B,IAAA,OAAO,KAAKS,sBAAL,CAA4BJ,KAA5B,EAAmCL,SAAnC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACkB,OAAT5D,SAAS,CAAC2E,UAAD,EAAyC;AACvD,IAAA,MAAMC,MAAM,GAAG,IAAIlC,SAAJ,CAAciC,UAAd,CAAf,CAAA;AACA,IAAA,OAAO3E,SAAS,CAAC4E,MAAM,CAAC3B,OAAP,EAAD,CAAhB,CAAA;AACD,GAAA;;AA1LmC,CAAA;AAAzBP,UAiCJmC,UAAqB,IAAInC,SAAJ,CAAc,kCAAd;AA4J9BpB,aAAa,CAACxB,GAAd,CAAkB4C,SAAlB,EAA6B;AAC3BoC,EAAAA,IAAI,EAAE,QADqB;AAE3BC,EAAAA,MAAM,EAAE,CAAC,CAAC,KAAD,EAAQ,MAAR,CAAD,CAAA;AAFmB,CAA7B,CAAA;;ACpOA;AACA;AACA;AACA;AACA;;AACO,MAAMC,OAAN,CAAc;AACnB;;AAEA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEhE,WAAW,CAACpB,SAAD,EAAkD;AAAA,IAAA,IAAA,CAZrDqF,UAYqD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAVrDC,UAUqD,GAAA,KAAA,CAAA,CAAA;;AAC3D,IAAA,IAAItF,SAAJ,EAAe;AACb,MAAA,MAAMuF,eAAe,GAAG5E,QAAQ,CAACX,SAAD,CAAhC,CAAA;;AACA,MAAA,IAAIA,SAAS,CAACmC,MAAV,KAAqB,EAAzB,EAA6B;AAC3B,QAAA,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN,CAAA;AACD,OAAA;;MACD,IAAKiD,CAAAA,UAAL,GAAkBE,eAAe,CAAC9E,KAAhB,CAAsB,EAAtB,EAA0B,EAA1B,CAAlB,CAAA;MACA,IAAK6E,CAAAA,UAAL,GAAkBC,eAAe,CAAC9E,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAAlB,CAAA;AACD,KAPD,MAOO;AACL,MAAA,IAAA,CAAK6E,UAAL,GAAkB3E,QAAQ,CAACjB,kBAAkB,EAAnB,CAA1B,CAAA;MACA,IAAK2F,CAAAA,UAAL,GAAkB1E,QAAQ,CAACZ,YAAY,CAAC,IAAA,CAAKuF,UAAN,CAAb,CAA1B,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACe,EAAA,IAATxF,SAAS,GAAc;AACzB,IAAA,OAAO,IAAIgD,SAAJ,CAAc,IAAA,CAAKuC,UAAnB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACe,EAAA,IAATrF,SAAS,GAAW;AACtB,IAAA,OAAOa,aAAM,CAACoD,MAAP,CAAc,CAAC,IAAA,CAAKqB,UAAN,EAAkB,IAAKD,CAAAA,UAAvB,CAAd,EAAkD,EAAlD,CAAP,CAAA;AACD,GAAA;;AA1CkB;;MCTRG,gCAAgC,GAAG,IAAI1C,SAAJ,CAC9C,6CAD8C;;ACFhD;AACA;AACA;AACA;AACA;AACA;AACA;MACa2C,gBAAgB,GAAG,IAAO,GAAA,EAAP,GAAY,EAArC;AAEA,MAAMC,mBAAmB,GAAG,KAA5B;AAEA,MAAMC,yBAAyB,GAAG;;ACXlC,MAAMC,0CAAN,SAAyDxD,KAAzD,CAA+D;EAGpEhB,WAAW,CAACyE,SAAD,EAAoB;IAC7B,KAAO,CAAA,CAAA,UAAA,EAAYA,SAAU,CAA7B,oCAAA,CAAA,CAAA,CAAA;AAD6B,IAAA,IAAA,CAF/BA,SAE+B,GAAA,KAAA,CAAA,CAAA;IAE7B,IAAKA,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;AACD,GAAA;;AANmE,CAAA;AAStEvE,MAAM,CAACwE,cAAP,CACEF,0CAA0C,CAACG,SAD7C,EAEE,MAFF,EAGE;AACEpD,EAAAA,KAAK,EAAE,4CAAA;AADT,CAHF,CAAA,CAAA;AAQO,MAAMqD,8BAAN,SAA6C5D,KAA7C,CAAmD;AAGxDhB,EAAAA,WAAW,CAACyE,SAAD,EAAoBI,cAApB,EAA4C;AACrD,IAAA,KAAA,CACG,CAAmCA,iCAAAA,EAAAA,cAAc,CAACC,OAAf,CAClC,CADkC,CAElC,CAAA,gBAAA,CAFF,GAGE,qDAHF,GAIG,CAAA,EAAEL,SAAU,CALjB,wCAAA,CAAA,CAAA,CAAA;AADqD,IAAA,IAAA,CAFvDA,SAEuD,GAAA,KAAA,CAAA,CAAA;IAQrD,IAAKA,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;AACD,GAAA;;AAZuD,CAAA;AAe1DvE,MAAM,CAACwE,cAAP,CAAsBE,8BAA8B,CAACD,SAArD,EAAgE,MAAhE,EAAwE;AACtEpD,EAAAA,KAAK,EAAE,gCAAA;AAD+D,CAAxE,CAAA;;AC7BA;AACA;AACA;;AACO,MAAM7C,SAAS,GAAG,CAACqG,QAAgB,GAAG,WAApB,KAAoC;AAC3D,EAAA,OAAOC,uBAAY,CAACC,IAAb,CAAkB,EAAlB,EAAsBF,QAAtB,CAAP,CAAA;AACD,CAFM,CAAA;AAIP;AACA;AACA;;AACO,MAAMN,SAAS,GAAG,CAACM,QAAgB,GAAG,WAApB,KAAoC;AAC3D,EAAA,OAAOC,uBAAY,CAACC,IAAb,CAAkB,EAAlB,EAAsBF,QAAtB,CAAP,CAAA;AACD,CAFM,CAAA;;AA4BP;AACA;AACA;AACO,MAAMG,UAAU,GAAG,CACxBH,QAAgB,GAAG,QADK,KAEQ;AAChC,EAAA,MAAMI,GAAG,GAAGH,uBAAY,CAACI,MAAb,CAOV,CACEJ,uBAAY,CAACK,GAAb,CAAiB,QAAjB,CADF,EAEEL,uBAAY,CAACK,GAAb,CAAiB,eAAjB,CAFF,EAGEL,uBAAY,CAACC,IAAb,CAAkBD,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACK,GAAb,EAApB,EAAwC,CAAC,CAAzC,CAAlB,EAA+D,OAA/D,CAHF,CAPU,EAYVN,QAZU,CAAZ,CAAA;;EAcA,MAAMQ,OAAO,GAAGJ,GAAG,CAAC5E,MAAJ,CAAWiF,IAAX,CAAgBL,GAAhB,CAAhB,CAAA;;EACA,MAAMM,OAAO,GAAGN,GAAG,CAAC/E,MAAJ,CAAWoF,IAAX,CAAgBL,GAAhB,CAAhB,CAAA;;EAEA,MAAMO,OAAO,GAAGP,GAAhB,CAAA;;AAEAO,EAAAA,OAAO,CAACnF,MAAR,GAAiB,CAAC4B,CAAD,EAAgBmD,MAAhB,KAAoC;AACnD,IAAA,MAAM9E,IAAI,GAAG+E,OAAO,CAACpD,CAAD,EAAImD,MAAJ,CAApB,CAAA;;AACA,IAAA,OAAO9E,IAAI,CAAC,OAAD,CAAJ,CAAcgC,QAAd,EAAP,CAAA;GAFF,CAAA;;EAKAkD,OAAO,CAACtF,MAAR,GAAiB,CAACuF,GAAD,EAAcxD,CAAd,EAA6BmD,MAA7B,KAAiD;AAChE,IAAA,MAAM9E,IAAI,GAAG;AACXoF,MAAAA,KAAK,EAAEnG,aAAM,CAACE,IAAP,CAAYgG,GAAZ,EAAiB,MAAjB,CAAA;KADT,CAAA;AAGA,IAAA,OAAOF,OAAO,CAACjF,IAAD,EAAO2B,CAAP,EAAUmD,MAAV,CAAd,CAAA;GAJF,CAAA;;AAOAI,EAAAA,OAAO,CAACpD,KAAR,GAAiBqD,GAAD,IAAiB;IAC/B,OACEX,uBAAY,CAACK,GAAb,EAAA,CAAmBQ,IAAnB,GACAb,uBAAY,CAACK,GAAb,EAAA,CAAmBQ,IADnB,GAEApG,aAAM,CAACE,IAAP,CAAYgG,GAAZ,EAAiB,MAAjB,EAAyB5E,MAH3B,CAAA;GADF,CAAA;;AAQA,EAAA,OAAO2E,OAAP,CAAA;AACD,CA3CM,CAAA;AA6CP;AACA;AACA;;AACO,MAAMI,UAAU,GAAG,CAACf,QAAgB,GAAG,YAApB,KAAqC;AAC7D,EAAA,OAAOC,uBAAY,CAACI,MAAb,CAKL,CAAC1G,SAAS,CAAC,QAAD,CAAV,EAAsBA,SAAS,CAAC,YAAD,CAA/B,CALK,EAK2CqG,QAL3C,CAAP,CAAA;AAMD,CAPM,CAAA;AASP;AACA;AACA;;AACO,MAAMgB,MAAM,GAAG,CAAChB,QAAgB,GAAG,QAApB,KAAiC;EACrD,OAAOC,uBAAY,CAACI,MAAb,CAOL,CACEJ,uBAAY,CAACgB,IAAb,CAAkB,eAAlB,CADF,EAEEhB,uBAAY,CAACgB,IAAb,CAAkB,OAAlB,CAFF,EAGEtH,SAAS,CAAC,WAAD,CAHX,CAPK,EAYLqG,QAZK,CAAP,CAAA;AAcD,CAfM,CAAA;AAiBP;AACA;AACA;;AACO,MAAMkB,QAAQ,GAAG,CAAClB,QAAgB,GAAG,UAApB,KAAmC;AACzD,EAAA,OAAOC,uBAAY,CAACI,MAAb,CAQL,CACE1G,SAAS,CAAC,YAAD,CADX,EAEEA,SAAS,CAAC,iBAAD,CAFX,EAGEA,SAAS,CAAC,sBAAD,CAHX,EAIEsG,uBAAY,CAACkB,EAAb,CAAgB,YAAhB,CAJF,CARK,EAcLnB,QAdK,CAAP,CAAA;AAgBD,CAjBM,CAAA;AAmBA,SAASoB,QAAT,CAAkBC,IAAlB,EAA6BrC,MAA7B,EAAkD;EACvD,MAAMsC,YAAY,GAAIC,IAAD,IAAuB;AAC1C,IAAA,IAAIA,IAAI,CAACT,IAAL,IAAa,CAAjB,EAAoB;MAClB,OAAOS,IAAI,CAACT,IAAZ,CAAA;KADF,MAEO,IAAI,OAAOS,IAAI,CAAChE,KAAZ,KAAsB,UAA1B,EAAsC;MAC3C,OAAOgE,IAAI,CAAChE,KAAL,CAAWyB,MAAM,CAACuC,IAAI,CAACvB,QAAN,CAAjB,CAAP,CAAA;AACD,KAFM,MAEA,IAAI,OAAA,IAAWuB,IAAX,IAAmB,eAAA,IAAmBA,IAA1C,EAAgD;AACrD,MAAA,MAAMC,KAAK,GAAGxC,MAAM,CAACuC,IAAI,CAACvB,QAAN,CAApB,CAAA;;AACA,MAAA,IAAIyB,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;QACxB,OAAOA,KAAK,CAACxF,MAAN,GAAesF,YAAY,CAACC,IAAI,CAACI,aAAN,CAAlC,CAAA;AACD,OAAA;AACF,KAVyC;;;AAY1C,IAAA,OAAO,CAAP,CAAA;GAZF,CAAA;;EAeA,IAAIpE,KAAK,GAAG,CAAZ,CAAA;EACA8D,IAAI,CAACO,MAAL,CAAY5C,MAAZ,CAAmBb,OAAnB,CAA4BoD,IAAD,IAAe;AACxChE,IAAAA,KAAK,IAAI+D,YAAY,CAACC,IAAD,CAArB,CAAA;GADF,CAAA,CAAA;AAIA,EAAA,OAAOhE,KAAP,CAAA;AACD;;ACrKM,SAASsE,YAAT,CAAsBC,KAAtB,EAAoD;EACzD,IAAIC,GAAG,GAAG,CAAV,CAAA;EACA,IAAIC,IAAI,GAAG,CAAX,CAAA;;EACA,SAAS;AACP,IAAA,IAAIC,IAAI,GAAGH,KAAK,CAACI,KAAN,EAAX,CAAA;IACAH,GAAG,IAAI,CAACE,IAAI,GAAG,IAAR,KAAkBD,IAAI,GAAG,CAAhC,CAAA;AACAA,IAAAA,IAAI,IAAI,CAAR,CAAA;;AACA,IAAA,IAAI,CAACC,IAAI,GAAG,IAAR,MAAkB,CAAtB,EAAyB;AACvB,MAAA,MAAA;AACD,KAAA;AACF,GAAA;;AACD,EAAA,OAAOF,GAAP,CAAA;AACD,CAAA;AAEM,SAASI,YAAT,CAAsBL,KAAtB,EAA4CC,GAA5C,EAAyD;EAC9D,IAAIK,OAAO,GAAGL,GAAd,CAAA;;EACA,SAAS;AACP,IAAA,IAAIE,IAAI,GAAGG,OAAO,GAAG,IAArB,CAAA;AACAA,IAAAA,OAAO,KAAK,CAAZ,CAAA;;IACA,IAAIA,OAAO,IAAI,CAAf,EAAkB;MAChBN,KAAK,CAACO,IAAN,CAAWJ,IAAX,CAAA,CAAA;AACA,MAAA,MAAA;AACD,KAHD,MAGO;AACLA,MAAAA,IAAI,IAAI,IAAR,CAAA;MACAH,KAAK,CAACO,IAAN,CAAWJ,IAAX,CAAA,CAAA;AACD,KAAA;AACF,GAAA;AACF;;ACmBD;AACA;AACA;AACO,MAAMK,OAAN,CAAc;EAWnBrH,WAAW,CAACsH,IAAD,EAAoB;AAAA,IAAA,IAAA,CAV/BC,MAU+B,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAT/BC,WAS+B,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAR/BC,eAQ+B,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAP/BC,YAO+B,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CALvBC,iBAKuB,GALqB,IAAIxG,GAAJ,EAKrB,CAAA;AAC7B,IAAA,IAAA,CAAKoG,MAAL,GAAcD,IAAI,CAACC,MAAnB,CAAA;AACA,IAAA,IAAA,CAAKC,WAAL,GAAmBF,IAAI,CAACE,WAAL,CAAiBvG,GAAjB,CAAqB2G,OAAO,IAAI,IAAIlG,SAAJ,CAAckG,OAAd,CAAhC,CAAnB,CAAA;AACA,IAAA,IAAA,CAAKH,eAAL,GAAuBH,IAAI,CAACG,eAA5B,CAAA;AACA,IAAA,IAAA,CAAKC,YAAL,GAAoBJ,IAAI,CAACI,YAAzB,CAAA;IACA,IAAKA,CAAAA,YAAL,CAAkBxE,OAAlB,CAA0B2E,EAAE,IAC1B,IAAA,CAAKF,iBAAL,CAAuB7I,GAAvB,CACE+I,EAAE,CAACC,cADL,EAEE,IAAKN,CAAAA,WAAL,CAAiBK,EAAE,CAACC,cAApB,CAFF,CADF,CAAA,CAAA;AAMD,GAAA;;AAEU,EAAA,IAAPC,OAAO,GAAa;AACtB,IAAA,OAAO,QAAP,CAAA;AACD,GAAA;;AAEoB,EAAA,IAAjBC,iBAAiB,GAAqB;AACxC,IAAA,OAAO,KAAKR,WAAZ,CAAA;AACD,GAAA;;AAEuB,EAAA,IAApBS,oBAAoB,GAAsC;AAC5D,IAAA,OAAO,KAAKP,YAAL,CAAkBzG,GAAlB,CACJ4G,EAAD,KAAqC;MACnCC,cAAc,EAAED,EAAE,CAACC,cADgB;MAEnCI,iBAAiB,EAAEL,EAAE,CAACM,QAFa;AAGnC3H,MAAAA,IAAI,EAAEoB,wBAAI,CAACrB,MAAL,CAAYsH,EAAE,CAACrH,IAAf,CAAA;AAH6B,KAArC,CADK,CAAP,CAAA;AAOD,GAAA;;AAEsB,EAAA,IAAnB4H,mBAAmB,GAAqC;AAC1D,IAAA,OAAO,EAAP,CAAA;AACD,GAAA;;EAEDC,eAAe,CAACC,KAAD,EAAyB;AACtC,IAAA,OAAOA,KAAK,GAAG,IAAKf,CAAAA,MAAL,CAAYgB,qBAA3B,CAAA;AACD,GAAA;;EAEDC,iBAAiB,CAACF,KAAD,EAAyB;AACxC,IAAA,OACEA,KAAK,GACH,IAAKf,CAAAA,MAAL,CAAYgB,qBAAZ,GACE,IAAA,CAAKhB,MAAL,CAAYkB,yBAFhB,IAGCH,KAAK,IAAI,IAAKf,CAAAA,MAAL,CAAYgB,qBAArB,IACCD,KAAK,GACH,IAAA,CAAKd,WAAL,CAAiBzG,MAAjB,GAA0B,IAAKwG,CAAAA,MAAL,CAAYmB,2BAN5C,CAAA;AAQD,GAAA;;EAEDC,WAAW,CAACL,KAAD,EAAyB;AAClC,IAAA,OAAO,KAAKX,iBAAL,CAAuBiB,GAAvB,CAA2BN,KAA3B,CAAP,CAAA;AACD,GAAA;;AAEDO,EAAAA,UAAU,GAAgB;AACxB,IAAA,OAAO,CAAC,GAAG,IAAA,CAAKlB,iBAAL,CAAuBmB,MAAvB,EAAJ,CAAP,CAAA;AACD,GAAA;;AAEDC,EAAAA,aAAa,GAAgB;AAC3B,IAAA,OAAO,KAAKvB,WAAL,CAAiBwB,MAAjB,CAAwB,CAACC,CAAD,EAAIX,KAAJ,KAAc,CAAC,IAAKK,CAAAA,WAAL,CAAiBL,KAAjB,CAAvC,CAAP,CAAA;AACD,GAAA;;AAEDjI,EAAAA,SAAS,GAAW;AAClB,IAAA,MAAM6I,OAAO,GAAG,IAAK1B,CAAAA,WAAL,CAAiBzG,MAAjC,CAAA;IAEA,IAAIoI,QAAkB,GAAG,EAAzB,CAAA;AACAC,IAAAA,YAAA,CAAsBD,QAAtB,EAAgCD,OAAhC,CAAA,CAAA;IAEA,MAAMxB,YAAY,GAAG,IAAKA,CAAAA,YAAL,CAAkBzG,GAAlB,CAAsBoI,WAAW,IAAI;MACxD,MAAM;QAAClB,QAAD;AAAWL,QAAAA,cAAAA;AAAX,OAAA,GAA6BuB,WAAnC,CAAA;AACA,MAAA,MAAM7I,IAAI,GAAGgG,KAAK,CAAC7G,IAAN,CAAWiC,wBAAI,CAACrB,MAAL,CAAY8I,WAAW,CAAC7I,IAAxB,CAAX,CAAb,CAAA;MAEA,IAAI8I,eAAyB,GAAG,EAAhC,CAAA;AACAF,MAAAA,YAAA,CAAsBE,eAAtB,EAAuCnB,QAAQ,CAACpH,MAAhD,CAAA,CAAA;MAEA,IAAIwI,SAAmB,GAAG,EAA1B,CAAA;AACAH,MAAAA,YAAA,CAAsBG,SAAtB,EAAiC/I,IAAI,CAACO,MAAtC,CAAA,CAAA;MAEA,OAAO;QACL+G,cADK;AAELwB,QAAAA,eAAe,EAAE7J,aAAM,CAACE,IAAP,CAAY2J,eAAZ,CAFZ;AAGLE,QAAAA,UAAU,EAAErB,QAHP;AAILsB,QAAAA,UAAU,EAAEhK,aAAM,CAACE,IAAP,CAAY4J,SAAZ,CAJP;AAKL/I,QAAAA,IAAAA;OALF,CAAA;AAOD,KAjBoB,CAArB,CAAA;IAmBA,IAAIkJ,gBAA0B,GAAG,EAAjC,CAAA;AACAN,IAAAA,YAAA,CAAsBM,gBAAtB,EAAwChC,YAAY,CAAC3G,MAArD,CAAA,CAAA;AACA,IAAA,IAAI4I,iBAAiB,GAAGlK,aAAM,CAAC6C,KAAP,CAAa+B,gBAAb,CAAxB,CAAA;AACA5E,IAAAA,aAAM,CAACE,IAAP,CAAY+J,gBAAZ,CAA8BnH,CAAAA,IAA9B,CAAmCoH,iBAAnC,CAAA,CAAA;AACA,IAAA,IAAIC,uBAAuB,GAAGF,gBAAgB,CAAC3I,MAA/C,CAAA;AAEA2G,IAAAA,YAAY,CAACxE,OAAb,CAAqBmG,WAAW,IAAI;AAClC,MAAA,MAAMQ,iBAAiB,GAAG7E,uBAAY,CAACI,MAAb,CAQxB,CACAJ,uBAAY,CAACkB,EAAb,CAAgB,gBAAhB,CADA,EAGAlB,uBAAY,CAACC,IAAb,CACEoE,WAAW,CAACC,eAAZ,CAA4BvI,MAD9B,EAEE,iBAFF,CAHA,EAOAiE,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACkB,EAAb,CAAgB,UAAhB,CADF,EAEEmD,WAAW,CAACG,UAAZ,CAAuBzI,MAFzB,EAGE,YAHF,CAPA,EAYAiE,uBAAY,CAACC,IAAb,CAAkBoE,WAAW,CAACI,UAAZ,CAAuB1I,MAAzC,EAAiD,YAAjD,CAZA,EAaAiE,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACkB,EAAb,CAAgB,WAAhB,CADF,EAEEmD,WAAW,CAAC7I,IAAZ,CAAiBO,MAFnB,EAGE,MAHF,CAbA,CARwB,CAA1B,CAAA;MA2BA,MAAMA,MAAM,GAAG8I,iBAAiB,CAACzJ,MAAlB,CACbiJ,WADa,EAEbM,iBAFa,EAGbC,uBAHa,CAAf,CAAA;AAKAA,MAAAA,uBAAuB,IAAI7I,MAA3B,CAAA;KAjCF,CAAA,CAAA;IAmCA4I,iBAAiB,GAAGA,iBAAiB,CAACtK,KAAlB,CAAwB,CAAxB,EAA2BuK,uBAA3B,CAApB,CAAA;AAEA,IAAA,MAAMG,cAAc,GAAG/E,uBAAY,CAACI,MAAb,CASrB,CACAJ,uBAAY,CAACC,IAAb,CAAkB,CAAlB,EAAqB,uBAArB,CADA,EAEAD,uBAAY,CAACC,IAAb,CAAkB,CAAlB,EAAqB,2BAArB,CAFA,EAGAD,uBAAY,CAACC,IAAb,CAAkB,CAAlB,EAAqB,6BAArB,CAHA,EAIAD,uBAAY,CAACC,IAAb,CAAkBkE,QAAQ,CAACpI,MAA3B,EAAmC,UAAnC,CAJA,EAKAiE,uBAAY,CAAC8E,GAAb,CAAiBE,SAAA,CAAiB,KAAjB,CAAjB,EAA0Cd,OAA1C,EAAmD,MAAnD,CALA,EAMAc,SAAA,CAAiB,iBAAjB,CANA,CATqB,CAAvB,CAAA;AAkBA,IAAA,MAAMC,WAAW,GAAG;MAClB1B,qBAAqB,EAAE9I,aAAM,CAACE,IAAP,CAAY,CAAC,IAAA,CAAK4H,MAAL,CAAYgB,qBAAb,CAAZ,CADL;MAElBE,yBAAyB,EAAEhJ,aAAM,CAACE,IAAP,CAAY,CACrC,IAAA,CAAK4H,MAAL,CAAYkB,yBADyB,CAAZ,CAFT;MAKlBC,2BAA2B,EAAEjJ,aAAM,CAACE,IAAP,CAAY,CACvC,IAAA,CAAK4H,MAAL,CAAYmB,2BAD2B,CAAZ,CALX;AAQlBS,MAAAA,QAAQ,EAAE1J,aAAM,CAACE,IAAP,CAAYwJ,QAAZ,CARQ;AASlBrI,MAAAA,IAAI,EAAE,IAAA,CAAK0G,WAAL,CAAiBvG,GAAjB,CAAqBC,GAAG,IAAI3B,QAAQ,CAAC2B,GAAG,CAACe,OAAJ,EAAD,CAApC,CATY;AAUlBwF,MAAAA,eAAe,EAAE7F,wBAAI,CAACrB,MAAL,CAAY,KAAKkH,eAAjB,CAAA;KAVnB,CAAA;AAaA,IAAA,IAAIyC,QAAQ,GAAGzK,aAAM,CAAC6C,KAAP,CAAa,IAAb,CAAf,CAAA;IACA,MAAMvB,MAAM,GAAGgJ,cAAc,CAAC3J,MAAf,CAAsB6J,WAAtB,EAAmCC,QAAnC,CAAf,CAAA;AACAP,IAAAA,iBAAiB,CAACpH,IAAlB,CAAuB2H,QAAvB,EAAiCnJ,MAAjC,CAAA,CAAA;IACA,OAAOmJ,QAAQ,CAAC7K,KAAT,CAAe,CAAf,EAAkB0B,MAAM,GAAG4I,iBAAiB,CAAC5I,MAA7C,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACa,OAAJpB,IAAI,CAACC,QAAD,EAAuD;AAChE;AACA,IAAA,IAAIuK,SAAS,GAAG,CAAC,GAAGvK,QAAJ,CAAhB,CAAA;AAEA,IAAA,MAAM2I,qBAAqB,GAAG4B,SAAS,CAAClD,KAAV,EAA9B,CAAA;;AACA,IAAA,IACEsB,qBAAqB,MACpBA,qBAAqB,GAAGjE,mBADJ,CADvB,EAGE;AACA,MAAA,MAAM,IAAItD,KAAJ,CACJ,6EADI,CAAN,CAAA;AAGD,KAAA;;AAED,IAAA,MAAMyH,yBAAyB,GAAG0B,SAAS,CAAClD,KAAV,EAAlC,CAAA;AACA,IAAA,MAAMyB,2BAA2B,GAAGyB,SAAS,CAAClD,KAAV,EAApC,CAAA;AAEA,IAAA,MAAMmD,YAAY,GAAGhB,YAAA,CAAsBe,SAAtB,CAArB,CAAA;IACA,IAAI3C,WAAW,GAAG,EAAlB,CAAA;;IACA,KAAK,IAAI6C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAApB,EAAkCC,CAAC,EAAnC,EAAuC;MACrC,MAAMzC,OAAO,GAAGuC,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmBgC,iBAAnB,CAAhB,CAAA;AACA8I,MAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgBgC,iBAAhB,CAAZ,CAAA;AACAmG,MAAAA,WAAW,CAACJ,IAAZ,CAAiBxF,wBAAI,CAACxB,MAAL,CAAYX,aAAM,CAACE,IAAP,CAAYiI,OAAZ,CAAZ,CAAjB,CAAA,CAAA;AACD,KAAA;;IAED,MAAMH,eAAe,GAAG0C,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmBgC,iBAAnB,CAAxB,CAAA;AACA8I,IAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgBgC,iBAAhB,CAAZ,CAAA;AAEA,IAAA,MAAMqI,gBAAgB,GAAGN,YAAA,CAAsBe,SAAtB,CAAzB,CAAA;IACA,IAAIzC,YAAmC,GAAG,EAA1C,CAAA;;IACA,KAAK,IAAI2C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,gBAApB,EAAsCW,CAAC,EAAvC,EAA2C;AACzC,MAAA,MAAMvC,cAAc,GAAGqC,SAAS,CAAClD,KAAV,EAAvB,CAAA;AACA,MAAA,MAAMmD,YAAY,GAAGhB,YAAA,CAAsBe,SAAtB,CAArB,CAAA;MACA,MAAMhC,QAAQ,GAAGgC,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmB+K,YAAnB,CAAjB,CAAA;AACAD,MAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgB+K,YAAhB,CAAZ,CAAA;AACA,MAAA,MAAMX,UAAU,GAAGL,YAAA,CAAsBe,SAAtB,CAAnB,CAAA;MACA,MAAMG,SAAS,GAAGH,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmBoK,UAAnB,CAAlB,CAAA;AACA,MAAA,MAAMjJ,IAAI,GAAGoB,wBAAI,CAACxB,MAAL,CAAYX,aAAM,CAACE,IAAP,CAAY2K,SAAZ,CAAZ,CAAb,CAAA;AACAH,MAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgBoK,UAAhB,CAAZ,CAAA;MACA/B,YAAY,CAACN,IAAb,CAAkB;QAChBU,cADgB;QAEhBK,QAFgB;AAGhB3H,QAAAA,IAAAA;OAHF,CAAA,CAAA;AAKD,KAAA;;AAED,IAAA,MAAM+J,WAAW,GAAG;AAClBhD,MAAAA,MAAM,EAAE;QACNgB,qBADM;QAENE,yBAFM;AAGNC,QAAAA,2BAAAA;OAJgB;MAMlBjB,eAAe,EAAE7F,wBAAI,CAACxB,MAAL,CAAYX,aAAM,CAACE,IAAP,CAAY8H,eAAZ,CAAZ,CANC;MAOlBD,WAPkB;AAQlBE,MAAAA,YAAAA;KARF,CAAA;AAWA,IAAA,OAAO,IAAIL,OAAJ,CAAYkD,WAAZ,CAAP,CAAA;AACD,GAAA;;AA/OkB;;ACjDN,eACbC,EAAAA,SADa,EAEbpL,OAFa,EAGM;EACnB,IAAI,CAACoL,SAAL,EAAgB;AACd,IAAA,MAAM,IAAIxJ,KAAJ,CAAU5B,OAAO,IAAI,kBAArB,CAAN,CAAA;AACD,GAAA;AACF;;ACQD;AACA;AACA;;AAcO,MAAMqL,SAAN,CAAgB;EAOrBzK,WAAW,CAACsH,IAAD,EAAsB;AAAA,IAAA,IAAA,CANjCC,MAMiC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CALjCS,iBAKiC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAJjCP,eAIiC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAHjCQ,oBAGiC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAFjCG,mBAEiC,GAAA,KAAA,CAAA,CAAA;AAC/B,IAAA,IAAA,CAAKb,MAAL,GAAcD,IAAI,CAACC,MAAnB,CAAA;AACA,IAAA,IAAA,CAAKS,iBAAL,GAAyBV,IAAI,CAACU,iBAA9B,CAAA;AACA,IAAA,IAAA,CAAKP,eAAL,GAAuBH,IAAI,CAACG,eAA5B,CAAA;AACA,IAAA,IAAA,CAAKQ,oBAAL,GAA4BX,IAAI,CAACW,oBAAjC,CAAA;AACA,IAAA,IAAA,CAAKG,mBAAL,GAA2Bd,IAAI,CAACc,mBAAhC,CAAA;AACD,GAAA;;AAEU,EAAA,IAAPL,OAAO,GAAM;AACf,IAAA,OAAO,CAAP,CAAA;AACD,GAAA;;AAED1H,EAAAA,SAAS,GAAe;IACtB,MAAMqK,8BAA8B,GAAGlE,KAAK,EAA5C,CAAA;IACA4C,YAAA,CACEsB,8BADF,EAEE,IAAK1C,CAAAA,iBAAL,CAAuBjH,MAFzB,CAAA,CAAA;AAKA,IAAA,MAAM4J,sBAAsB,GAAG,IAAKC,CAAAA,qBAAL,EAA/B,CAAA;IACA,MAAMC,yBAAyB,GAAGrE,KAAK,EAAvC,CAAA;IACA4C,YAAA,CACEyB,yBADF,EAEE,IAAK5C,CAAAA,oBAAL,CAA0BlH,MAF5B,CAAA,CAAA;AAKA,IAAA,MAAM+J,6BAA6B,GAAG,IAAKC,CAAAA,4BAAL,EAAtC,CAAA;IACA,MAAMC,gCAAgC,GAAGxE,KAAK,EAA9C,CAAA;IACA4C,YAAA,CACE4B,gCADF,EAEE,IAAK5C,CAAAA,mBAAL,CAAyBrH,MAF3B,CAAA,CAAA;IAKA,MAAMkK,aAAa,GAAGjG,uBAAY,CAACI,MAAb,CAUnB,CACDJ,uBAAY,CAACkB,EAAb,CAAgB,QAAhB,CADC,EAEDlB,uBAAY,CAACI,MAAb,CACE,CACEJ,uBAAY,CAACkB,EAAb,CAAgB,uBAAhB,CADF,EAEElB,uBAAY,CAACkB,EAAb,CAAgB,2BAAhB,CAFF,EAGElB,uBAAY,CAACkB,EAAb,CAAgB,6BAAhB,CAHF,CADF,EAME,QANF,CAFC,EAUDlB,uBAAY,CAACC,IAAb,CACEyF,8BAA8B,CAAC3J,MADjC,EAEE,yBAFF,CAVC,EAcDiE,uBAAY,CAAC8E,GAAb,CACEE,SAAA,EADF,EAEE,IAAA,CAAKhC,iBAAL,CAAuBjH,MAFzB,EAGE,mBAHF,CAdC,EAmBDiJ,SAAA,CAAiB,iBAAjB,CAnBC,EAoBDhF,uBAAY,CAACC,IAAb,CAAkB4F,yBAAyB,CAAC9J,MAA5C,EAAoD,oBAApD,CApBC,EAqBDiE,uBAAY,CAACC,IAAb,CACE0F,sBAAsB,CAAC5J,MADzB,EAEE,wBAFF,CArBC,EAyBDiE,uBAAY,CAACC,IAAb,CACE+F,gCAAgC,CAACjK,MADnC,EAEE,2BAFF,CAzBC,EA6BDiE,uBAAY,CAACC,IAAb,CACE6F,6BAA6B,CAAC/J,MADhC,EAEE,+BAFF,CA7BC,CAVmB,CAAtB,CAAA;AA6CA,IAAA,MAAMmK,iBAAiB,GAAG,IAAIrM,UAAJ,CAAewF,gBAAf,CAA1B,CAAA;IACA,MAAM8G,wBAAwB,GAAG,CAAA,IAAK,CAAtC,CAAA;AACA,IAAA,MAAMC,uBAAuB,GAAGH,aAAa,CAAC7K,MAAd,CAC9B;AACEiL,MAAAA,MAAM,EAAEF,wBADV;MAEE5D,MAAM,EAAE,KAAKA,MAFf;AAGE+D,MAAAA,uBAAuB,EAAE,IAAIzM,UAAJ,CAAe6L,8BAAf,CAH3B;AAIE1C,MAAAA,iBAAiB,EAAE,IAAA,CAAKA,iBAAL,CAAuB/G,GAAvB,CAA2BC,GAAG,IAAIA,GAAG,CAACe,OAAJ,EAAlC,CAJrB;AAKEwF,MAAAA,eAAe,EAAE7F,wBAAI,CAACrB,MAAL,CAAY,IAAA,CAAKkH,eAAjB,CALnB;AAME8D,MAAAA,kBAAkB,EAAE,IAAI1M,UAAJ,CAAegM,yBAAf,CANtB;MAOEF,sBAPF;AAQEa,MAAAA,yBAAyB,EAAE,IAAI3M,UAAJ,CACzBmM,gCADyB,CAR7B;AAWEF,MAAAA,6BAAAA;KAZ4B,EAc9BI,iBAd8B,CAAhC,CAAA;AAgBA,IAAA,OAAOA,iBAAiB,CAAC7L,KAAlB,CAAwB,CAAxB,EAA2B+L,uBAA3B,CAAP,CAAA;AACD,GAAA;;AAEOR,EAAAA,qBAAqB,GAAe;IAC1C,IAAIa,gBAAgB,GAAG,CAAvB,CAAA;AACA,IAAA,MAAMd,sBAAsB,GAAG,IAAI9L,UAAJ,CAAewF,gBAAf,CAA/B,CAAA;;AACA,IAAA,KAAK,MAAMgF,WAAX,IAA0B,IAAA,CAAKpB,oBAA/B,EAAqD;MACnD,MAAMyD,8BAA8B,GAAGlF,KAAK,EAA5C,CAAA;MACA4C,YAAA,CACEsC,8BADF,EAEErC,WAAW,CAACnB,iBAAZ,CAA8BnH,MAFhC,CAAA,CAAA;MAKA,MAAM4K,iBAAiB,GAAGnF,KAAK,EAA/B,CAAA;MACA4C,YAAA,CAAsBuC,iBAAtB,EAAyCtC,WAAW,CAAC7I,IAAZ,CAAiBO,MAA1D,CAAA,CAAA;AAEA,MAAA,MAAM8I,iBAAiB,GAAG7E,uBAAY,CAACI,MAAb,CAMvB,CACDJ,uBAAY,CAACkB,EAAb,CAAgB,gBAAhB,CADC,EAEDlB,uBAAY,CAACC,IAAb,CACEyG,8BAA8B,CAAC3K,MADjC,EAEE,gCAFF,CAFC,EAMDiE,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACkB,EAAb,EADF,EAEEmD,WAAW,CAACnB,iBAAZ,CAA8BnH,MAFhC,EAGE,mBAHF,CANC,EAWDiE,uBAAY,CAACC,IAAb,CAAkB0G,iBAAiB,CAAC5K,MAApC,EAA4C,mBAA5C,CAXC,EAYDiE,uBAAY,CAACC,IAAb,CAAkBoE,WAAW,CAAC7I,IAAZ,CAAiBO,MAAnC,EAA2C,MAA3C,CAZC,CANuB,CAA1B,CAAA;AAqBA0K,MAAAA,gBAAgB,IAAI5B,iBAAiB,CAACzJ,MAAlB,CAClB;QACE0H,cAAc,EAAEuB,WAAW,CAACvB,cAD9B;AAEE4D,QAAAA,8BAA8B,EAAE,IAAI7M,UAAJ,CAC9B6M,8BAD8B,CAFlC;QAKExD,iBAAiB,EAAEmB,WAAW,CAACnB,iBALjC;AAMEyD,QAAAA,iBAAiB,EAAE,IAAI9M,UAAJ,CAAe8M,iBAAf,CANrB;QAOEnL,IAAI,EAAE6I,WAAW,CAAC7I,IAAAA;AAPpB,OADkB,EAUlBmK,sBAVkB,EAWlBc,gBAXkB,CAApB,CAAA;AAaD,KAAA;;AAED,IAAA,OAAOd,sBAAsB,CAACtL,KAAvB,CAA6B,CAA7B,EAAgCoM,gBAAhC,CAAP,CAAA;AACD,GAAA;;AAEOV,EAAAA,4BAA4B,GAAe;IACjD,IAAIU,gBAAgB,GAAG,CAAvB,CAAA;AACA,IAAA,MAAMX,6BAA6B,GAAG,IAAIjM,UAAJ,CAAewF,gBAAf,CAAtC,CAAA;;AACA,IAAA,KAAK,MAAMuH,MAAX,IAAqB,IAAA,CAAKxD,mBAA1B,EAA+C;MAC7C,MAAMyD,4BAA4B,GAAGrF,KAAK,EAA1C,CAAA;MACA4C,YAAA,CACEyC,4BADF,EAEED,MAAM,CAACE,eAAP,CAAuB/K,MAFzB,CAAA,CAAA;MAKA,MAAMgL,4BAA4B,GAAGvF,KAAK,EAA1C,CAAA;MACA4C,YAAA,CACE2C,4BADF,EAEEH,MAAM,CAACI,eAAP,CAAuBjL,MAFzB,CAAA,CAAA;AAKA,MAAA,MAAMkL,wBAAwB,GAAGjH,uBAAY,CAACI,MAAb,CAM9B,CACD4E,SAAA,CAAiB,YAAjB,CADC,EAEDhF,uBAAY,CAACC,IAAb,CACE4G,4BAA4B,CAAC9K,MAD/B,EAEE,8BAFF,CAFC,EAMDiE,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACkB,EAAb,EADF,EAEE0F,MAAM,CAACE,eAAP,CAAuB/K,MAFzB,EAGE,iBAHF,CANC,EAWDiE,uBAAY,CAACC,IAAb,CACE8G,4BAA4B,CAAChL,MAD/B,EAEE,8BAFF,CAXC,EAeDiE,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACkB,EAAb,EADF,EAEE0F,MAAM,CAACI,eAAP,CAAuBjL,MAFzB,EAGE,iBAHF,CAfC,CAN8B,CAAjC,CAAA;AA4BA0K,MAAAA,gBAAgB,IAAIQ,wBAAwB,CAAC7L,MAAzB,CAClB;AACE8L,QAAAA,UAAU,EAAEN,MAAM,CAACM,UAAP,CAAkBjK,OAAlB,EADd;AAEE4J,QAAAA,4BAA4B,EAAE,IAAIhN,UAAJ,CAC5BgN,4BAD4B,CAFhC;QAKEC,eAAe,EAAEF,MAAM,CAACE,eAL1B;AAMEC,QAAAA,4BAA4B,EAAE,IAAIlN,UAAJ,CAC5BkN,4BAD4B,CANhC;QASEC,eAAe,EAAEJ,MAAM,CAACI,eAAAA;AAT1B,OADkB,EAYlBlB,6BAZkB,EAalBW,gBAbkB,CAApB,CAAA;AAeD,KAAA;;AAED,IAAA,OAAOX,6BAA6B,CAACzL,KAA9B,CAAoC,CAApC,EAAuCoM,gBAAvC,CAAP,CAAA;AACD,GAAA;;EAEiB,OAAXhL,WAAW,CAACyK,iBAAD,EAA2C;AAC3D,IAAA,IAAIf,SAAS,GAAG,CAAC,GAAGe,iBAAJ,CAAhB,CAAA;AAEA,IAAA,MAAMG,MAAM,GAAGlB,SAAS,CAAClD,KAAV,EAAf,CAAA;AACA,IAAA,MAAMkF,YAAY,GAAGd,MAAM,GAAG/G,mBAA9B,CAAA;AACA8H,IAAAA,MAAM,CACJf,MAAM,KAAKc,YADP,EAEH,wDAFG,CAAN,CAAA;IAKA,MAAMpE,OAAO,GAAGoE,YAAhB,CAAA;IACAC,MAAM,CACJrE,OAAO,KAAK,CADR,EAEH,CAA8DA,4DAAAA,EAAAA,OAAQ,EAFnE,CAAN,CAAA;AAKA,IAAA,MAAMR,MAAqB,GAAG;AAC5BgB,MAAAA,qBAAqB,EAAE4B,SAAS,CAAClD,KAAV,EADK;AAE5BwB,MAAAA,yBAAyB,EAAE0B,SAAS,CAAClD,KAAV,EAFC;MAG5ByB,2BAA2B,EAAEyB,SAAS,CAAClD,KAAV,EAAA;KAH/B,CAAA;IAMA,MAAMe,iBAAiB,GAAG,EAA1B,CAAA;AACA,IAAA,MAAMsD,uBAAuB,GAAGlC,YAAA,CAAsBe,SAAtB,CAAhC,CAAA;;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,uBAApB,EAA6CjB,CAAC,EAA9C,EAAkD;AAChDrC,MAAAA,iBAAiB,CAACZ,IAAlB,CACE,IAAI1F,SAAJ,CAAcyI,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoBhL,iBAApB,CAAd,CADF,CAAA,CAAA;AAGD,KAAA;;AAED,IAAA,MAAMoG,eAAe,GAAG7F,wBAAI,CAACxB,MAAL,CAAY+J,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoBhL,iBAApB,CAAZ,CAAxB,CAAA;AAEA,IAAA,MAAMqI,gBAAgB,GAAGN,YAAA,CAAsBe,SAAtB,CAAzB,CAAA;IACA,MAAMlC,oBAAkD,GAAG,EAA3D,CAAA;;IACA,KAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,gBAApB,EAAsCW,CAAC,EAAvC,EAA2C;AACzC,MAAA,MAAMvC,cAAc,GAAGqC,SAAS,CAAClD,KAAV,EAAvB,CAAA;AACA,MAAA,MAAMqF,uBAAuB,GAAGlD,YAAA,CAAsBe,SAAtB,CAAhC,CAAA;MACA,MAAMjC,iBAAiB,GAAGiC,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoBC,uBAApB,CAA1B,CAAA;AACA,MAAA,MAAM7C,UAAU,GAAGL,YAAA,CAAsBe,SAAtB,CAAnB,CAAA;AACA,MAAA,MAAM3J,IAAI,GAAG,IAAI3B,UAAJ,CAAesL,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoB5C,UAApB,CAAf,CAAb,CAAA;MACAxB,oBAAoB,CAACb,IAArB,CAA0B;QACxBU,cADwB;QAExBI,iBAFwB;AAGxB1H,QAAAA,IAAAA;OAHF,CAAA,CAAA;AAKD,KAAA;;AAED,IAAA,MAAM+L,wBAAwB,GAAGnD,YAAA,CAAsBe,SAAtB,CAAjC,CAAA;IACA,MAAM/B,mBAAgD,GAAG,EAAzD,CAAA;;IACA,KAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,wBAApB,EAA8ClC,CAAC,EAA/C,EAAmD;AACjD,MAAA,MAAM6B,UAAU,GAAG,IAAIxK,SAAJ,CAAcyI,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoBhL,iBAApB,CAAd,CAAnB,CAAA;AACA,MAAA,MAAMmL,qBAAqB,GAAGpD,YAAA,CAAsBe,SAAtB,CAA9B,CAAA;MACA,MAAM2B,eAAe,GAAG3B,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoBG,qBAApB,CAAxB,CAAA;AACA,MAAA,MAAMC,qBAAqB,GAAGrD,YAAA,CAAsBe,SAAtB,CAA9B,CAAA;MACA,MAAM6B,eAAe,GAAG7B,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoBI,qBAApB,CAAxB,CAAA;MACArE,mBAAmB,CAAChB,IAApB,CAAyB;QACvB8E,UADuB;QAEvBJ,eAFuB;AAGvBE,QAAAA,eAAAA;OAHF,CAAA,CAAA;AAKD,KAAA;;IAED,OAAO,IAAIvB,SAAJ,CAAc;MACnBlD,MADmB;MAEnBS,iBAFmB;MAGnBP,eAHmB;MAInBQ,oBAJmB;AAKnBG,MAAAA,mBAAAA;AALmB,KAAd,CAAP,CAAA;AAOD,GAAA;;AAnSoB;;AC1BvB;AACO,MAAMsE,gBAAgB,GAAG;EAC9BC,yBAAyB,CAACzB,iBAAD,EAAmD;AAC1E,IAAA,MAAMG,MAAM,GAAGH,iBAAiB,CAAC,CAAD,CAAhC,CAAA;AACA,IAAA,MAAMiB,YAAY,GAAGd,MAAM,GAAG/G,mBAA9B,CAF0E;;IAK1E,IAAI6H,YAAY,KAAKd,MAArB,EAA6B;AAC3B,MAAA,OAAO,QAAP,CAAA;AACD,KAPyE;;;AAU1E,IAAA,OAAOc,YAAP,CAAA;GAX4B;;EAc9B1L,WAAW,EAAGyK,iBAAD,IAAqD;AAChE,IAAA,MAAMnD,OAAO,GACX2E,gBAAgB,CAACC,yBAAjB,CAA2CzB,iBAA3C,CADF,CAAA;;IAEA,IAAInD,OAAO,KAAK,QAAhB,EAA0B;AACxB,MAAA,OAAOV,OAAO,CAAC1H,IAAR,CAAauL,iBAAb,CAAP,CAAA;AACD,KAAA;;IAED,IAAInD,OAAO,KAAK,CAAhB,EAAmB;AACjB,MAAA,OAAO0C,SAAS,CAAChK,WAAV,CAAsByK,iBAAtB,CAAP,CAAA;AACD,KAFD,MAEO;AACL,MAAA,MAAM,IAAIlK,KAAJ,CACH,CAA8B+G,4BAAAA,EAAAA,OAAQ,mCADnC,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;AA5B6B;;ACShC;AACA;AACA;;AAGkB6E,mCAAlB;AAMA;AACA;AACA;;WARkBA;AAAAA,EAAAA,kBAAAA;AAAAA,EAAAA,kBAAAA;AAAAA,EAAAA,kBAAAA;AAAAA,CAAAA,EAAAA,8BAAAA;;AASlB,MAAMC,iBAAiB,GAAGpN,aAAM,CAAC6C,KAAP,CAAaiC,yBAAb,CAAwCuI,CAAAA,IAAxC,CAA6C,CAA7C,CAA1B,CAAA;AAEA;AACA;AACA;;AA0CA;AACA;AACA;AACO,MAAMC,sBAAN,CAA6B;AAClC;AACF;AACA;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;EAGE/M,WAAW,CAACgN,IAAD,EAAyC;AAAA,IAAA,IAAA,CAZpDlM,IAYoD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAPpD8B,SAOoD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAFpDpC,IAEoD,GAFrCf,aAAM,CAAC6C,KAAP,CAAa,CAAb,CAEqC,CAAA;AAClD,IAAA,IAAA,CAAKM,SAAL,GAAiBoK,IAAI,CAACpK,SAAtB,CAAA;AACA,IAAA,IAAA,CAAK9B,IAAL,GAAYkM,IAAI,CAAClM,IAAjB,CAAA;;IACA,IAAIkM,IAAI,CAACxM,IAAT,EAAe;AACb,MAAA,IAAA,CAAKA,IAAL,GAAYwM,IAAI,CAACxM,IAAjB,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACE0B,EAAAA,MAAM,GAA+B;IACnC,OAAO;AACLpB,MAAAA,IAAI,EAAE,IAAKA,CAAAA,IAAL,CAAUG,GAAV,CAAc,CAAC;QAAC2C,MAAD;QAASqJ,QAAT;AAAmBC,QAAAA,UAAAA;AAAnB,OAAD,MAAqC;AACvDtJ,QAAAA,MAAM,EAAEA,MAAM,CAAC1B,MAAP,EAD+C;QAEvD+K,QAFuD;AAGvDC,QAAAA,UAAAA;AAHuD,OAArC,CAAd,CADD;AAMLtK,MAAAA,SAAS,EAAE,IAAA,CAAKA,SAAL,CAAeV,MAAf,EANN;AAOL1B,MAAAA,IAAI,EAAE,CAAC,GAAG,IAAA,CAAKA,IAAT,CAAA;KAPR,CAAA;AASD,GAAA;;AAtCiC,CAAA;AAyCpC;AACA;AACA;;AA+DA;AACA;AACA;AACO,MAAM2M,WAAN,CAAkB;AACvB;AACF;AACA;AACA;;AAGE;AACF;AACA;AACe,EAAA,IAAT1I,SAAS,GAAkB;AAC7B,IAAA,IAAI,KAAK2I,UAAL,CAAgBrM,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,MAAA,OAAO,IAAKqM,CAAAA,UAAL,CAAgB,CAAhB,EAAmB3I,SAA1B,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AA2CE;AACF;AACA;EACEzE,WAAW,CACTgN,IADS,EAET;IAAA,IA9DFI,CAAAA,UA8DE,GA9DuC,EA8DvC,CAAA;AAAA,IAAA,IAAA,CA/CFC,QA+CE,GAAA,KAAA,CAAA,CAAA;IAAA,IA1CF3F,CAAAA,YA0CE,GA1C4C,EA0C5C,CAAA;AAAA,IAAA,IAAA,CArCFD,eAqCE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAhCF6F,oBAgCE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CA1BFC,SA0BE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CArBFC,QAqBE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAhBFC,KAgBE,GAAA,KAAA,CAAA,CAAA;;IACA,IAAI,CAACT,IAAL,EAAW;AACT,MAAA,OAAA;AACD,KAAA;;IACD,IAAIA,IAAI,CAACK,QAAT,EAAmB;AACjB,MAAA,IAAA,CAAKA,QAAL,GAAgBL,IAAI,CAACK,QAArB,CAAA;AACD,KAAA;;IACD,IAAIL,IAAI,CAACI,UAAT,EAAqB;AACnB,MAAA,IAAA,CAAKA,UAAL,GAAkBJ,IAAI,CAACI,UAAvB,CAAA;AACD,KAAA;;AACD,IAAA,IAAIlN,MAAM,CAACyE,SAAP,CAAiB+I,cAAjB,CAAgCC,IAAhC,CAAqCX,IAArC,EAA2C,sBAA3C,CAAJ,EAAwE;MACtE,MAAM;QAACY,SAAD;AAAYN,QAAAA,oBAAAA;AAAZ,OAAA,GACJN,IADF,CAAA;MAEA,IAAKvF,CAAAA,eAAL,GAAuBmG,SAAvB,CAAA;MACA,IAAKN,CAAAA,oBAAL,GAA4BA,oBAA5B,CAAA;AACD,KALD,MAKO;MACL,MAAM;QAAC7F,eAAD;AAAkB8F,QAAAA,SAAAA;AAAlB,OAAA,GACJP,IADF,CAAA;;AAEA,MAAA,IAAIO,SAAJ,EAAe;QACb,IAAKA,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;AACD,OAAA;;MACD,IAAK9F,CAAAA,eAAL,GAAuBA,eAAvB,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACEvF,EAAAA,MAAM,GAAoB;IACxB,OAAO;AACLuF,MAAAA,eAAe,EAAE,IAAA,CAAKA,eAAL,IAAwB,IADpC;MAEL4F,QAAQ,EAAE,IAAKA,CAAAA,QAAL,GAAgB,IAAA,CAAKA,QAAL,CAAcnL,MAAd,EAAhB,GAAyC,IAF9C;MAGLqL,SAAS,EAAE,IAAKA,CAAAA,SAAL,GACP;AACEjK,QAAAA,KAAK,EAAE,IAAA,CAAKiK,SAAL,CAAejK,KADxB;AAEEuK,QAAAA,gBAAgB,EAAE,IAAKN,CAAAA,SAAL,CAAeM,gBAAf,CAAgC3L,MAAhC,EAAA;AAFpB,OADO,GAKP,IARC;AASLwF,MAAAA,YAAY,EAAE,IAAA,CAAKA,YAAL,CAAkBzG,GAAlB,CAAsBoI,WAAW,IAAIA,WAAW,CAACnH,MAAZ,EAArC,CATT;AAUL4L,MAAAA,OAAO,EAAE,IAAKV,CAAAA,UAAL,CAAgBnM,GAAhB,CAAoB,CAAC;AAACvC,QAAAA,SAAAA;AAAD,OAAD,KAAiB;QAC5C,OAAOA,SAAS,CAACwD,MAAV,EAAP,CAAA;OADO,CAAA;KAVX,CAAA;AAcD,GAAA;AAED;AACF;AACA;;;EACE6L,GAAG,CACD,GAAGC,KADF,EAIY;AACb,IAAA,IAAIA,KAAK,CAACjN,MAAN,KAAiB,CAArB,EAAwB;AACtB,MAAA,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN,CAAA;AACD,KAAA;;AAEDgN,IAAAA,KAAK,CAAC9K,OAAN,CAAeoD,IAAD,IAAe;MAC3B,IAAI,cAAA,IAAkBA,IAAtB,EAA4B;QAC1B,IAAKoB,CAAAA,YAAL,GAAoB,IAAA,CAAKA,YAAL,CAAkB7E,MAAlB,CAAyByD,IAAI,CAACoB,YAA9B,CAApB,CAAA;OADF,MAEO,IAAI,MAAA,IAAUpB,IAAV,IAAkB,eAAeA,IAAjC,IAAyC,MAAUA,IAAAA,IAAvD,EAA6D;AAClE,QAAA,IAAA,CAAKoB,YAAL,CAAkBN,IAAlB,CAAuBd,IAAvB,CAAA,CAAA;AACD,OAFM,MAEA;QACL,IAAKoB,CAAAA,YAAL,CAAkBN,IAAlB,CAAuB,IAAI2F,sBAAJ,CAA2BzG,IAA3B,CAAvB,CAAA,CAAA;AACD,OAAA;KAPH,CAAA,CAAA;AASA,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACE2H,EAAAA,cAAc,GAAY;AACxB,IAAA,IACE,KAAKT,QAAL,IACAU,IAAI,CAACC,SAAL,CAAe,IAAKjM,CAAAA,MAAL,EAAf,CAAA,KAAkCgM,IAAI,CAACC,SAAL,CAAe,IAAKV,CAAAA,KAApB,CAFpC,EAGE;AACA,MAAA,OAAO,KAAKD,QAAZ,CAAA;AACD,KAAA;;AAED,IAAA,IAAI/F,eAAJ,CAAA;AACA,IAAA,IAAIC,YAAJ,CAAA;;IACA,IAAI,IAAA,CAAK6F,SAAT,EAAoB;AAClB9F,MAAAA,eAAe,GAAG,IAAA,CAAK8F,SAAL,CAAejK,KAAjC,CAAA;;MACA,IAAI,IAAA,CAAKoE,YAAL,CAAkB,CAAlB,KAAwB,IAAK6F,CAAAA,SAAL,CAAeM,gBAA3C,EAA6D;QAC3DnG,YAAY,GAAG,CAAC,IAAA,CAAK6F,SAAL,CAAeM,gBAAhB,EAAkC,GAAG,IAAKnG,CAAAA,YAA1C,CAAf,CAAA;AACD,OAFD,MAEO;QACLA,YAAY,GAAG,KAAKA,YAApB,CAAA;AACD,OAAA;AACF,KAPD,MAOO;MACLD,eAAe,GAAG,KAAKA,eAAvB,CAAA;MACAC,YAAY,GAAG,KAAKA,YAApB,CAAA;AACD,KAAA;;IACD,IAAI,CAACD,eAAL,EAAsB;AACpB,MAAA,MAAM,IAAIzG,KAAJ,CAAU,sCAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,IAAI0G,YAAY,CAAC3G,MAAb,GAAsB,CAA1B,EAA6B;MAC3BqN,OAAO,CAACC,IAAR,CAAa,0BAAb,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,IAAIhB,QAAJ,CAAA;;IACA,IAAI,IAAA,CAAKA,QAAT,EAAmB;MACjBA,QAAQ,GAAG,KAAKA,QAAhB,CAAA;AACD,KAFD,MAEO,IAAI,IAAKD,CAAAA,UAAL,CAAgBrM,MAAhB,GAAyB,CAAzB,IAA8B,KAAKqM,UAAL,CAAgB,CAAhB,CAAA,CAAmB1O,SAArD,EAAgE;AACrE;AACA2O,MAAAA,QAAQ,GAAG,IAAKD,CAAAA,UAAL,CAAgB,CAAhB,EAAmB1O,SAA9B,CAAA;AACD,KAHM,MAGA;AACL,MAAA,MAAM,IAAIsC,KAAJ,CAAU,gCAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,KAAK,IAAIqJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,YAAY,CAAC3G,MAAjC,EAAyCsJ,CAAC,EAA1C,EAA8C;MAC5C,IAAI3C,YAAY,CAAC2C,CAAD,CAAZ,CAAgBzH,SAAhB,KAA8BnB,SAAlC,EAA6C;AAC3C,QAAA,MAAM,IAAIT,KAAJ,CACH,CAAgCqJ,8BAAAA,EAAAA,CAAE,2BAD/B,CAAN,CAAA;AAGD,OAAA;AACF,KAAA;;IAED,MAAMxB,UAAoB,GAAG,EAA7B,CAAA;IACA,MAAMyF,YAA2B,GAAG,EAApC,CAAA;AACA5G,IAAAA,YAAY,CAACxE,OAAb,CAAqBmG,WAAW,IAAI;AAClCA,MAAAA,WAAW,CAACvI,IAAZ,CAAiBoC,OAAjB,CAAyBqL,WAAW,IAAI;AACtCD,QAAAA,YAAY,CAAClH,IAAb,CAAkB,EAAC,GAAGmH,WAAAA;SAAtB,CAAA,CAAA;OADF,CAAA,CAAA;AAIA,MAAA,MAAM3L,SAAS,GAAGyG,WAAW,CAACzG,SAAZ,CAAsBJ,QAAtB,EAAlB,CAAA;;AACA,MAAA,IAAI,CAACqG,UAAU,CAAC2F,QAAX,CAAoB5L,SAApB,CAAL,EAAqC;QACnCiG,UAAU,CAACzB,IAAX,CAAgBxE,SAAhB,CAAA,CAAA;AACD,OAAA;AACF,KATD,EAjDwB;;AA6DxBiG,IAAAA,UAAU,CAAC3F,OAAX,CAAmBN,SAAS,IAAI;MAC9B0L,YAAY,CAAClH,IAAb,CAAkB;AAChBxD,QAAAA,MAAM,EAAE,IAAIlC,SAAJ,CAAckB,SAAd,CADQ;AAEhBqK,QAAAA,QAAQ,EAAE,KAFM;AAGhBC,QAAAA,UAAU,EAAE,KAAA;OAHd,CAAA,CAAA;AAKD,KAND,EA7DwB;;IAsExB,MAAMuB,WAA0B,GAAG,EAAnC,CAAA;AACAH,IAAAA,YAAY,CAACpL,OAAb,CAAqBqL,WAAW,IAAI;AAClC,MAAA,MAAMG,YAAY,GAAGH,WAAW,CAAC3K,MAAZ,CAAmBpB,QAAnB,EAArB,CAAA;AACA,MAAA,MAAMmM,WAAW,GAAGF,WAAW,CAACG,SAAZ,CAAsBC,CAAC,IAAI;AAC7C,QAAA,OAAOA,CAAC,CAACjL,MAAF,CAASpB,QAAT,OAAwBkM,YAA/B,CAAA;AACD,OAFmB,CAApB,CAAA;;AAGA,MAAA,IAAIC,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpBF,QAAAA,WAAW,CAACE,WAAD,CAAX,CAAyBzB,UAAzB,GACEuB,WAAW,CAACE,WAAD,CAAX,CAAyBzB,UAAzB,IAAuCqB,WAAW,CAACrB,UADrD,CAAA;AAEAuB,QAAAA,WAAW,CAACE,WAAD,CAAX,CAAyB1B,QAAzB,GACEwB,WAAW,CAACE,WAAD,CAAX,CAAyB1B,QAAzB,IAAqCsB,WAAW,CAACtB,QADnD,CAAA;AAED,OALD,MAKO;QACLwB,WAAW,CAACrH,IAAZ,CAAiBmH,WAAjB,CAAA,CAAA;AACD,OAAA;AACF,KAbD,EAvEwB;;AAuFxBE,IAAAA,WAAW,CAACK,IAAZ,CAAiB,UAAUD,CAAV,EAAaE,CAAb,EAAgB;AAC/B,MAAA,IAAIF,CAAC,CAAC5B,QAAF,KAAe8B,CAAC,CAAC9B,QAArB,EAA+B;AAC7B;AACA,QAAA,OAAO4B,CAAC,CAAC5B,QAAF,GAAa,CAAC,CAAd,GAAkB,CAAzB,CAAA;AACD,OAAA;;AACD,MAAA,IAAI4B,CAAC,CAAC3B,UAAF,KAAiB6B,CAAC,CAAC7B,UAAvB,EAAmC;AACjC;AACA,QAAA,OAAO2B,CAAC,CAAC3B,UAAF,GAAe,CAAC,CAAhB,GAAoB,CAA3B,CAAA;AACD,OAR8B;;;AAU/B,MAAA,OAAO2B,CAAC,CAACjL,MAAF,CAAS5B,QAAT,EAAoBgN,CAAAA,aAApB,CAAkCD,CAAC,CAACnL,MAAF,CAAS5B,QAAT,EAAlC,CAAP,CAAA;AACD,KAXD,EAvFwB;;AAqGxB,IAAA,MAAMiN,aAAa,GAAGR,WAAW,CAACG,SAAZ,CAAsBC,CAAC,IAAI;AAC/C,MAAA,OAAOA,CAAC,CAACjL,MAAF,CAAS9B,MAAT,CAAgBuL,QAAhB,CAAP,CAAA;AACD,KAFqB,CAAtB,CAAA;;AAGA,IAAA,IAAI4B,aAAa,GAAG,CAAC,CAArB,EAAwB;MACtB,MAAM,CAACC,SAAD,CAAA,GAAcT,WAAW,CAACpC,MAAZ,CAAmB4C,aAAnB,EAAkC,CAAlC,CAApB,CAAA;MACAC,SAAS,CAACjC,QAAV,GAAqB,IAArB,CAAA;MACAiC,SAAS,CAAChC,UAAV,GAAuB,IAAvB,CAAA;MACAuB,WAAW,CAACU,OAAZ,CAAoBD,SAApB,CAAA,CAAA;AACD,KALD,MAKO;MACLT,WAAW,CAACU,OAAZ,CAAoB;AAClBvL,QAAAA,MAAM,EAAEyJ,QADU;AAElBJ,QAAAA,QAAQ,EAAE,IAFQ;AAGlBC,QAAAA,UAAU,EAAE,IAAA;OAHd,CAAA,CAAA;AAKD,KAnHuB;;;AAsHxB,IAAA,KAAK,MAAMzI,SAAX,IAAwB,IAAA,CAAK2I,UAA7B,EAAyC;AACvC,MAAA,MAAMuB,WAAW,GAAGF,WAAW,CAACG,SAAZ,CAAsBC,CAAC,IAAI;QAC7C,OAAOA,CAAC,CAACjL,MAAF,CAAS9B,MAAT,CAAgB2C,SAAS,CAAC/F,SAA1B,CAAP,CAAA;AACD,OAFmB,CAApB,CAAA;;AAGA,MAAA,IAAIiQ,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpB,QAAA,IAAI,CAACF,WAAW,CAACE,WAAD,CAAX,CAAyB1B,QAA9B,EAAwC;AACtCwB,UAAAA,WAAW,CAACE,WAAD,CAAX,CAAyB1B,QAAzB,GAAoC,IAApC,CAAA;AACAmB,UAAAA,OAAO,CAACC,IAAR,CACE,0DACE,GAAA,gFADF,GAEE,wFAHJ,CAAA,CAAA;AAKD,SAAA;AACF,OATD,MASO;QACL,MAAM,IAAIrN,KAAJ,CAAW,CAAkByD,gBAAAA,EAAAA,SAAS,CAAC/F,SAAV,CAAoB8D,QAApB,EAA+B,CAAA,CAA5D,CAAN,CAAA;AACD,OAAA;AACF,KAAA;;IAED,IAAI+F,qBAAqB,GAAG,CAA5B,CAAA;IACA,IAAIE,yBAAyB,GAAG,CAAhC,CAAA;AACA,IAAA,IAAIC,2BAA2B,GAAG,CAAlC,CA1IwB;;IA6IxB,MAAM0G,UAAoB,GAAG,EAA7B,CAAA;IACA,MAAMC,YAAsB,GAAG,EAA/B,CAAA;IACAZ,WAAW,CAACvL,OAAZ,CAAoB,CAAC;MAACU,MAAD;MAASqJ,QAAT;AAAmBC,MAAAA,UAAAA;AAAnB,KAAD,KAAoC;AACtD,MAAA,IAAID,QAAJ,EAAc;AACZmC,QAAAA,UAAU,CAAChI,IAAX,CAAgBxD,MAAM,CAACpB,QAAP,EAAhB,CAAA,CAAA;AACA+F,QAAAA,qBAAqB,IAAI,CAAzB,CAAA;;QACA,IAAI,CAAC2E,UAAL,EAAiB;AACfzE,UAAAA,yBAAyB,IAAI,CAA7B,CAAA;AACD,SAAA;AACF,OAND,MAMO;AACL4G,QAAAA,YAAY,CAACjI,IAAb,CAAkBxD,MAAM,CAACpB,QAAP,EAAlB,CAAA,CAAA;;QACA,IAAI,CAAC0K,UAAL,EAAiB;AACfxE,UAAAA,2BAA2B,IAAI,CAA/B,CAAA;AACD,SAAA;AACF,OAAA;KAZH,CAAA,CAAA;AAeA,IAAA,MAAMlB,WAAW,GAAG4H,UAAU,CAACvM,MAAX,CAAkBwM,YAAlB,CAApB,CAAA;AACA,IAAA,MAAMpH,oBAA2C,GAAGP,YAAY,CAACzG,GAAb,CAClDoI,WAAW,IAAI;MACb,MAAM;QAAC7I,IAAD;AAAOoC,QAAAA,SAAAA;AAAP,OAAA,GAAoByG,WAA1B,CAAA;MACA,OAAO;QACLvB,cAAc,EAAEN,WAAW,CAAC8H,OAAZ,CAAoB1M,SAAS,CAACJ,QAAV,EAApB,CADX;QAEL2F,QAAQ,EAAEkB,WAAW,CAACvI,IAAZ,CAAiBG,GAAjB,CAAqBsO,IAAI,IACjC/H,WAAW,CAAC8H,OAAZ,CAAoBC,IAAI,CAAC3L,MAAL,CAAYpB,QAAZ,EAApB,CADQ,CAFL;AAKLhC,QAAAA,IAAI,EAAEoB,wBAAI,CAACxB,MAAL,CAAYI,IAAZ,CAAA;OALR,CAAA;AAOD,KAViD,CAApD,CAAA;AAaAyH,IAAAA,oBAAoB,CAAC/E,OAArB,CAA6BmG,WAAW,IAAI;AAC1CmG,MAAAA,MAAS,CAACnG,WAAW,CAACvB,cAAZ,IAA8B,CAA/B,CAAT,CAAA;AACAuB,MAAAA,WAAW,CAAClB,QAAZ,CAAqBjF,OAArB,CAA6BuM,QAAQ,IAAID,MAAS,CAACC,QAAQ,IAAI,CAAb,CAAlD,CAAA,CAAA;KAFF,CAAA,CAAA;IAKA,OAAO,IAAIpI,OAAJ,CAAY;AACjBE,MAAAA,MAAM,EAAE;QACNgB,qBADM;QAENE,yBAFM;AAGNC,QAAAA,2BAAAA;OAJe;MAMjBlB,WANiB;MAOjBC,eAPiB;AAQjBC,MAAAA,YAAY,EAAEO,oBAAAA;AARG,KAAZ,CAAP,CAAA;AAUD,GAAA;AAED;AACF;AACA;;;AACEyH,EAAAA,QAAQ,GAAY;AAClB,IAAA,MAAMtQ,OAAO,GAAG,IAAK6O,CAAAA,cAAL,EAAhB,CAAA;AACA,IAAA,MAAMmB,UAAU,GAAGhQ,OAAO,CAACoI,WAAR,CAAoBnI,KAApB,CACjB,CADiB,EAEjBD,OAAO,CAACmI,MAAR,CAAegB,qBAFE,CAAnB,CAAA;;IAKA,IAAI,IAAA,CAAK6E,UAAL,CAAgBrM,MAAhB,KAA2BqO,UAAU,CAACrO,MAA1C,EAAkD;MAChD,MAAM4O,KAAK,GAAG,IAAA,CAAKvC,UAAL,CAAgBwC,KAAhB,CAAsB,CAACC,IAAD,EAAOvH,KAAP,KAAiB;QACnD,OAAO8G,UAAU,CAAC9G,KAAD,CAAV,CAAkBxG,MAAlB,CAAyB+N,IAAI,CAACnR,SAA9B,CAAP,CAAA;AACD,OAFa,CAAd,CAAA;MAIA,IAAIiR,KAAJ,EAAW,OAAOvQ,OAAP,CAAA;AACZ,KAAA;;AAED,IAAA,IAAA,CAAKgO,UAAL,GAAkBgC,UAAU,CAACnO,GAAX,CAAevC,SAAS,KAAK;AAC7C+F,MAAAA,SAAS,EAAE,IADkC;AAE7C/F,MAAAA,SAAAA;AAF6C,KAAL,CAAxB,CAAlB,CAAA;AAKA,IAAA,OAAOU,OAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACE0Q,EAAAA,gBAAgB,GAAW;AACzB,IAAA,OAAO,IAAKJ,CAAAA,QAAL,EAAgBrP,CAAAA,SAAhB,EAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACuB,MAAf0P,eAAe,CAACC,UAAD,EAA0C;IAC7D,OAAO,CAAC,MAAMA,UAAU,CAACC,gBAAX,CAA4B,IAAA,CAAKhC,cAAL,EAA5B,CAAP,EAA2D1M,KAAlE,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE2O,UAAU,CAAC,GAAGpC,OAAJ,EAA+B;AACvC,IAAA,IAAIA,OAAO,CAAC/M,MAAR,KAAmB,CAAvB,EAA0B;AACxB,MAAA,MAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMmP,IAAI,GAAG,IAAIC,GAAJ,EAAb,CAAA;AACA,IAAA,IAAA,CAAKhD,UAAL,GAAkBU,OAAO,CACtB9E,MADe,CACRtK,SAAS,IAAI;AACnB,MAAA,MAAMwC,GAAG,GAAGxC,SAAS,CAAC8D,QAAV,EAAZ,CAAA;;AACA,MAAA,IAAI2N,IAAI,CAACvH,GAAL,CAAS1H,GAAT,CAAJ,EAAmB;AACjB,QAAA,OAAO,KAAP,CAAA;AACD,OAFD,MAEO;QACLiP,IAAI,CAACpC,GAAL,CAAS7M,GAAT,CAAA,CAAA;AACA,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;AACF,KATe,CAUfD,CAAAA,GAVe,CAUXvC,SAAS,KAAK;AAAC+F,MAAAA,SAAS,EAAE,IAAZ;AAAkB/F,MAAAA,SAAAA;AAAlB,KAAL,CAVE,CAAlB,CAAA;AAWD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACES,IAAI,CAAC,GAAG2O,OAAJ,EAA4B;AAC9B,IAAA,IAAIA,OAAO,CAAC/M,MAAR,KAAmB,CAAvB,EAA0B;AACxB,MAAA,MAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN,CAAA;AACD,KAH6B;;;AAM9B,IAAA,MAAMmP,IAAI,GAAG,IAAIC,GAAJ,EAAb,CAAA;IACA,MAAMC,aAAa,GAAG,EAAtB,CAAA;;AACA,IAAA,KAAK,MAAMC,MAAX,IAAqBxC,OAArB,EAA8B;AAC5B,MAAA,MAAM5M,GAAG,GAAGoP,MAAM,CAAC5R,SAAP,CAAiB8D,QAAjB,EAAZ,CAAA;;AACA,MAAA,IAAI2N,IAAI,CAACvH,GAAL,CAAS1H,GAAT,CAAJ,EAAmB;AACjB,QAAA,SAAA;AACD,OAFD,MAEO;QACLiP,IAAI,CAACpC,GAAL,CAAS7M,GAAT,CAAA,CAAA;QACAmP,aAAa,CAACjJ,IAAd,CAAmBkJ,MAAnB,CAAA,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAA,IAAA,CAAKlD,UAAL,GAAkBiD,aAAa,CAACpP,GAAd,CAAkBqP,MAAM,KAAK;AAC7C7L,MAAAA,SAAS,EAAE,IADkC;MAE7C/F,SAAS,EAAE4R,MAAM,CAAC5R,SAAAA;AAF2B,KAAL,CAAxB,CAAlB,CAAA;;AAKA,IAAA,MAAMU,OAAO,GAAG,IAAKsQ,CAAAA,QAAL,EAAhB,CAAA;;AACA,IAAA,IAAA,CAAKa,YAAL,CAAkBnR,OAAlB,EAA2B,GAAGiR,aAA9B,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEG,WAAW,CAAC,GAAG1C,OAAJ,EAA4B;AACrC,IAAA,IAAIA,OAAO,CAAC/M,MAAR,KAAmB,CAAvB,EAA0B;AACxB,MAAA,MAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN,CAAA;AACD,KAHoC;;;AAMrC,IAAA,MAAMmP,IAAI,GAAG,IAAIC,GAAJ,EAAb,CAAA;IACA,MAAMC,aAAa,GAAG,EAAtB,CAAA;;AACA,IAAA,KAAK,MAAMC,MAAX,IAAqBxC,OAArB,EAA8B;AAC5B,MAAA,MAAM5M,GAAG,GAAGoP,MAAM,CAAC5R,SAAP,CAAiB8D,QAAjB,EAAZ,CAAA;;AACA,MAAA,IAAI2N,IAAI,CAACvH,GAAL,CAAS1H,GAAT,CAAJ,EAAmB;AACjB,QAAA,SAAA;AACD,OAFD,MAEO;QACLiP,IAAI,CAACpC,GAAL,CAAS7M,GAAT,CAAA,CAAA;QACAmP,aAAa,CAACjJ,IAAd,CAAmBkJ,MAAnB,CAAA,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAA,MAAMlR,OAAO,GAAG,IAAKsQ,CAAAA,QAAL,EAAhB,CAAA;;AACA,IAAA,IAAA,CAAKa,YAAL,CAAkBnR,OAAlB,EAA2B,GAAGiR,aAA9B,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEE,EAAAA,YAAY,CAACnR,OAAD,EAAmB,GAAG0O,OAAtB,EAA8C;AACxD,IAAA,MAAM5D,QAAQ,GAAG9K,OAAO,CAACiB,SAAR,EAAjB,CAAA;AACAyN,IAAAA,OAAO,CAAC5K,OAAR,CAAgBoN,MAAM,IAAI;MACxB,MAAM7L,SAAS,GAAGtF,IAAI,CAAC+K,QAAD,EAAWoG,MAAM,CAAC1R,SAAlB,CAAtB,CAAA;;MACA,IAAK6R,CAAAA,aAAL,CAAmBH,MAAM,CAAC5R,SAA1B,EAAqCa,QAAQ,CAACkF,SAAD,CAA7C,CAAA,CAAA;KAFF,CAAA,CAAA;AAID,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACEiM,EAAAA,YAAY,CAAC9M,MAAD,EAAoBa,SAApB,EAAuC;IACjD,IAAKiL,CAAAA,QAAL,GADiD;;;AAEjD,IAAA,IAAA,CAAKe,aAAL,CAAmB7M,MAAnB,EAA2Ba,SAA3B,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEgM,EAAAA,aAAa,CAAC7M,MAAD,EAAoBa,SAApB,EAAuC;AAClD+K,IAAAA,MAAS,CAAC/K,SAAS,CAAC1D,MAAV,KAAqB,EAAtB,CAAT,CAAA;AAEA,IAAA,MAAMuH,KAAK,GAAG,IAAA,CAAK8E,UAAL,CAAgBwB,SAAhB,CAA0B+B,OAAO,IAC7C/M,MAAM,CAAC9B,MAAP,CAAc6O,OAAO,CAACjS,SAAtB,CADY,CAAd,CAAA;;IAGA,IAAI4J,KAAK,GAAG,CAAZ,EAAe;MACb,MAAM,IAAItH,KAAJ,CAAW,CAAA,gBAAA,EAAkB4C,MAAM,CAACpB,QAAP,EAAkB,CAAA,CAA/C,CAAN,CAAA;AACD,KAAA;;IAED,IAAK4K,CAAAA,UAAL,CAAgB9E,KAAhB,CAAuB7D,CAAAA,SAAvB,GAAmChF,aAAM,CAACE,IAAP,CAAY8E,SAAZ,CAAnC,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEmM,EAAAA,gBAAgB,GAAY;IAC1B,OAAO,IAAA,CAAKC,iBAAL,CAAuB,IAAA,CAAKf,gBAAL,EAAvB,EAAgD,IAAhD,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEe,EAAAA,iBAAiB,CAAC3G,QAAD,EAAmB4G,oBAAnB,EAA2D;AAC1E,IAAA,KAAK,MAAM;MAACrM,SAAD;AAAY/F,MAAAA,SAAAA;KAAvB,IAAqC,IAAK0O,CAAAA,UAA1C,EAAsD;MACpD,IAAI3I,SAAS,KAAK,IAAlB,EAAwB;AACtB,QAAA,IAAIqM,oBAAJ,EAA0B;AACxB,UAAA,OAAO,KAAP,CAAA;AACD,SAAA;AACF,OAJD,MAIO;AACL,QAAA,IAAI,CAACxR,MAAM,CAACmF,SAAD,EAAYyF,QAAZ,EAAsBxL,SAAS,CAACa,QAAV,EAAtB,CAAX,EAAwD;AACtD,UAAA,OAAO,KAAP,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACEc,SAAS,CAAC0Q,MAAD,EAAmC;IAC1C,MAAM;MAACD,oBAAD;AAAuBF,MAAAA,gBAAAA;KAAoB1Q,GAAAA,MAAM,CAACC,MAAP,CAC/C;AAAC2Q,MAAAA,oBAAoB,EAAE,IAAvB;AAA6BF,MAAAA,gBAAgB,EAAE,IAAA;KADA,EAE/CG,MAF+C,CAAjD,CAAA;AAKA,IAAA,MAAM7G,QAAQ,GAAG,IAAK4F,CAAAA,gBAAL,EAAjB,CAAA;;IACA,IACEc,gBAAgB,IAChB,CAAC,IAAKC,CAAAA,iBAAL,CAAuB3G,QAAvB,EAAiC4G,oBAAjC,CAFH,EAGE;AACA,MAAA,MAAM,IAAI9P,KAAJ,CAAU,+BAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,IAAKgQ,CAAAA,UAAL,CAAgB9G,QAAhB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACE8G,UAAU,CAAC9G,QAAD,EAA2B;IACnC,MAAM;AAACkD,MAAAA,UAAAA;AAAD,KAAA,GAAe,IAArB,CAAA;IACA,MAAM6D,cAAwB,GAAG,EAAjC,CAAA;AACA7H,IAAAA,YAAA,CAAsB6H,cAAtB,EAAsC7D,UAAU,CAACrM,MAAjD,CAAA,CAAA;AACA,IAAA,MAAMmQ,iBAAiB,GACrBD,cAAc,CAAClQ,MAAf,GAAwBqM,UAAU,CAACrM,MAAX,GAAoB,EAA5C,GAAiDmJ,QAAQ,CAACnJ,MAD5D,CAAA;AAEA,IAAA,MAAMoQ,eAAe,GAAG1R,aAAM,CAAC6C,KAAP,CAAa4O,iBAAb,CAAxB,CAAA;AACA1B,IAAAA,MAAS,CAACpC,UAAU,CAACrM,MAAX,GAAoB,GAArB,CAAT,CAAA;IACAtB,aAAM,CAACE,IAAP,CAAYsR,cAAZ,EAA4B1O,IAA5B,CAAiC4O,eAAjC,EAAkD,CAAlD,CAAA,CAAA;IACA/D,UAAU,CAAClK,OAAX,CAAmB,CAAC;AAACuB,MAAAA,SAAAA;KAAF,EAAc6D,KAAd,KAAwB;MACzC,IAAI7D,SAAS,KAAK,IAAlB,EAAwB;QACtB+K,MAAS,CAAC/K,SAAS,CAAC1D,MAAV,KAAqB,EAAtB,EAA2B,8BAA3B,CAAT,CAAA;AACAtB,QAAAA,aAAM,CAACE,IAAP,CAAY8E,SAAZ,EAAuBlC,IAAvB,CACE4O,eADF,EAEEF,cAAc,CAAClQ,MAAf,GAAwBuH,KAAK,GAAG,EAFlC,CAAA,CAAA;AAID,OAAA;KAPH,CAAA,CAAA;AASA4B,IAAAA,QAAQ,CAAC3H,IAAT,CACE4O,eADF,EAEEF,cAAc,CAAClQ,MAAf,GAAwBqM,UAAU,CAACrM,MAAX,GAAoB,EAF9C,CAAA,CAAA;AAIAyO,IAAAA,MAAS,CACP2B,eAAe,CAACpQ,MAAhB,IAA0BsD,gBADnB,EAEN,CAAyB8M,uBAAAA,EAAAA,eAAe,CAACpQ,MAAO,CAAKsD,GAAAA,EAAAA,gBAAiB,EAFhE,CAAT,CAAA;AAIA,IAAA,OAAO8M,eAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACU,EAAA,IAAJrQ,IAAI,GAAqB;AAC3B0O,IAAAA,MAAS,CAAC,IAAK9H,CAAAA,YAAL,CAAkB3G,MAAlB,KAA6B,CAA9B,CAAT,CAAA;AACA,IAAA,OAAO,IAAK2G,CAAAA,YAAL,CAAkB,CAAlB,EAAqB5G,IAArB,CAA0BG,GAA1B,CAA8BmQ,MAAM,IAAIA,MAAM,CAACxN,MAA/C,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACe,EAAA,IAAThB,SAAS,GAAc;AACzB4M,IAAAA,MAAS,CAAC,IAAK9H,CAAAA,YAAL,CAAkB3G,MAAlB,KAA6B,CAA9B,CAAT,CAAA;AACA,IAAA,OAAO,IAAK2G,CAAAA,YAAL,CAAkB,CAAlB,EAAqB9E,SAA5B,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACU,EAAA,IAAJpC,IAAI,GAAW;AACjBgP,IAAAA,MAAS,CAAC,IAAK9H,CAAAA,YAAL,CAAkB3G,MAAlB,KAA6B,CAA9B,CAAT,CAAA;AACA,IAAA,OAAO,IAAK2G,CAAAA,YAAL,CAAkB,CAAlB,EAAqBlH,IAA5B,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACa,OAAJb,IAAI,CAACC,QAAD,EAA2D;AACpE;AACA,IAAA,IAAIuK,SAAS,GAAG,CAAC,GAAGvK,QAAJ,CAAhB,CAAA;AAEA,IAAA,MAAMqR,cAAc,GAAG7H,YAAA,CAAsBe,SAAtB,CAAvB,CAAA;IACA,IAAIiD,UAAU,GAAG,EAAjB,CAAA;;IACA,KAAK,IAAI/C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4G,cAApB,EAAoC5G,CAAC,EAArC,EAAyC;MACvC,MAAM5F,SAAS,GAAG0F,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmBkF,yBAAnB,CAAlB,CAAA;AACA4F,MAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgBkF,yBAAhB,CAAZ,CAAA;AACA6I,MAAAA,UAAU,CAAChG,IAAX,CAAgBxF,wBAAI,CAACxB,MAAL,CAAYX,aAAM,CAACE,IAAP,CAAY8E,SAAZ,CAAZ,CAAhB,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,OAAO0I,WAAW,CAACkE,QAAZ,CAAqBhK,OAAO,CAAC1H,IAAR,CAAawK,SAAb,CAArB,EAA8CiD,UAA9C,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACiB,EAAA,OAARiE,QAAQ,CACbjS,OADa,EAEbgO,UAAyB,GAAG,EAFf,EAGA;AACb,IAAA,MAAMnD,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;AACAlD,IAAAA,WAAW,CAACxC,eAAZ,GAA8BrI,OAAO,CAACqI,eAAtC,CAAA;;AACA,IAAA,IAAIrI,OAAO,CAACmI,MAAR,CAAegB,qBAAf,GAAuC,CAA3C,EAA8C;MAC5C0B,WAAW,CAACoD,QAAZ,GAAuBjO,OAAO,CAACoI,WAAR,CAAoB,CAApB,CAAvB,CAAA;AACD,KAAA;;AACD4F,IAAAA,UAAU,CAAClK,OAAX,CAAmB,CAACuB,SAAD,EAAY6D,KAAZ,KAAsB;AACvC,MAAA,MAAMgJ,aAAa,GAAG;AACpB7M,QAAAA,SAAS,EACPA,SAAS,IAAI7C,wBAAI,CAACxB,MAAL,CAAYyM,iBAAZ,CAAb,GACI,IADJ,GAEIjL,wBAAI,CAACrB,MAAL,CAAYkE,SAAZ,CAJc;AAKpB/F,QAAAA,SAAS,EAAEU,OAAO,CAACoI,WAAR,CAAoBc,KAApB,CAAA;OALb,CAAA;AAOA2B,MAAAA,WAAW,CAACmD,UAAZ,CAAuBhG,IAAvB,CAA4BkK,aAA5B,CAAA,CAAA;KARF,CAAA,CAAA;AAWAlS,IAAAA,OAAO,CAACsI,YAAR,CAAqBxE,OAArB,CAA6BmG,WAAW,IAAI;MAC1C,MAAMvI,IAAI,GAAGuI,WAAW,CAAClB,QAAZ,CAAqBlH,GAArB,CAAyB2G,OAAO,IAAI;AAC/C,QAAA,MAAMhE,MAAM,GAAGxE,OAAO,CAACoI,WAAR,CAAoBI,OAApB,CAAf,CAAA;QACA,OAAO;UACLhE,MADK;UAELqJ,QAAQ,EACNhD,WAAW,CAACmD,UAAZ,CAAuBmE,IAAvB,CACEH,MAAM,IAAIA,MAAM,CAAC1S,SAAP,CAAiB8D,QAAjB,EAAA,KAAgCoB,MAAM,CAACpB,QAAP,EAD5C,CAEKpD,IAAAA,OAAO,CAACiJ,eAAR,CAAwBT,OAAxB,CALF;AAMLsF,UAAAA,UAAU,EAAE9N,OAAO,CAACoJ,iBAAR,CAA0BZ,OAA1B,CAAA;SANd,CAAA;AAQD,OAVY,CAAb,CAAA;AAYAqC,MAAAA,WAAW,CAACvC,YAAZ,CAAyBN,IAAzB,CACE,IAAI2F,sBAAJ,CAA2B;QACzBjM,IADyB;QAEzB8B,SAAS,EAAExD,OAAO,CAACoI,WAAR,CAAoB6B,WAAW,CAACvB,cAAhC,CAFc;AAGzBtH,QAAAA,IAAI,EAAEoB,wBAAI,CAACrB,MAAL,CAAY8I,WAAW,CAAC7I,IAAxB,CAAA;AAHmB,OAA3B,CADF,CAAA,CAAA;KAbF,CAAA,CAAA;IAsBAyJ,WAAW,CAACuD,QAAZ,GAAuBpO,OAAvB,CAAA;AACA6K,IAAAA,WAAW,CAACwD,KAAZ,GAAoBxD,WAAW,CAAC/H,MAAZ,EAApB,CAAA;AAEA,IAAA,OAAO+H,WAAP,CAAA;AACD,GAAA;;AAnqBsB;;AC/KzB;AACA;AACA;AACO,MAAMuH,oBAAN,CAA2B;AAIhCxR,EAAAA,WAAW,CAACZ,OAAD,EAA4BgO,UAA5B,EAA4D;AAAA,IAAA,IAAA,CAHvEA,UAGuE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAFvEhO,OAEuE,GAAA,KAAA,CAAA,CAAA;;IACrE,IAAIgO,UAAU,KAAK3L,SAAnB,EAA8B;AAC5B2K,MAAAA,MAAM,CACJgB,UAAU,CAACrM,MAAX,KAAsB3B,OAAO,CAACmI,MAAR,CAAegB,qBADjC,EAEJ,6EAFI,CAAN,CAAA;MAIA,IAAK6E,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;AACD,KAND,MAMO;MACL,MAAMqE,iBAAiB,GAAG,EAA1B,CAAA;;AACA,MAAA,KAAK,IAAIpH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjL,OAAO,CAACmI,MAAR,CAAegB,qBAAnC,EAA0D8B,CAAC,EAA3D,EAA+D;AAC7DoH,QAAAA,iBAAiB,CAACrK,IAAlB,CAAuB,IAAIvI,UAAJ,CAAe0F,yBAAf,CAAvB,CAAA,CAAA;AACD,OAAA;;MACD,IAAK6I,CAAAA,UAAL,GAAkBqE,iBAAlB,CAAA;AACD,KAAA;;IACD,IAAKrS,CAAAA,OAAL,GAAeA,OAAf,CAAA;AACD,GAAA;;AAEDiB,EAAAA,SAAS,GAAe;AACtB,IAAA,MAAM6K,iBAAiB,GAAG,IAAA,CAAK9L,OAAL,CAAaiB,SAAb,EAA1B,CAAA;IAEA,MAAMqR,uBAAuB,GAAGlL,KAAK,EAArC,CAAA;IACA4C,YAAA,CAAsBsI,uBAAtB,EAA+C,IAAKtE,CAAAA,UAAL,CAAgBrM,MAA/D,CAAA,CAAA;IAEA,MAAM4Q,iBAAiB,GAAG3M,uBAAY,CAACI,MAAb,CAIvB,CACDJ,uBAAY,CAACC,IAAb,CACEyM,uBAAuB,CAAC3Q,MAD1B,EAEE,yBAFF,CADC,EAKDiE,uBAAY,CAAC8E,GAAb,CACEE,SAAA,EADF,EAEE,IAAKoD,CAAAA,UAAL,CAAgBrM,MAFlB,EAGE,YAHF,CALC,EAUDiE,uBAAY,CAACC,IAAb,CAAkBiG,iBAAiB,CAACnK,MAApC,EAA4C,mBAA5C,CAVC,CAJuB,CAA1B,CAAA;AAiBA,IAAA,MAAM6Q,qBAAqB,GAAG,IAAI/S,UAAJ,CAAe,IAAf,CAA9B,CAAA;AACA,IAAA,MAAMgT,2BAA2B,GAAGF,iBAAiB,CAACvR,MAAlB,CAClC;AACEsR,MAAAA,uBAAuB,EAAE,IAAI7S,UAAJ,CAAe6S,uBAAf,CAD3B;MAEEtE,UAAU,EAAE,KAAKA,UAFnB;AAGElC,MAAAA,iBAAAA;KAJgC,EAMlC0G,qBANkC,CAApC,CAAA;AASA,IAAA,OAAOA,qBAAqB,CAACvS,KAAtB,CAA4B,CAA5B,EAA+BwS,2BAA/B,CAAP,CAAA;AACD,GAAA;;EAEiB,OAAXpR,WAAW,CAACmR,qBAAD,EAA0D;AAC1E,IAAA,IAAIzH,SAAS,GAAG,CAAC,GAAGyH,qBAAJ,CAAhB,CAAA;IAEA,MAAMxE,UAAU,GAAG,EAAnB,CAAA;AACA,IAAA,MAAM0E,gBAAgB,GAAG1I,YAAA,CAAsBe,SAAtB,CAAzB,CAAA;;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyH,gBAApB,EAAsCzH,CAAC,EAAvC,EAA2C;AACzC+C,MAAAA,UAAU,CAAChG,IAAX,CACE,IAAIvI,UAAJ,CAAesL,SAAS,CAACkC,MAAV,CAAiB,CAAjB,EAAoB9H,yBAApB,CAAf,CADF,CAAA,CAAA;AAGD,KAAA;;IAED,MAAMnF,OAAO,GAAGsN,gBAAgB,CAACjM,WAAjB,CAA6B,IAAI5B,UAAJ,CAAesL,SAAf,CAA7B,CAAhB,CAAA;AACA,IAAA,OAAO,IAAIqH,oBAAJ,CAAyBpS,OAAzB,EAAkCgO,UAAlC,CAAP,CAAA;AACD,GAAA;;EAEDjO,IAAI,CAAC2O,OAAD,EAAyB;AAC3B,IAAA,MAAMiE,WAAW,GAAG,IAAA,CAAK3S,OAAL,CAAaiB,SAAb,EAApB,CAAA;AACA,IAAA,MAAM2R,aAAa,GAAG,IAAA,CAAK5S,OAAL,CAAa4I,iBAAb,CAA+B3I,KAA/B,CACpB,CADoB,EAEpB,IAAKD,CAAAA,OAAL,CAAamI,MAAb,CAAoBgB,qBAFA,CAAtB,CAAA;;AAIA,IAAA,KAAK,MAAM+H,MAAX,IAAqBxC,OAArB,EAA8B;AAC5B,MAAA,MAAMmE,WAAW,GAAGD,aAAa,CAACpD,SAAd,CAAwBhL,MAAM,IAChDA,MAAM,CAAC9B,MAAP,CAAcwO,MAAM,CAAC5R,SAArB,CADkB,CAApB,CAAA;AAGA0N,MAAAA,MAAM,CACJ6F,WAAW,IAAI,CADX,EAEH,CAAA,gCAAA,EAAkC3B,MAAM,CAAC5R,SAAP,CAAiBsD,QAAjB,EAA4B,EAF3D,CAAN,CAAA;MAIA,IAAKoL,CAAAA,UAAL,CAAgB6E,WAAhB,CAA+B9S,GAAAA,IAAI,CAAC4S,WAAD,EAAczB,MAAM,CAAC1R,SAArB,CAAnC,CAAA;AACD,KAAA;AACF,GAAA;;AAxF+B;;MCbrBsT,mBAAmB,GAAG,IAAIxQ,SAAJ,CACjC,6CADiC,EAA5B;MAIMyQ,4BAA4B,GAAG,IAAIzQ,SAAJ,CAC1C,6CAD0C,EAArC;MAIM0Q,0BAA0B,GAAG,IAAI1Q,SAAJ,CACxC,6CADwC,EAAnC;MAIM2Q,gCAAgC,GAAG,IAAI3Q,SAAJ,CAC9C,6CAD8C,EAAzC;MAIM4Q,kBAAkB,GAAG,IAAI5Q,SAAJ,CAChC,6CADgC,EAA3B;MAIM6Q,qBAAqB,GAAG,IAAI7Q,SAAJ,CACnC,6CADmC,EAA9B;MAIM8Q,yBAAyB,GAAG,IAAI9Q,SAAJ,CACvC,6CADuC,EAAlC;MAIM+Q,0BAA0B,GAAG,IAAI/Q,SAAJ,CACxC,6CADwC,EAAnC;MAIMgR,2BAA2B,GAAG,IAAIhR,SAAJ,CACzC,6CADyC;;AC5B3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeiR,yBAAf,CACL3C,UADK,EAEL/F,WAFK,EAGL6D,OAHK,EAIL8E,OAJK,EAK0B;EAC/B,MAAMC,WAAW,GAAGD,OAAO,IAAI;IAC7BE,aAAa,EAAEF,OAAO,CAACE,aADM;AAE7BC,IAAAA,mBAAmB,EAAEH,OAAO,CAACG,mBAAR,IAA+BH,OAAO,CAACI,UAF/B;IAG7BC,UAAU,EAAEL,OAAO,CAACK,UAHS;IAI7BC,cAAc,EAAEN,OAAO,CAACM,cAAAA;GAJ1B,CAAA;AAOA,EAAA,MAAMzO,SAAS,GAAG,MAAMuL,UAAU,CAACmD,eAAX,CACtBlJ,WADsB,EAEtB6D,OAFsB,EAGtB+E,WAHsB,CAAxB,CAAA;AAMA,EAAA,MAAMO,MAAM,GACVnJ,WAAW,CAACxC,eAAZ,IAA+B,IAA/B,IACAwC,WAAW,CAACqD,oBAAZ,IAAoC,IADpC,GAEI,CACE,MAAM0C,UAAU,CAACqD,kBAAX,CACJ;AACE5O,IAAAA,SAAS,EAAEA,SADb;IAEEmJ,SAAS,EAAE3D,WAAW,CAACxC,eAFzB;IAGE6F,oBAAoB,EAAErD,WAAW,CAACqD,oBAAAA;GAJhC,EAMJsF,OAAO,IAAIA,OAAO,CAACI,UANf,CADR,EASEzR,KAXN,GAYI,CACE,MAAMyO,UAAU,CAACqD,kBAAX,CACJ5O,SADI,EAEJmO,OAAO,IAAIA,OAAO,CAACI,UAFf,CADR,EAKEzR,KAlBR,CAAA;;EAoBA,IAAI6R,MAAM,CAAC3P,GAAX,EAAgB;AACd,IAAA,MAAM,IAAIzC,KAAJ,CACH,CAAA,YAAA,EAAcyD,SAAU,CAAA,SAAA,EAAWyJ,IAAI,CAACC,SAAL,CAAeiF,MAAf,CAAuB,GADvD,CAAN,CAAA;AAGD,GAAA;;AAED,EAAA,OAAO3O,SAAP,CAAA;AACD;;AC/DD;AACO,SAAS6O,KAAT,CAAeC,EAAf,EAA0C;EAC/C,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP,CAAA;AACD;;ACgBD;AACA;AACA;AACA;AACO,SAASI,UAAT,CACLvN,IADK,EAELrC,MAFK,EAGG;EACR,MAAM6P,WAAW,GACfxN,IAAI,CAACO,MAAL,CAAYd,IAAZ,IAAoB,CAApB,GAAwBO,IAAI,CAACO,MAAL,CAAYd,IAApC,GAA2CmE,QAAA,CAAgB5D,IAAhB,EAAsBrC,MAAtB,CAD7C,CAAA;AAEA,EAAA,MAAMvD,IAAI,GAAGf,aAAM,CAAC6C,KAAP,CAAasR,WAAb,CAAb,CAAA;AACA,EAAA,MAAMC,YAAY,GAAG3T,MAAM,CAACC,MAAP,CAAc;IAACkJ,WAAW,EAAEjD,IAAI,CAACkC,KAAAA;GAAjC,EAAyCvE,MAAzC,CAArB,CAAA;AACAqC,EAAAA,IAAI,CAACO,MAAL,CAAYvG,MAAZ,CAAmByT,YAAnB,EAAiCrT,IAAjC,CAAA,CAAA;AACA,EAAA,OAAOA,IAAP,CAAA;AACD,CAAA;AAED;AACA;AACA;AACA;;AACO,SAASsT,YAAT,CACL1N,IADK,EAELxG,MAFK,EAGO;AACZ,EAAA,IAAIY,IAAJ,CAAA;;EACA,IAAI;IACFA,IAAI,GAAG4F,IAAI,CAACO,MAAL,CAAYpG,MAAZ,CAAmBX,MAAnB,CAAP,CAAA;GADF,CAEE,OAAO6D,GAAP,EAAY;AACZ,IAAA,MAAM,IAAIzC,KAAJ,CAAU,uBAAA,GAA0ByC,GAApC,CAAN,CAAA;AACD,GAAA;;AAED,EAAA,IAAIjD,IAAI,CAAC6I,WAAL,KAAqBjD,IAAI,CAACkC,KAA9B,EAAqC;AACnC,IAAA,MAAM,IAAItH,KAAJ,CACH,CAAA,gDAAA,EAAkDR,IAAI,CAAC6I,WAAY,CAAA,IAAA,EAAMjD,IAAI,CAACkC,KAAM,CAAA,CADjF,CAAN,CAAA;AAGD,GAAA;;AAED,EAAA,OAAO9H,IAAP,CAAA;AACD;;ACvDD;AACA;AACA;AACA;AACA;;AACO,MAAMuT,mBAAmB,GAAG/O,uBAAY,CAACgP,IAAb,CAAkB,sBAAlB,EAA5B;AAEP;AACA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAGjP,uBAAY,CAACI,MAAb,CAUzB,CACAJ,uBAAY,CAACK,GAAb,CAAiB,SAAjB,CADA,EAEAL,uBAAY,CAACK,GAAb,CAAiB,OAAjB,CAFA,EAGA2E,SAAA,CAAiB,kBAAjB,CAHA,EAIAA,SAAA,CAAiB,OAAjB,CAJA,EAKAhF,uBAAY,CAACI,MAAb,CACE,CAAC2O,mBAAD,CADF,EAEE,eAFF,CALA,CAVyB,CAA3B,CAAA;AAqBaG,MAAAA,oBAAoB,GAAGD,kBAAkB,CAACpO,KAAhD;;AAQP;AACA;AACA;AACO,MAAMsO,YAAN,CAAmB;AAKxB;AACF;AACA;EACEnU,WAAW,CAACsH,IAAD,EAAyB;AAAA,IAAA,IAAA,CAPpC8M,gBAOoC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CANpC9Q,KAMoC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CALpC+Q,aAKoC,GAAA,KAAA,CAAA,CAAA;AAClC,IAAA,IAAA,CAAKD,gBAAL,GAAwB9M,IAAI,CAAC8M,gBAA7B,CAAA;AACA,IAAA,IAAA,CAAK9Q,KAAL,GAAagE,IAAI,CAAChE,KAAlB,CAAA;AACA,IAAA,IAAA,CAAK+Q,aAAL,GAAqB/M,IAAI,CAAC+M,aAA1B,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EACwB,OAAfC,eAAe,CACpB1U,MADoB,EAEN;AACd,IAAA,MAAM2U,YAAY,GAAGN,kBAAkB,CAAC1T,MAAnB,CAA0BhB,QAAQ,CAACK,MAAD,CAAlC,EAA4C,CAA5C,CAArB,CAAA;IACA,OAAO,IAAIuU,YAAJ,CAAiB;AACtBC,MAAAA,gBAAgB,EAAE,IAAI1S,SAAJ,CAAc6S,YAAY,CAACH,gBAA3B,CADI;MAEtB9Q,KAAK,EAAE,IAAI5B,SAAJ,CAAc6S,YAAY,CAACjR,KAA3B,CAAkCd,CAAAA,QAAlC,EAFe;MAGtB6R,aAAa,EAAEE,YAAY,CAACF,aAAAA;AAHN,KAAjB,CAAP,CAAA;AAKD,GAAA;;AA7BuB;;ACtC1B,MAAMG,YAAY,GAAO7N,MAAJ,IAA2C;EAC9D,MAAMpG,MAAM,GAAGoG,MAAM,CAACpG,MAAP,CAAciF,IAAd,CAAmBmB,MAAnB,CAAf,CAAA;EACA,MAAMvG,MAAM,GAAGuG,MAAM,CAACvG,MAAP,CAAcoF,IAAd,CAAmBmB,MAAnB,CAAf,CAAA;EACA,OAAO;IAACpG,MAAD;AAASH,IAAAA,MAAAA;GAAhB,CAAA;AACD,CAJD,CAAA;;AAMA,MAAMqU,MAAM,GACT1T,MAAD,IACCgE,QAAD,IAAuC;AACrC,EAAA,MAAM4B,MAAM,GAAG1B,iBAAI,CAAClE,MAAD,EAASgE,QAAT,CAAnB,CAAA;EACA,MAAM;IAAC3E,MAAD;AAASG,IAAAA,MAAAA;GAAUiU,GAAAA,YAAY,CAAC7N,MAAD,CAArC,CAAA;EAEA,MAAM+N,YAAY,GAAG/N,MAArB,CAAA;;AAEA+N,EAAAA,YAAY,CAACnU,MAAb,GAAsB,CAACX,QAAD,EAAiB0F,MAAjB,KAAoC;AACxD,IAAA,MAAMqP,GAAG,GAAGpU,MAAM,CAACX,QAAD,EAAS0F,MAAT,CAAlB,CAAA;IACA,OAAOsP,uBAAU,CAACnV,aAAM,CAACE,IAAP,CAAYgV,GAAZ,CAAD,CAAjB,CAAA;GAFF,CAAA;;EAKAD,YAAY,CAACtU,MAAb,GAAsB,CAACqU,MAAD,EAAiB7U,MAAjB,EAAiC0F,MAAjC,KAAoD;AACxE,IAAA,MAAMqP,GAAG,GAAGE,uBAAU,CAACJ,MAAD,EAAS1T,MAAT,CAAtB,CAAA;AACA,IAAA,OAAOX,MAAM,CAACuU,GAAD,EAAM/U,MAAN,EAAc0F,MAAd,CAAb,CAAA;GAFF,CAAA;;AAKA,EAAA,OAAOoP,YAAP,CAAA;AACD,CAnBH,CAAA;;AAqBO,MAAMI,GAAG,GAAGL,MAAM,CAAC,CAAD,CAAlB;;ACpBP;AACA;AACA;;AA0NA;AACA;AACA;AACO,MAAMM,iBAAN,CAAwB;AAC7B;AACF;AACA;AACE/U,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;EAC8B,OAArBgV,qBAAqB,CAC1B3L,WAD0B,EAEH;AACvB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AAEA,IAAA,MAAMsS,qBAAqB,GAAGlQ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAA9B,CAAA;IACA,MAAM8P,SAAS,GAAGD,qBAAqB,CAAC3U,MAAtB,CAA6B8I,WAAW,CAAC7I,IAAzC,CAAlB,CAAA;AAEA,IAAA,IAAI4F,IAAJ,CAAA;;AACA,IAAA,KAAK,MAAM,CAACgP,MAAD,EAASzO,MAAT,CAAX,IAA+BzG,MAAM,CAACmV,OAAP,CAAeC,0BAAf,CAA/B,EAA2E;AACzE,MAAA,IAAI3O,MAAM,CAAC2B,KAAP,IAAgB6M,SAApB,EAA+B;AAC7B/O,QAAAA,IAAI,GAAGgP,MAAP,CAAA;AACA,QAAA,MAAA;AACD,OAAA;AACF,KAAA;;IAED,IAAI,CAAChP,IAAL,EAAW;AACT,MAAA,MAAM,IAAIpF,KAAJ,CAAU,qDAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAOoF,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC4B,OAAnBmP,mBAAmB,CACxBlM,WADwB,EAEH;AACrB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAAC2U,QAAD;MAAWC,KAAX;AAAkB9S,MAAAA,SAAAA;KAAakR,GAAAA,YAAU,CAC7CwB,0BAA0B,CAACK,MADkB,EAE7CtM,WAAW,CAAC7I,IAFiC,CAA/C,CAAA;IAKA,OAAO;AACLoV,MAAAA,UAAU,EAAEvM,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAELiS,MAAAA,gBAAgB,EAAExM,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFjC;MAGL6R,QAHK;MAILC,KAJK;AAKL9S,MAAAA,SAAS,EAAE,IAAIlB,SAAJ,CAAckB,SAAd,CAAA;KALb,CAAA;AAOD,GAAA;AAED;AACF;AACA;;;EACuB,OAAdkT,cAAc,CACnBzM,WADmB,EAES;AAC5B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAAC2U,MAAAA,QAAAA;KAAY3B,GAAAA,YAAU,CAC3BwB,0BAA0B,CAACS,QADA,EAE3B1M,WAAW,CAAC7I,IAFe,CAA7B,CAAA;IAKA,OAAO;AACLoV,MAAAA,UAAU,EAAEvM,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAELoS,MAAAA,QAAQ,EAAE3M,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFzB;AAGL6R,MAAAA,QAAAA;KAHF,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EAC+B,OAAtBQ,sBAAsB,CAC3B5M,WAD2B,EAES;AACpC,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAAC2U,QAAD;MAAW9S,IAAX;AAAiBC,MAAAA,SAAAA;KAAakR,GAAAA,YAAU,CAC5CwB,0BAA0B,CAACY,gBADiB,EAE5C7M,WAAW,CAAC7I,IAFgC,CAA9C,CAAA;IAKA,OAAO;AACLoV,MAAAA,UAAU,EAAEvM,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAELuS,MAAAA,UAAU,EAAE9M,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAF3B;AAGLoS,MAAAA,QAAQ,EAAE3M,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAHzB;MAIL6R,QAJK;MAKL9S,IALK;AAMLC,MAAAA,SAAS,EAAE,IAAIlB,SAAJ,CAAckB,SAAd,CAAA;KANb,CAAA;AAQD,GAAA;AAED;AACF;AACA;;;EACuB,OAAdwT,cAAc,CAAC/M,WAAD,EAAsD;AACzE,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAAC4U,MAAAA,KAAAA;KAAS5B,GAAAA,YAAU,CACxBwB,0BAA0B,CAACe,QADH,EAExBhN,WAAW,CAAC7I,IAFY,CAA1B,CAAA;IAKA,OAAO;AACL8V,MAAAA,aAAa,EAAEjN,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD9B;AAEL8R,MAAAA,KAAAA;KAFF,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EAC+B,OAAtBa,sBAAsB,CAC3BlN,WAD2B,EAEH;AACxB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAAC0V,IAAD;MAAO7T,IAAP;MAAa+S,KAAb;AAAoB9S,MAAAA,SAAAA;KAAakR,GAAAA,YAAU,CAC/CwB,0BAA0B,CAACmB,gBADoB,EAE/CpN,WAAW,CAAC7I,IAFmC,CAAjD,CAAA;IAKA,OAAO;AACL8V,MAAAA,aAAa,EAAEjN,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD9B;AAELuS,MAAAA,UAAU,EAAE,IAAIzU,SAAJ,CAAc8U,IAAd,CAFP;MAGL7T,IAHK;MAIL+S,KAJK;AAKL9S,MAAAA,SAAS,EAAE,IAAIlB,SAAJ,CAAckB,SAAd,CAAA;KALb,CAAA;AAOD,GAAA;AAED;AACF;AACA;;;EACqB,OAAZ8T,YAAY,CAACrN,WAAD,EAAoD;AACrE,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAAC8B,MAAAA,SAAAA;KAAakR,GAAAA,YAAU,CAC5BwB,0BAA0B,CAACqB,MADC,EAE5BtN,WAAW,CAAC7I,IAFgB,CAA9B,CAAA;IAKA,OAAO;AACL8V,MAAAA,aAAa,EAAEjN,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD9B;AAELhB,MAAAA,SAAS,EAAE,IAAIlB,SAAJ,CAAckB,SAAd,CAAA;KAFb,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EAC6B,OAApBgU,oBAAoB,CACzBvN,WADyB,EAEH;AACtB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAAC0V,IAAD;MAAO7T,IAAP;AAAaC,MAAAA,SAAAA;KAAakR,GAAAA,YAAU,CACxCwB,0BAA0B,CAACuB,cADa,EAExCxN,WAAW,CAAC7I,IAF4B,CAA1C,CAAA;IAKA,OAAO;AACL8V,MAAAA,aAAa,EAAEjN,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD9B;AAELuS,MAAAA,UAAU,EAAE,IAAIzU,SAAJ,CAAc8U,IAAd,CAFP;MAGL7T,IAHK;AAILC,MAAAA,SAAS,EAAE,IAAIlB,SAAJ,CAAckB,SAAd,CAAA;KAJb,CAAA;AAMD,GAAA;AAED;AACF;AACA;;;EAC6B,OAApBkU,oBAAoB,CACzBzN,WADyB,EAEI;AAC7B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAAC0V,IAAD;MAAO7T,IAAP;MAAa8S,QAAb;MAAuBC,KAAvB;AAA8B9S,MAAAA,SAAAA;KAAakR,GAAAA,YAAU,CACzDwB,0BAA0B,CAACyB,cAD8B,EAEzD1N,WAAW,CAAC7I,IAF6C,CAA3D,CAAA;IAKA,OAAO;AACLoV,MAAAA,UAAU,EAAEvM,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAELiS,MAAAA,gBAAgB,EAAExM,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFjC;AAGLuS,MAAAA,UAAU,EAAE,IAAIzU,SAAJ,CAAc8U,IAAd,CAHP;MAIL7T,IAJK;MAKL8S,QALK;MAMLC,KANK;AAOL9S,MAAAA,SAAS,EAAE,IAAIlB,SAAJ,CAAckB,SAAd,CAAA;KAPb,CAAA;AASD,GAAA;AAED;AACF;AACA;;;EAC8B,OAArBoU,qBAAqB,CAC1B3N,WAD0B,EAEH;AACvB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAACgF,MAAAA,UAAAA;KAAcgO,GAAAA,YAAU,CAC7BwB,0BAA0B,CAAC2B,sBADE,EAE7B5N,WAAW,CAAC7I,IAFiB,CAA/B,CAAA;IAKA,OAAO;AACL0W,MAAAA,WAAW,EAAE7N,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELwQ,MAAAA,gBAAgB,EAAE,IAAI1S,SAAJ,CAAcoE,UAAd,CAAA;KAFpB,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EAC2B,OAAlBqR,kBAAkB,CACvB9N,WADuB,EAEH;AACpB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEAgT,YAAU,CACRwB,0BAA0B,CAAC8B,mBADnB,EAER/N,WAAW,CAAC7I,IAFJ,CAAV,CAAA;IAKA,OAAO;AACL0W,MAAAA,WAAW,EAAE7N,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAFxC,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EAC4B,OAAnByT,mBAAmB,CACxBhO,WADwB,EAEH;AACrB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAAC2U,MAAAA,QAAAA;KAAY3B,GAAAA,YAAU,CAC3BwB,0BAA0B,CAACgC,oBADA,EAE3BjO,WAAW,CAAC7I,IAFe,CAA7B,CAAA;IAKA,OAAO;AACL0W,MAAAA,WAAW,EAAE7N,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELoS,MAAAA,QAAQ,EAAE3M,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFzB;AAGLwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAHjC;AAIL6R,MAAAA,QAAAA;KAJF,CAAA;AAMD,GAAA;AAED;AACF;AACA;;;EAC6B,OAApB8B,oBAAoB,CACzBlO,WADyB,EAEH;AACtB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAACgF,MAAAA,UAAAA;KAAcgO,GAAAA,YAAU,CAC7BwB,0BAA0B,CAACkC,qBADE,EAE7BnO,WAAW,CAAC7I,IAFiB,CAA/B,CAAA;IAKA,OAAO;AACL0W,MAAAA,WAAW,EAAE7N,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFjC;AAGL6T,MAAAA,mBAAmB,EAAE,IAAI/V,SAAJ,CAAcoE,UAAd,CAAA;KAHvB,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACuB,OAAdmP,cAAc,CAACrS,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACd,MAAV,CAAiB4V,aAAa,CAAC9U,SAA/B,CAAL,EAAgD;AAC9C,MAAA,MAAM,IAAI5B,KAAJ,CAAU,qDAAV,CAAN,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACuB,EAAA,OAAdwU,cAAc,CAAC1U,IAAD,EAAmB6W,cAAnB,EAA2C;AAC9D,IAAA,IAAI7W,IAAI,CAACC,MAAL,GAAc4W,cAAlB,EAAkC;MAChC,MAAM,IAAI3W,KAAJ,CACH,CAA6BF,2BAAAA,EAAAA,IAAI,CAACC,MAAO,CAAA,yBAAA,EAA2B4W,cAAe,CAAA,CADhF,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;;AAnT4B,CAAA;AAsT/B;AACA;AACA;;AAuEA;AACA;AACA;AACA;MACarC,0BAA0B,GAAGpV,MAAM,CAAC0X,MAAP,CAIvC;AACDjC,EAAAA,MAAM,EAAE;AACNrN,IAAAA,KAAK,EAAE,CADD;AAEN3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA0D,CAChEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADgE,EAEhEL,uBAAY,CAACgB,IAAb,CAAkB,UAAlB,CAFgE,EAGhEhB,uBAAY,CAACgB,IAAb,CAAkB,OAAlB,CAHgE,EAIhEgE,SAAA,CAAiB,WAAjB,CAJgE,CAA1D,CAAA;GAHT;AAUD2M,EAAAA,MAAM,EAAE;AACNrO,IAAAA,KAAK,EAAE,CADD;AAEN3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA0D,CAChEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADgE,EAEhE2E,SAAA,CAAiB,WAAjB,CAFgE,CAA1D,CAAA;GAZT;AAiBD+L,EAAAA,QAAQ,EAAE;AACRzN,IAAAA,KAAK,EAAE,CADC;AAER3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA4D,CAClEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADkE,EAElEyP,GAAG,CAAC,UAAD,CAF+D,CAA5D,CAAA;GAnBT;AAwBDiC,EAAAA,cAAc,EAAE;AACdzO,IAAAA,KAAK,EAAE,CADO;IAEd3B,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAAkE,CACxEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADwE,EAExE2E,SAAA,CAAiB,MAAjB,CAFwE,EAGxEA,UAAA,CAAkB,MAAlB,CAHwE,EAIxEhF,uBAAY,CAACgB,IAAb,CAAkB,UAAlB,CAJwE,EAKxEhB,uBAAY,CAACgB,IAAb,CAAkB,OAAlB,CALwE,EAMxEgE,SAAA,CAAiB,WAAjB,CANwE,CAAlE,CAAA;GA1BT;AAmCDoN,EAAAA,mBAAmB,EAAE;AACnB9O,IAAAA,KAAK,EAAE,CADY;AAEnB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,CAFM,CAAA;GArCT;AAyCDiS,EAAAA,oBAAoB,EAAE;AACpBhP,IAAAA,KAAK,EAAE,CADa;AAEpB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,EAAkCL,uBAAY,CAACgB,IAAb,CAAkB,UAAlB,CAAlC,CAFM,CAAA;GA3CT;AA+CDiR,EAAAA,sBAAsB,EAAE;AACtB3O,IAAAA,KAAK,EAAE,CADe;AAEtB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,EAAkC2E,SAAA,CAAiB,YAAjB,CAAlC,CAFM,CAAA;GAjDT;AAqDDwN,EAAAA,qBAAqB,EAAE;AACrBlP,IAAAA,KAAK,EAAE,CADc;AAErB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,EAAkC2E,SAAA,CAAiB,YAAjB,CAAlC,CAFM,CAAA;GAvDT;AA2DDqM,EAAAA,QAAQ,EAAE;AACR/N,IAAAA,KAAK,EAAE,CADC;AAER3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA4D,CAClEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADkE,EAElEL,uBAAY,CAACgB,IAAb,CAAkB,OAAlB,CAFkE,CAA5D,CAAA;GA7DT;AAkEDyQ,EAAAA,gBAAgB,EAAE;AAChBnO,IAAAA,KAAK,EAAE,CADS;AAEhB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CACN,CACEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADF,EAEE2E,SAAA,CAAiB,MAAjB,CAFF,EAGEA,UAAA,CAAkB,MAAlB,CAHF,EAIEhF,uBAAY,CAACgB,IAAb,CAAkB,OAAlB,CAJF,EAKEgE,SAAA,CAAiB,WAAjB,CALF,CADM,CAAA;GApET;AA8ED6M,EAAAA,cAAc,EAAE;AACdvO,IAAAA,KAAK,EAAE,EADO;AAEd3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAAkE,CACxEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADwE,EAExE2E,SAAA,CAAiB,MAAjB,CAFwE,EAGxEA,UAAA,CAAkB,MAAlB,CAHwE,EAIxEA,SAAA,CAAiB,WAAjB,CAJwE,CAAlE,CAAA;GAhFT;AAuFDkM,EAAAA,gBAAgB,EAAE;AAChB5N,IAAAA,KAAK,EAAE,EADS;AAEhB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CACN,CACEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADF,EAEEyP,GAAG,CAAC,UAAD,CAFL,EAGE9K,UAAA,CAAkB,MAAlB,CAHF,EAIEA,SAAA,CAAiB,WAAjB,CAJF,CADM,CAAA;GAzFT;AAkGD6N,EAAAA,mBAAmB,EAAE;AACnBvP,IAAAA,KAAK,EAAE,EADY;AAEnB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,CAFM,CAAA;AAFW,GAAA;AAlGpB,CAJuC,EAAnC;AA8GP;AACA;AACA;;AACO,MAAMqS,aAAN,CAAoB;AACzB;AACF;AACA;AACE1X,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;AAKE;AACF;AACA;EACsB,OAAb8X,aAAa,CAACC,MAAD,EAAsD;AACxE,IAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACK,MAAxC,CAAA;AACA,IAAA,MAAMnV,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;MAC5BqP,QAAQ,EAAEsC,MAAM,CAACtC,QADW;MAE5BC,KAAK,EAAEqC,MAAM,CAACrC,KAFc;MAG5B9S,SAAS,EAAErD,QAAQ,CAACwY,MAAM,CAACnV,SAAP,CAAiBrD,QAAjB,EAAD,CAAA;AAHS,KAAP,CAAvB,CAAA;IAMA,OAAO,IAAIwN,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,CACJ;QAAC8C,MAAM,EAAEmU,MAAM,CAACnC,UAAhB;AAA4B3I,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE,IAAA;AAAxD,OADI,EAEJ;QAACtJ,MAAM,EAAEmU,MAAM,CAAClC,gBAAhB;AAAkC5I,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE,IAAA;AAA9D,OAFI,CAD0B;MAKhCtK,SAAS,EAAE,KAAKA,SALgB;AAMhCpC,MAAAA,IAAAA;AANgC,KAA3B,CAAP,CAAA;AAQD,GAAA;AAED;AACF;AACA;;;EACiB,OAARwX,QAAQ,CACbD,MADa,EAEW;AACxB,IAAA,IAAIvX,IAAJ,CAAA;AACA,IAAA,IAAIM,IAAJ,CAAA;;IACA,IAAI,YAAA,IAAgBiX,MAApB,EAA4B;AAC1B,MAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACY,gBAAxC,CAAA;AACA1V,MAAAA,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AACtBqP,QAAAA,QAAQ,EAAEwC,MAAM,CAACF,MAAM,CAACtC,QAAR,CADM;QAEtB9S,IAAI,EAAEoV,MAAM,CAACpV,IAFS;QAGtBC,SAAS,EAAErD,QAAQ,CAACwY,MAAM,CAACnV,SAAP,CAAiBrD,QAAjB,EAAD,CAAA;AAHG,OAAP,CAAjB,CAAA;AAKAuB,MAAAA,IAAI,GAAG,CACL;QAAC8C,MAAM,EAAEmU,MAAM,CAACnC,UAAhB;AAA4B3I,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE,IAAA;AAAzD,OADK,EAEL;QAACtJ,MAAM,EAAEmU,MAAM,CAAC5B,UAAhB;AAA4BlJ,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE,KAAA;AAAxD,OAFK,EAGL;QAACtJ,MAAM,EAAEmU,MAAM,CAAC/B,QAAhB;AAA0B/I,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,IAAA;AAAvD,OAHK,CAAP,CAAA;AAKD,KAZD,MAYO;AACL,MAAA,MAAM9G,IAAI,GAAGkP,0BAA0B,CAACS,QAAxC,CAAA;AACAvV,MAAAA,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAACqP,QAAAA,QAAQ,EAAEwC,MAAM,CAACF,MAAM,CAACtC,QAAR,CAAA;AAAjB,OAAP,CAAjB,CAAA;AACA3U,MAAAA,IAAI,GAAG,CACL;QAAC8C,MAAM,EAAEmU,MAAM,CAACnC,UAAhB;AAA4B3I,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE,IAAA;AAAxD,OADK,EAEL;QAACtJ,MAAM,EAAEmU,MAAM,CAAC/B,QAAhB;AAA0B/I,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,IAAA;AAAvD,OAFK,CAAP,CAAA;AAID,KAAA;;IAED,OAAO,IAAIH,sBAAJ,CAA2B;MAChCjM,IADgC;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACe,OAANL,MAAM,CACX4X,MADW,EAEa;AACxB,IAAA,IAAIvX,IAAJ,CAAA;AACA,IAAA,IAAIM,IAAJ,CAAA;;IACA,IAAI,YAAA,IAAgBiX,MAApB,EAA4B;AAC1B,MAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACuB,cAAxC,CAAA;AACArW,MAAAA,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;QACtBoQ,IAAI,EAAEjX,QAAQ,CAACwY,MAAM,CAAC5B,UAAP,CAAkB5W,QAAlB,EAAD,CADQ;QAEtBoD,IAAI,EAAEoV,MAAM,CAACpV,IAFS;QAGtBC,SAAS,EAAErD,QAAQ,CAACwY,MAAM,CAACnV,SAAP,CAAiBrD,QAAjB,EAAD,CAAA;AAHG,OAAP,CAAjB,CAAA;AAKAuB,MAAAA,IAAI,GAAG,CACL;QAAC8C,MAAM,EAAEmU,MAAM,CAACzB,aAAhB;AAA+BrJ,QAAAA,QAAQ,EAAE,KAAzC;AAAgDC,QAAAA,UAAU,EAAE,IAAA;AAA5D,OADK,EAEL;QAACtJ,MAAM,EAAEmU,MAAM,CAAC5B,UAAhB;AAA4BlJ,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE,KAAA;AAAxD,OAFK,CAAP,CAAA;AAID,KAXD,MAWO;AACL,MAAA,MAAM9G,IAAI,GAAGkP,0BAA0B,CAACqB,MAAxC,CAAA;AACAnW,MAAAA,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;QACtBxD,SAAS,EAAErD,QAAQ,CAACwY,MAAM,CAACnV,SAAP,CAAiBrD,QAAjB,EAAD,CAAA;AADG,OAAP,CAAjB,CAAA;AAGAuB,MAAAA,IAAI,GAAG,CAAC;QAAC8C,MAAM,EAAEmU,MAAM,CAACzB,aAAhB;AAA+BrJ,QAAAA,QAAQ,EAAE,IAAzC;AAA+CC,QAAAA,UAAU,EAAE,IAAA;AAA3D,OAAD,CAAP,CAAA;AACD,KAAA;;IAED,OAAO,IAAIH,sBAAJ,CAA2B;MAChCjM,IADgC;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;AACA;;;EAC8B,OAArB0X,qBAAqB,CAC1BH,MAD0B,EAEF;AACxB,IAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACyB,cAAxC,CAAA;AACA,IAAA,MAAMvW,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;MAC5BoQ,IAAI,EAAEjX,QAAQ,CAACwY,MAAM,CAAC5B,UAAP,CAAkB5W,QAAlB,EAAD,CADc;MAE5BoD,IAAI,EAAEoV,MAAM,CAACpV,IAFe;MAG5B8S,QAAQ,EAAEsC,MAAM,CAACtC,QAHW;MAI5BC,KAAK,EAAEqC,MAAM,CAACrC,KAJc;MAK5B9S,SAAS,EAAErD,QAAQ,CAACwY,MAAM,CAACnV,SAAP,CAAiBrD,QAAjB,EAAD,CAAA;AALS,KAAP,CAAvB,CAAA;IAOA,IAAIuB,IAAI,GAAG,CACT;MAAC8C,MAAM,EAAEmU,MAAM,CAACnC,UAAhB;AAA4B3I,MAAAA,QAAQ,EAAE,IAAtC;AAA4CC,MAAAA,UAAU,EAAE,IAAA;AAAxD,KADS,EAET;MAACtJ,MAAM,EAAEmU,MAAM,CAAClC,gBAAhB;AAAkC5I,MAAAA,QAAQ,EAAE,KAA5C;AAAmDC,MAAAA,UAAU,EAAE,IAAA;AAA/D,KAFS,CAAX,CAAA;;AAIA,IAAA,IAAI6K,MAAM,CAAC5B,UAAP,IAAqB4B,MAAM,CAACnC,UAAhC,EAA4C;MAC1C9U,IAAI,CAACsG,IAAL,CAAU;QAACxD,MAAM,EAAEmU,MAAM,CAAC5B,UAAhB;AAA4BlJ,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE,KAAA;OAAlE,CAAA,CAAA;AACD,KAAA;;IAED,OAAO,IAAIH,sBAAJ,CAA2B;MAChCjM,IADgC;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EAC2B,OAAlB2X,kBAAkB,CACvBJ,MADuB,EAEV;AACb,IAAA,MAAM9N,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;;AACA,IAAA,IAAI,YAAgB4K,IAAAA,MAAhB,IAA0B,MAAA,IAAUA,MAAxC,EAAgD;AAC9C9N,MAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACQ,qBAAd,CAAoC;QAClCtC,UAAU,EAAEmC,MAAM,CAACnC,UADe;QAElCC,gBAAgB,EAAEkC,MAAM,CAACb,WAFS;QAGlCf,UAAU,EAAE4B,MAAM,CAAC5B,UAHe;QAIlCxT,IAAI,EAAEoV,MAAM,CAACpV,IAJqB;QAKlC8S,QAAQ,EAAEsC,MAAM,CAACtC,QALiB;AAMlCC,QAAAA,KAAK,EAAExB,oBAN2B;AAOlCtR,QAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AAPkB,OAApC,CADF,CAAA,CAAA;AAWD,KAZD,MAYO;AACLqH,MAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACI,aAAd,CAA4B;QAC1BlC,UAAU,EAAEmC,MAAM,CAACnC,UADO;QAE1BC,gBAAgB,EAAEkC,MAAM,CAACb,WAFC;QAG1BzB,QAAQ,EAAEsC,MAAM,CAACtC,QAHS;AAI1BC,QAAAA,KAAK,EAAExB,oBAJmB;AAK1BtR,QAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AALU,OAA5B,CADF,CAAA,CAAA;AASD,KAAA;;AAED,IAAA,MAAMwV,UAAU,GAAG;MACjBlB,WAAW,EAAEa,MAAM,CAACb,WADH;MAEjB9C,gBAAgB,EAAE2D,MAAM,CAAC3D,gBAAAA;KAF3B,CAAA;AAKAnK,IAAAA,WAAW,CAAC8D,GAAZ,CAAgB,KAAKsK,eAAL,CAAqBD,UAArB,CAAhB,CAAA,CAAA;AACA,IAAA,OAAOnO,WAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACwB,OAAfoO,eAAe,CACpBN,MADoB,EAEI;AACxB,IAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAAC2B,sBAAxC,CAAA;AACA,IAAA,MAAMzW,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;MAC5BN,UAAU,EAAEvG,QAAQ,CAACwY,MAAM,CAAC3D,gBAAP,CAAwB7U,QAAxB,EAAD,CAAA;AADQ,KAAP,CAAvB,CAAA;AAGA,IAAA,MAAM+Y,eAAe,GAAG;AACtBxX,MAAAA,IAAI,EAAE,CACJ;QAAC8C,MAAM,EAAEmU,MAAM,CAACb,WAAhB;AAA6BjK,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,IAAA;AAA1D,OADI,EAEJ;AACEtJ,QAAAA,MAAM,EAAEyO,gCADV;AAEEpF,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;AAHd,OAFI,EAOJ;AAACtJ,QAAAA,MAAM,EAAE0O,kBAAT;AAA6BrF,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,KAAA;AAA1D,OAPI,CADgB;MAUtBtK,SAAS,EAAE,KAAKA,SAVM;AAWtBpC,MAAAA,IAAAA;KAXF,CAAA;AAaA,IAAA,OAAO,IAAIuM,sBAAJ,CAA2BuL,eAA3B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACqB,OAAZC,YAAY,CAACR,MAAD,EAAqD;AACtE,IAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAAC8B,mBAAxC,CAAA;AACA,IAAA,MAAM5W,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;AACA,IAAA,MAAMkS,eAAe,GAAG;AACtBxX,MAAAA,IAAI,EAAE,CACJ;QAAC8C,MAAM,EAAEmU,MAAM,CAACb,WAAhB;AAA6BjK,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,IAAA;AAA1D,OADI,EAEJ;AACEtJ,QAAAA,MAAM,EAAEyO,gCADV;AAEEpF,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;AAHd,OAFI,EAOJ;QAACtJ,MAAM,EAAEmU,MAAM,CAAC3D,gBAAhB;AAAkCnH,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE,KAAA;AAA9D,OAPI,CADgB;MAUtBtK,SAAS,EAAE,KAAKA,SAVM;AAWtBpC,MAAAA,IAAAA;KAXF,CAAA;AAaA,IAAA,OAAO,IAAIuM,sBAAJ,CAA2BuL,eAA3B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACsB,OAAbE,aAAa,CAACT,MAAD,EAAsD;AACxE,IAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACgC,oBAAxC,CAAA;AACA,IAAA,MAAM9W,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;MAACqP,QAAQ,EAAEsC,MAAM,CAACtC,QAAAA;AAAlB,KAAP,CAAvB,CAAA;IAEA,OAAO,IAAI1I,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,CACJ;QAAC8C,MAAM,EAAEmU,MAAM,CAACb,WAAhB;AAA6BjK,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,IAAA;AAA1D,OADI,EAEJ;QAACtJ,MAAM,EAAEmU,MAAM,CAAC/B,QAAhB;AAA0B/I,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,IAAA;AAAvD,OAFI,EAGJ;AACEtJ,QAAAA,MAAM,EAAEyO,gCADV;AAEEpF,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;AAHd,OAHI,EAQJ;AACEtJ,QAAAA,MAAM,EAAE0O,kBADV;AAEErF,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;AAHd,OARI,EAaJ;QAACtJ,MAAM,EAAEmU,MAAM,CAAC3D,gBAAhB;AAAkCnH,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE,KAAA;AAA9D,OAbI,CAD0B;MAgBhCtK,SAAS,EAAE,KAAKA,SAhBgB;AAiBhCpC,MAAAA,IAAAA;AAjBgC,KAA3B,CAAP,CAAA;AAmBD,GAAA;AAED;AACF;AACA;AACA;;;EACuB,OAAdiY,cAAc,CAACV,MAAD,EAAuD;AAC1E,IAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACkC,qBAAxC,CAAA;AACA,IAAA,MAAMhX,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;MAC5BN,UAAU,EAAEvG,QAAQ,CAACwY,MAAM,CAACN,mBAAP,CAA2BlY,QAA3B,EAAD,CAAA;AADQ,KAAP,CAAvB,CAAA;IAIA,OAAO,IAAIwN,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,CACJ;QAAC8C,MAAM,EAAEmU,MAAM,CAACb,WAAhB;AAA6BjK,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,IAAA;AAA1D,OADI,EAEJ;QAACtJ,MAAM,EAAEmU,MAAM,CAAC3D,gBAAhB;AAAkCnH,QAAAA,QAAQ,EAAE,IAA5C;AAAkDC,QAAAA,UAAU,EAAE,KAAA;AAA9D,OAFI,CAD0B;MAKhCtK,SAAS,EAAE,KAAKA,SALgB;AAMhCpC,MAAAA,IAAAA;AANgC,KAA3B,CAAP,CAAA;AAQD,GAAA;AAED;AACF;AACA;;;EACiB,OAARkY,QAAQ,CACbX,MADa,EAEW;AACxB,IAAA,IAAIvX,IAAJ,CAAA;AACA,IAAA,IAAIM,IAAJ,CAAA;;IACA,IAAI,YAAA,IAAgBiX,MAApB,EAA4B;AAC1B,MAAA,MAAM3R,IAAI,GAAGkP,0BAA0B,CAACmB,gBAAxC,CAAA;AACAjW,MAAAA,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;QACtBoQ,IAAI,EAAEjX,QAAQ,CAACwY,MAAM,CAAC5B,UAAP,CAAkB5W,QAAlB,EAAD,CADQ;QAEtBoD,IAAI,EAAEoV,MAAM,CAACpV,IAFS;QAGtB+S,KAAK,EAAEqC,MAAM,CAACrC,KAHQ;QAItB9S,SAAS,EAAErD,QAAQ,CAACwY,MAAM,CAACnV,SAAP,CAAiBrD,QAAjB,EAAD,CAAA;AAJG,OAAP,CAAjB,CAAA;AAMAuB,MAAAA,IAAI,GAAG,CACL;QAAC8C,MAAM,EAAEmU,MAAM,CAACzB,aAAhB;AAA+BrJ,QAAAA,QAAQ,EAAE,KAAzC;AAAgDC,QAAAA,UAAU,EAAE,IAAA;AAA5D,OADK,EAEL;QAACtJ,MAAM,EAAEmU,MAAM,CAAC5B,UAAhB;AAA4BlJ,QAAAA,QAAQ,EAAE,IAAtC;AAA4CC,QAAAA,UAAU,EAAE,KAAA;AAAxD,OAFK,CAAP,CAAA;AAID,KAZD,MAYO;AACL,MAAA,MAAM9G,IAAI,GAAGkP,0BAA0B,CAACe,QAAxC,CAAA;AACA7V,MAAAA,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;QACtBsP,KAAK,EAAEqC,MAAM,CAACrC,KAAAA;AADQ,OAAP,CAAjB,CAAA;AAGA5U,MAAAA,IAAI,GAAG,CAAC;QAAC8C,MAAM,EAAEmU,MAAM,CAACzB,aAAhB;AAA+BrJ,QAAAA,QAAQ,EAAE,IAAzC;AAA+CC,QAAAA,UAAU,EAAE,IAAA;AAA3D,OAAD,CAAP,CAAA;AACD,KAAA;;IAED,OAAO,IAAIH,sBAAJ,CAA2B;MAChCjM,IADgC;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;;AA/SwB,CAAA;AAAdkX,cASJ9U,YAAuB,IAAIlB,SAAJ,CAC5B,kCAD4B;;AC/tBhC;AACA;AACA;AACA;AACA;AACA,MAAMiX,UAAU,GAAGtU,gBAAgB,GAAG,GAAtC,CAAA;AAEA;AACA;AACA;;AACO,MAAMuU,MAAN,CAAa;AAClB;AACF;AACA;AACE5Y,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;AAGE;AACF;AACA;AACA;AACA;AACA;EAC4B,OAAnB6Y,mBAAmB,CAACpP,UAAD,EAA6B;AACrD,IAAA,OACE,CAAI;IACHqP,IAAI,CAACC,IAAL,CAAUtP,UAAU,GAAGmP,MAAM,CAACI,SAA9B,CACC,GAAA,CADD;AAEC,IAAA,CAHF,CADF;AAAA,KAAA;AAMD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,aAAJC,IAAI,CACfjJ,UADe,EAEfkJ,KAFe,EAGfC,OAHe,EAIfvW,SAJe,EAKfpC,IALe,EAMG;AAClB,IAAA;AACE,MAAA,MAAM4Y,aAAa,GAAG,MAAMpJ,UAAU,CAACqJ,iCAAX,CAC1B7Y,IAAI,CAACO,MADqB,CAA5B,CADF;;AAME,MAAA,MAAMuY,WAAW,GAAG,MAAMtJ,UAAU,CAACuJ,cAAX,CACxBJ,OAAO,CAACza,SADgB,EAExB,WAFwB,CAA1B,CAAA;MAKA,IAAIuL,WAA+B,GAAG,IAAtC,CAAA;;MACA,IAAIqP,WAAW,KAAK,IAApB,EAA0B;QACxB,IAAIA,WAAW,CAACE,UAAhB,EAA4B;UAC1BpL,OAAO,CAACqL,KAAR,CAAc,oDAAd,CAAA,CAAA;AACA,UAAA,OAAO,KAAP,CAAA;AACD,SAAA;;QAED,IAAIH,WAAW,CAAC9Y,IAAZ,CAAiBO,MAAjB,KAA4BP,IAAI,CAACO,MAArC,EAA6C;AAC3CkJ,UAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIkD,WAAJ,EAA7B,CAAA;AACAlD,UAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACgB,QAAd,CAAuB;YACrBpC,aAAa,EAAE6C,OAAO,CAACza,SADF;YAErBgX,KAAK,EAAElV,IAAI,CAACO,MAAAA;AAFS,WAAvB,CADF,CAAA,CAAA;AAMD,SAAA;;QAED,IAAI,CAACuY,WAAW,CAACI,KAAZ,CAAkB5X,MAAlB,CAAyBc,SAAzB,CAAL,EAA0C;AACxCqH,UAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIkD,WAAJ,EAA7B,CAAA;AACAlD,UAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACvX,MAAd,CAAqB;YACnBmW,aAAa,EAAE6C,OAAO,CAACza,SADJ;AAEnBkE,YAAAA,SAAAA;AAFmB,WAArB,CADF,CAAA,CAAA;AAMD,SAAA;;AAED,QAAA,IAAI0W,WAAW,CAAC7D,QAAZ,GAAuB2D,aAA3B,EAA0C;AACxCnP,UAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIkD,WAAJ,EAA7B,CAAA;AACAlD,UAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACM,QAAd,CAAuB;YACrBpC,UAAU,EAAEsD,KAAK,CAACxa,SADG;YAErBsX,QAAQ,EAAEmD,OAAO,CAACza,SAFG;AAGrB+W,YAAAA,QAAQ,EAAE2D,aAAa,GAAGE,WAAW,CAAC7D,QAAAA;AAHjB,WAAvB,CADF,CAAA,CAAA;AAOD,SAAA;AACF,OApCD,MAoCO;QACLxL,WAAW,GAAG,IAAIkD,WAAJ,EAAA,CAAkBY,GAAlB,CACZ2J,aAAa,CAACI,aAAd,CAA4B;UAC1BlC,UAAU,EAAEsD,KAAK,CAACxa,SADQ;UAE1BmX,gBAAgB,EAAEsD,OAAO,CAACza,SAFA;AAG1B+W,UAAAA,QAAQ,EAAE2D,aAAa,GAAG,CAAhB,GAAoBA,aAApB,GAAoC,CAHpB;UAI1B1D,KAAK,EAAElV,IAAI,CAACO,MAJc;AAK1B6B,UAAAA,SAAAA;AAL0B,SAA5B,CADY,CAAd,CAAA;AASD,OA1DH;AA6DE;;;MACA,IAAIqH,WAAW,KAAK,IAApB,EAA0B;QACxB,MAAM0I,yBAAyB,CAC7B3C,UAD6B,EAE7B/F,WAF6B,EAG7B,CAACiP,KAAD,EAAQC,OAAR,CAH6B,EAI7B;AACEnG,UAAAA,UAAU,EAAE,WAAA;AADd,SAJ6B,CAA/B,CAAA;AAQD,OAAA;AACF,KAAA;AAED,IAAA,MAAM2G,UAAU,GAAG3U,uBAAY,CAACI,MAAb,CAQjB,CACAJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADA,EAEAL,uBAAY,CAACK,GAAb,CAAiB,QAAjB,CAFA,EAGAL,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAHA,EAIAL,uBAAY,CAACK,GAAb,CAAiB,oBAAjB,CAJA,EAKAL,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACkB,EAAb,CAAgB,MAAhB,CADF,EAEElB,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACK,GAAb,EAApB,EAAwC,CAAC,CAAzC,CAFF,EAGE,OAHF,CALA,CARiB,CAAnB,CAAA;AAoBA,IAAA,MAAM2T,SAAS,GAAGJ,MAAM,CAACI,SAAzB,CAAA;IACA,IAAI1T,MAAM,GAAG,CAAb,CAAA;IACA,IAAIsU,KAAK,GAAGpZ,IAAZ,CAAA;IACA,IAAIqZ,YAAY,GAAG,EAAnB,CAAA;;AACA,IAAA,OAAOD,KAAK,CAAC7Y,MAAN,GAAe,CAAtB,EAAyB;MACvB,MAAM8F,KAAK,GAAG+S,KAAK,CAACva,KAAN,CAAY,CAAZ,EAAe2Z,SAAf,CAAd,CAAA;MACA,MAAMxY,IAAI,GAAGf,aAAM,CAAC6C,KAAP,CAAa0W,SAAS,GAAG,EAAzB,CAAb,CAAA;MACAW,UAAU,CAACvZ,MAAX,CACE;AACEiJ,QAAAA,WAAW,EAAE,CADf;AACkB;QAChB/D,MAFF;AAGEuB,QAAAA,KAAK,EAAEA,KAHT;AAIEiT,QAAAA,WAAW,EAAE,CAJf;AAKEC,QAAAA,kBAAkB,EAAE,CAAA;AALtB,OADF,EAQEvZ,IARF,CAAA,CAAA;AAWA,MAAA,MAAMyJ,WAAW,GAAG,IAAIkD,WAAJ,EAAA,CAAkBY,GAAlB,CAAsB;AACxCjN,QAAAA,IAAI,EAAE,CAAC;UAAC8C,MAAM,EAAEuV,OAAO,CAACza,SAAjB;AAA4BuO,UAAAA,QAAQ,EAAE,IAAtC;AAA4CC,UAAAA,UAAU,EAAE,IAAA;AAAxD,SAAD,CADkC;QAExCtK,SAFwC;AAGxCpC,QAAAA,IAAAA;AAHwC,OAAtB,CAApB,CAAA;AAKAqZ,MAAAA,YAAY,CAACzS,IAAb,CACEuL,yBAAyB,CAAC3C,UAAD,EAAa/F,WAAb,EAA0B,CAACiP,KAAD,EAAQC,OAAR,CAA1B,EAA4C;AACnEnG,QAAAA,UAAU,EAAE,WAAA;OADW,CAD3B,EAnBuB;;MA0BvB,IAAIhD,UAAU,CAACgK,YAAX,CAAwBxL,QAAxB,CAAiC,YAAjC,CAAJ,EAAoD;QAClD,MAAMyL,mBAAmB,GAAG,CAA5B,CAAA;AACA,QAAA,MAAM3G,KAAK,CAAC,IAAO2G,GAAAA,mBAAR,CAAX,CAAA;AACD,OAAA;;AAED3U,MAAAA,MAAM,IAAI0T,SAAV,CAAA;AACAY,MAAAA,KAAK,GAAGA,KAAK,CAACva,KAAN,CAAY2Z,SAAZ,CAAR,CAAA;AACD,KAAA;;AACD,IAAA,MAAMxF,OAAO,CAAC0G,GAAR,CAAYL,YAAZ,CAAN,CArIkB;;AAwIlB,IAAA;AACE,MAAA,MAAMF,UAAU,GAAG3U,uBAAY,CAACI,MAAb,CAA2C,CAC5DJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAD4D,CAA3C,CAAnB,CAAA;MAIA,MAAM7E,IAAI,GAAGf,aAAM,CAAC6C,KAAP,CAAaqX,UAAU,CAAC9T,IAAxB,CAAb,CAAA;MACA8T,UAAU,CAACvZ,MAAX,CACE;QACEiJ,WAAW,EAAE,CADf;;AAAA,OADF,EAIE7I,IAJF,CAAA,CAAA;AAOA,MAAA,MAAMyJ,WAAW,GAAG,IAAIkD,WAAJ,EAAA,CAAkBY,GAAlB,CAAsB;AACxCjN,QAAAA,IAAI,EAAE,CACJ;UAAC8C,MAAM,EAAEuV,OAAO,CAACza,SAAjB;AAA4BuO,UAAAA,QAAQ,EAAE,IAAtC;AAA4CC,UAAAA,UAAU,EAAE,IAAA;AAAxD,SADI,EAEJ;AAACtJ,UAAAA,MAAM,EAAE0O,kBAAT;AAA6BrF,UAAAA,QAAQ,EAAE,KAAvC;AAA8CC,UAAAA,UAAU,EAAE,KAAA;AAA1D,SAFI,CADkC;QAKxCtK,SALwC;AAMxCpC,QAAAA,IAAAA;AANwC,OAAtB,CAApB,CAAA;MAQA,MAAMmS,yBAAyB,CAC7B3C,UAD6B,EAE7B/F,WAF6B,EAG7B,CAACiP,KAAD,EAAQC,OAAR,CAH6B,EAI7B;AACEnG,QAAAA,UAAU,EAAE,WAAA;AADd,OAJ6B,CAA/B,CAAA;AAQD,KArKiB;;AAwKlB,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AAnNiB,CAAA;AAAP4F,OASJI,YAAoBL;;MCzBhBwB,qBAAqB,GAAG,IAAIzY,SAAJ,CACnC,6CADmC,EAA9B;AAIP;AACA;AACA;;AACO,MAAM0Y,SAAN,CAAgB;AACrB;AACF;AACA;AACA;AACA;AACA;EAC4B,OAAnBvB,mBAAmB,CAACpP,UAAD,EAA6B;AACrD,IAAA,OAAOmP,MAAM,CAACC,mBAAP,CAA2BpP,UAA3B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACa,OAAJwP,IAAI,CACTjJ,UADS,EAETkJ,KAFS,EAGTC,OAHS,EAITkB,GAJS,EAKTC,eALS,EAMS;AAClB,IAAA,OAAO1B,MAAM,CAACK,IAAP,CAAYjJ,UAAZ,EAAwBkJ,KAAxB,EAA+BC,OAA/B,EAAwCmB,eAAxC,EAAyDD,GAAzD,CAAP,CAAA;AACD,GAAA;;AA7BoB;;ACdvB,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC5C,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,IAAI,SAAS,GAAG,EAAE;AAC3C,EAAE,IAAI,IAAI,GAAG,EAAE,CAAC;AAChB,EAAE,KAAK,IAAI,IAAI,IAAI,GAAG,EAAE;AACxB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnB,GAAG;AACH,EAAE,OAAO,IAAI,CAAC;AACd,EAAE,CAAC;AACH;AACA,SAAS,SAAS,CAAC,GAAG,EAAE,WAAW,EAAE;AACrC,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC;AAC5C,CAAC,IAAI,GAAG,KAAK,IAAI,EAAE;AACnB,EAAE,OAAO,MAAM,CAAC;AAChB,EAAE;AACF,CAAC,IAAI,GAAG,KAAK,KAAK,EAAE;AACpB,EAAE,OAAO,OAAO,CAAC;AACjB,EAAE;AACF,CAAC,QAAQ,OAAO,GAAG;AACnB,EAAE,KAAK,QAAQ;AACf,GAAG,IAAI,GAAG,KAAK,IAAI,EAAE;AACrB,IAAI,OAAO,IAAI,CAAC;AAChB,IAAI,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,UAAU,EAAE;AAC9D,IAAI,OAAO,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,WAAW,CAAC,CAAC;AAChD,IAAI,MAAM;AACV,IAAI,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClC,IAAI,IAAI,KAAK,KAAK,gBAAgB,EAAE;AACpC,KAAK,GAAG,GAAG,GAAG,CAAC;AACf,KAAK,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;AAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC9B,MAAM,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;AAC3C,MAAM;AACN,KAAK,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;AACnB,MAAM,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AACrC,MAAM;AACN,KAAK,OAAO,GAAG,GAAG,GAAG,CAAC;AACtB,KAAK,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AAC5C;AACA,KAAK,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;AAChC,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;AACvB,KAAK,GAAG,GAAG,EAAE,CAAC;AACd,KAAK,CAAC,GAAG,CAAC,CAAC;AACX,KAAK,OAAO,CAAC,GAAG,GAAG,EAAE;AACrB,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AAC3C,MAAM,IAAI,OAAO,KAAK,SAAS,EAAE;AACjC,OAAO,IAAI,GAAG,EAAE;AAChB,QAAQ,GAAG,IAAI,GAAG,CAAC;AACnB,QAAQ;AACR,OAAO,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC;AAClD,OAAO;AACP,MAAM,CAAC,EAAE,CAAC;AACV,MAAM;AACN,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5B,KAAK,MAAM;AACX,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAChC,KAAK;AACL,IAAI;AACJ,EAAE,KAAK,UAAU,CAAC;AAClB,EAAE,KAAK,WAAW;AAClB,GAAG,OAAO,WAAW,GAAG,IAAI,GAAG,SAAS,CAAC;AACzC,EAAE,KAAK,QAAQ;AACf,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAC9B,EAAE;AACF,GAAG,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;AACrC,EAAE;AACF,CAAC;AACD;IACA,mBAAc,GAAG,SAAS,GAAG,EAAE;AAC/B,CAAC,IAAI,SAAS,GAAG,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACvC,CAAC,IAAI,SAAS,KAAK,SAAS,EAAE;AAC9B,EAAE,OAAO,EAAE,EAAE,SAAS,CAAC;AACvB,EAAE;AACF,CAAC,CAAA;;;;ACrEM,MAAME,kBAAkB,GAAG,IAA3B,CAAA;AAEA,MAAMC,YAAN,CAAmB;EAMR,OAATC,SAAS,CAACC,QAAD,EAA8C;AAC5D,IAAA,MAAM9H,OAAO,GAAG;AAAC+H,MAAAA,SAAS,EAAE,IAAZ;AAAkBC,MAAAA,UAAU,EAAE,EAAA;KAA9C,CAAA;;AACA,IAAA,IAAIF,QAAJ,EAAc;AACZ,MAAA,OAAO,IAAIG,yBAAK,CAACC,KAAV,CAAgBlI,OAAhB,CAAP,CAAA;AACD,KAFD,MAEO;AACL,MAAA,OAAO,IAAImI,wBAAI,CAACD,KAAT,CAAelI,OAAf,CAAP,CAAA;AACD,KAAA;AACF,GAAA;;EAED5S,WAAW,CAAC0a,QAAD,EAAqB;AAAA,IAAA,IAAA,CAdhCM,MAcgC,GAAA,KAAA,CAAA,CAAA;IAAA,IAbhCC,CAAAA,eAagC,GAbd,CAac,CAAA;IAAA,IAZhCC,CAAAA,eAYgC,GAZwB,IAYxB,CAAA;AAAA,IAAA,IAAA,CAXhCC,SAWgC,GAAA,KAAA,CAAA,CAAA;AAC9B,IAAA,IAAA,CAAKA,SAAL,GAAiBT,QAAQ,KAAK,IAA9B,CAAA;IACA,IAAKM,CAAAA,MAAL,GAAcR,YAAY,CAACC,SAAb,CAAuB,IAAA,CAAKU,SAA5B,CAAd,CAAA;AACD,GAAA;;AAEDC,EAAAA,YAAY,GAA6B;AACvC,IAAA,IAAA,CAAKH,eAAL,EAAA,CAAA;;AACA,IAAA,IAAI,IAAKC,CAAAA,eAAL,KAAyB,IAA7B,EAAmC;MACjCG,YAAY,CAAC,IAAKH,CAAAA,eAAN,CAAZ,CAAA;MACA,IAAKA,CAAAA,eAAL,GAAuB,IAAvB,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,KAAKF,MAAZ,CAAA;AACD,GAAA;;AAEDM,EAAAA,UAAU,GAAG;AACX,IAAA,IAAA,CAAKL,eAAL,EAAA,CAAA;;IACA,IAAI,IAAA,CAAKA,eAAL,KAAyB,CAAzB,IAA8B,IAAKC,CAAAA,eAAL,KAAyB,IAA3D,EAAiE;AAC/D,MAAA,IAAA,CAAKA,eAAL,GAAuBxH,UAAU,CAAC,MAAM;QACtC,IAAKsH,CAAAA,MAAL,CAAYO,OAAZ,EAAA,CAAA;;QACA,IAAKP,CAAAA,MAAL,GAAcR,YAAY,CAACC,SAAb,CAAuB,IAAA,CAAKU,SAA5B,CAAd,CAAA;OAF+B,EAG9BZ,kBAH8B,CAAjC,CAAA;AAID,KAAA;AACF,GAAA;;AArCuB;;ACL1B,MAAMiB,sBAAsB,GAAG,EAA/B;;AAGA,SAASC,aAAT,CAAuBC,CAAvB,EAAkC;EAChC,IAAID,aAAa,GAAG,CAApB,CAAA;;EACA,OAAOC,CAAC,GAAG,CAAX,EAAc;AACZA,IAAAA,CAAC,IAAI,CAAL,CAAA;IACAD,aAAa,EAAA,CAAA;AACd,GAAA;;AACD,EAAA,OAAOA,aAAP,CAAA;AACD;;;AAGD,SAASE,cAAT,CAAwBD,CAAxB,EAAmC;AACjC,EAAA,IAAIA,CAAC,KAAK,CAAV,EAAa,OAAO,CAAP,CAAA;EACbA,CAAC,EAAA,CAAA;EACDA,CAAC,IAAIA,CAAC,IAAI,CAAV,CAAA;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAV,CAAA;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAV,CAAA;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAV,CAAA;EACAA,CAAC,IAAIA,CAAC,IAAI,EAAV,CAAA;EACAA,CAAC,IAAIA,CAAC,IAAI,EAAV,CAAA;EACA,OAAOA,CAAC,GAAG,CAAX,CAAA;AACD,CAAA;AAED;AACA;AACA;AACA;AACA;;;AACO,MAAME,aAAN,CAAoB;AACzB;;AAEA;;AAEA;;AAEA;;AAEA;EAGA5b,WAAW,CACT6b,aADS,EAETC,wBAFS,EAGTC,MAHS,EAITC,gBAJS,EAKTC,eALS,EAMT;AAAA,IAAA,IAAA,CAhBKJ,aAgBL,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAdKC,wBAcL,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAZKC,MAYL,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAVKC,gBAUL,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARKC,eAQL,GAAA,KAAA,CAAA,CAAA;IACA,IAAKJ,CAAAA,aAAL,GAAqBA,aAArB,CAAA;IACA,IAAKC,CAAAA,wBAAL,GAAgCA,wBAAhC,CAAA;IACA,IAAKC,CAAAA,MAAL,GAAcA,MAAd,CAAA;IACA,IAAKC,CAAAA,gBAAL,GAAwBA,gBAAxB,CAAA;IACA,IAAKC,CAAAA,eAAL,GAAuBA,eAAvB,CAAA;AACD,GAAA;;EAEDC,QAAQ,CAACC,IAAD,EAAuB;AAC7B,IAAA,OAAO,KAAKC,oBAAL,CAA0BD,IAA1B,CAAA,CAAgC,CAAhC,CAAP,CAAA;AACD,GAAA;;EAEDC,oBAAoB,CAACD,IAAD,EAAiC;AACnD,IAAA,IAAIA,IAAI,GAAG,IAAKF,CAAAA,eAAhB,EAAiC;AAC/B,MAAA,MAAMI,KAAK,GACTZ,aAAa,CAACE,cAAc,CAACQ,IAAI,GAAGX,sBAAP,GAAgC,CAAjC,CAAf,CAAb,GACAC,aAAa,CAACD,sBAAD,CADb,GAEA,CAHF,CAAA;AAKA,MAAA,MAAMc,QAAQ,GAAG,IAAA,CAAKC,eAAL,CAAqBF,KAArB,CAAjB,CAAA;AACA,MAAA,MAAMG,SAAS,GAAGL,IAAI,IAAIG,QAAQ,GAAGd,sBAAf,CAAtB,CAAA;AACA,MAAA,OAAO,CAACa,KAAD,EAAQG,SAAR,CAAP,CAAA;AACD,KATD,MASO;AACL,MAAA,MAAMC,eAAe,GAAGN,IAAI,GAAG,KAAKF,eAApC,CAAA;MACA,MAAMS,gBAAgB,GAAG5D,IAAI,CAAC6D,KAAL,CAAWF,eAAe,GAAG,IAAKZ,CAAAA,aAAlC,CAAzB,CAAA;AACA,MAAA,MAAMQ,KAAK,GAAG,IAAKL,CAAAA,gBAAL,GAAwBU,gBAAtC,CAAA;AACA,MAAA,MAAMF,SAAS,GAAGC,eAAe,GAAG,KAAKZ,aAAzC,CAAA;AACA,MAAA,OAAO,CAACQ,KAAD,EAAQG,SAAR,CAAP,CAAA;AACD,KAAA;AACF,GAAA;;EAEDI,mBAAmB,CAACP,KAAD,EAAwB;AACzC,IAAA,IAAIA,KAAK,IAAI,IAAKL,CAAAA,gBAAlB,EAAoC;MAClC,OAAO,CAAClD,IAAI,CAAC+D,GAAL,CAAS,CAAT,EAAYR,KAAZ,CAAA,GAAqB,CAAtB,IAA2Bb,sBAAlC,CAAA;AACD,KAFD,MAEO;MACL,OACE,CAACa,KAAK,GAAG,IAAKL,CAAAA,gBAAd,IAAkC,IAAKH,CAAAA,aAAvC,GACA,IAAA,CAAKI,eAFP,CAAA;AAID,KAAA;AACF,GAAA;;EAEDa,kBAAkB,CAACT,KAAD,EAAwB;IACxC,OAAO,IAAA,CAAKO,mBAAL,CAAyBP,KAAzB,CAAA,GAAkC,IAAKE,CAAAA,eAAL,CAAqBF,KAArB,CAAlC,GAAgE,CAAvE,CAAA;AACD,GAAA;;EAEDE,eAAe,CAACF,KAAD,EAAgB;AAC7B,IAAA,IAAIA,KAAK,GAAG,IAAKL,CAAAA,gBAAjB,EAAmC;AACjC,MAAA,OAAOlD,IAAI,CAAC+D,GAAL,CAAS,CAAT,EAAYR,KAAK,GAAGZ,aAAa,CAACD,sBAAD,CAAjC,CAAP,CAAA;AACD,KAFD,MAEO;AACL,MAAA,OAAO,KAAKK,aAAZ,CAAA;AACD,KAAA;AACF,GAAA;;AAtEwB;;AC9BpB,MAAMkB,oBAAN,SAAmC/b,KAAnC,CAAyC;AAG9ChB,EAAAA,WAAW,CAACZ,OAAD,EAAkB4d,IAAlB,EAAmC;AAC5C,IAAA,KAAA,CAAM5d,OAAN,CAAA,CAAA;AAD4C,IAAA,IAAA,CAF9C4d,IAE8C,GAAA,KAAA,CAAA,CAAA;IAG5C,IAAKA,CAAAA,IAAL,GAAYA,IAAZ,CAAA;AACD,GAAA;;AAP6C;AAWhD;;AACO,MAAMC,sBAAsB,GAAG;EACpCC,sCAAsC,EAAE,CAAC,KADL;EAEpCC,wDAAwD,EAAE,CAAC,KAFvB;EAGpCC,gEAAgE,EAAE,CAAC,KAH/B;EAIpCC,yCAAyC,EAAE,CAAC,KAJR;EAKpCC,oCAAoC,EAAE,CAAC,KALH;EAMpCC,iEAAiE,EAAE,CAAC,KANhC;EAOpCC,kCAAkC,EAAE,CAAC,KAPD;EAQpCC,iCAAiC,EAAE,CAAC,KARA;EASpCC,oDAAoD,EAAE,CAAC,KATnB;EAUpCC,uDAAuD,EAAE,CAAC,KAVtB;EAWpCC,uDAAuD,EAAE,CAAC,KAXtB;EAYpCC,mBAAmB,EAAE,CAAC,KAZc;EAapCC,wDAAwD,EAAE,CAAC,KAbvB;EAcpCC,oDAAoD,EAAE,CAAC,KAdnB;EAepCC,qDAAqD,EAAE,CAAC,KAfpB;AAgBpCC,EAAAA,kDAAkD,EAAE,CAAC,KAAA;AAhBjB,EAA/B;AAqBA,MAAMC,kBAAN,SAAiCld,KAAjC,CAAuC;AAG5ChB,EAAAA,WAAW,CACT;IACEme,IADF;IAEE/e,OAFF;AAGEoB,IAAAA,IAAAA;GAJO,EAMT4d,aANS,EAOT;IACA,KAAMA,CAAAA,aAAa,IAAI,IAAjB,GAAyB,CAAA,EAAEA,aAAc,CAAIhf,EAAAA,EAAAA,OAAQ,CAArD,CAAA,GAAyDA,OAA/D,CAAA,CAAA;AADA,IAAA,IAAA,CATF+e,IASE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARF3d,IAQE,GAAA,KAAA,CAAA,CAAA;IAEA,IAAK2d,CAAAA,IAAL,GAAYA,IAAZ,CAAA;IACA,IAAK3d,CAAAA,IAAL,GAAYA,IAAZ,CAAA;IACA,IAAK6d,CAAAA,IAAL,GAAY,oBAAZ,CAAA;AACD,GAAA;;AAf2C;;AC9B/B,wBACbC,EAAAA,KADa,EAEbC,IAFa,EAGgB;EAC7B,MAAMC,cAAc,GAClB,OAAOF,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACjf,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAsB,KAAA,IAAnD,GACI,QAAWif,GAAAA,KADf,GAEIA,KAHN,CAAA;EAIA,OAAO,MAAMG,oBAAS,CAAC5a,OAAV,CAAkB2a,cAAlB,EAAkCD,IAAlC,CAAb,CAAA;AACD;;ACZD;AACA;;AAEA;AACA;AACA;AACO,MAAMG,oBAAoB,GAAG,GAA7B,CAAA;AAEP;AACA;AACA;;AACO,MAAMC,sBAAsB,GAAG,EAA/B,CAAA;AAEP;AACA;AACA;;AACO,MAAMC,oBAAoB,GAC/BF,oBAAoB,GAAGC,sBADlB,CAAA;AAGP;AACA;AACA;;AACO,MAAME,WAAW,GAAG,IAAA,GAAOD,oBAA3B;;AChBP;AACA;AACA;;AAQA;AACA;AACA;AACA;AACO,SAAS9K,UAAT,CACL1N,IADK,EAEL5F,IAFK,EAGc;AACnB,EAAA,IAAImB,OAAJ,CAAA;;EACA,IAAI;IACFA,OAAO,GAAGyE,IAAI,CAACO,MAAL,CAAYpG,MAAZ,CAAmBC,IAAnB,CAAV,CAAA;GADF,CAEE,OAAOiD,GAAP,EAAY;AACZ,IAAA,MAAM,IAAIzC,KAAJ,CAAU,uBAAA,GAA0ByC,GAApC,CAAN,CAAA;AACD,GAAA;;AAED,EAAA,IAAI9B,OAAO,CAACwT,SAAR,KAAsB/O,IAAI,CAACkC,KAA/B,EAAsC;AACpC,IAAA,MAAM,IAAItH,KAAJ,CACH,CAAA,4CAAA,EAA8CW,OAAO,CAACwT,SAAU,CAAA,IAAA,EAAM/O,IAAI,CAACkC,KAAM,CAAA,CAD9E,CAAN,CAAA;AAGD,GAAA;;AAED,EAAA,OAAO3G,OAAP,CAAA;AACD;;ACjBD;AACA,MAAMmd,sBAAsB,GAAG,EAA/B,CAAA;AAEO,MAAMC,yBAAN,CAAgC;EAIrC/e,WAAW,CAACsH,IAAD,EAAsC;AAAA,IAAA,IAAA,CAHjDpG,GAGiD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAFjD8d,KAEiD,GAAA,KAAA,CAAA,CAAA;AAC/C,IAAA,IAAA,CAAK9d,GAAL,GAAWoG,IAAI,CAACpG,GAAhB,CAAA;AACA,IAAA,IAAA,CAAK8d,KAAL,GAAa1X,IAAI,CAAC0X,KAAlB,CAAA;AACD,GAAA;;AAEDC,EAAAA,QAAQ,GAAY;AAClB,IAAA,MAAMC,OAAO,GAAG,EAAM,IAAA,GAAN,GAAY,EAA5B,CAAA;AACA,IAAA,OAAO,IAAKF,CAAAA,KAAL,CAAWG,gBAAX,KAAgCD,OAAvC,CAAA;AACD,GAAA;;EAEiB,OAAXze,WAAW,CAAC2e,WAAD,EAAmD;AACnE,IAAA,MAAM7P,IAAI,GAAGuE,UAAU,CAACuL,qBAAD,EAAwBD,WAAxB,CAAvB,CAAA;AAEA,IAAA,MAAME,sBAAsB,GAAGF,WAAW,CAACre,MAAZ,GAAqB+d,sBAApD,CAAA;AACA1S,IAAAA,MAAM,CAACkT,sBAAsB,IAAI,CAA3B,EAA8B,yBAA9B,CAAN,CAAA;IACAlT,MAAM,CAACkT,sBAAsB,GAAG,EAAzB,KAAgC,CAAjC,EAAoC,yBAApC,CAAN,CAAA;AAEA,IAAA,MAAMC,sBAAsB,GAAGD,sBAAsB,GAAG,EAAxD,CAAA;IACA,MAAM;AAACE,MAAAA,SAAAA;AAAD,KAAA,GAAcxa,uBAAY,CAACI,MAAb,CAAoD,CACtEJ,uBAAY,CAAC8E,GAAb,CAAiBE,SAAA,EAAjB,EAAqCuV,sBAArC,EAA6D,WAA7D,CADsE,CAApD,CAAA,CAEjBhf,MAFiB,CAEV6e,WAAW,CAAC/f,KAAZ,CAAkByf,sBAAlB,CAFU,CAApB,CAAA;IAIA,OAAO;MACLK,gBAAgB,EAAE5P,IAAI,CAAC4P,gBADlB;MAELM,gBAAgB,EAAElQ,IAAI,CAACkQ,gBAFlB;MAGLC,0BAA0B,EAAEnQ,IAAI,CAACoQ,sBAH5B;MAILC,SAAS,EACPrQ,IAAI,CAACqQ,SAAL,CAAe7e,MAAf,KAA0B,CAA1B,GACI,IAAIW,SAAJ,CAAc6N,IAAI,CAACqQ,SAAL,CAAe,CAAf,CAAd,CADJ,GAEIne,SAPD;MAQL+d,SAAS,EAAEA,SAAS,CAACve,GAAV,CAAcsC,OAAO,IAAI,IAAI7B,SAAJ,CAAc6B,OAAd,CAAzB,CAAA;KARb,CAAA;AAUD,GAAA;;AApCoC,CAAA;AAuCvC,MAAM8b,qBAAqB,GAAG;AAC5B/W,EAAAA,KAAK,EAAE,CADqB;AAE5B3B,EAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAML,CACDJ,uBAAY,CAACK,GAAb,CAAiB,WAAjB,CADC,EAEDyP,GAAG,CAAC,kBAAD,CAFF,EAGD9P,uBAAY,CAACgP,IAAb,CAAkB,kBAAlB,CAHC,EAIDhP,uBAAY,CAACkB,EAAb,CAAgB,wBAAhB,CAJC,EAKDlB,uBAAY,CAACkB,EAAb,EALC;EAMDlB,uBAAY,CAAC8E,GAAb,CACEE,SAAA,EADF,EAEEhF,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACkB,EAAb,EAApB,EAAuC,CAAC,CAAxC,CAFF,EAGE,WAHF,CANC,CANK,CAAA;AAFoB,CAA9B;;AC/DA,MAAM2Z,MAAM,GAAG,4CAAf,CAAA;AAEO,SAASC,gBAAT,CAA0BC,QAA1B,EAA4C;AACjD,EAAA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAT,CAAeJ,MAAf,CAAhB,CAAA;;EACA,IAAIG,OAAO,IAAI,IAAf,EAAqB;AACnB,IAAA,MAAM7c,SAAS,CAAE,CAAoC4c,kCAAAA,EAAAA,QAAS,IAA/C,CAAf,CAAA;AACD,GAAA;;EACD,MAAM,CACJ9W,CADI;AAEJiX,EAAAA,OAFI,EAGJC,aAHI,EAIJC,IAJI,IAKFJ,OALJ,CAAA;EAMA,MAAMK,QAAQ,GAAGN,QAAQ,CAACO,UAAT,CAAoB,QAApB,CAAA,GAAgC,MAAhC,GAAyC,KAA1D,CAAA;AACA,EAAA,MAAMC,SAAS,GACbJ,aAAa,IAAI,IAAjB,GAAwB,IAAxB,GAA+BK,QAAQ,CAACL,aAAa,CAAC9gB,KAAd,CAAoB,CAApB,CAAD,EAAyB,EAAzB,CADzC,CAAA;AAEA,EAAA,MAAMohB,aAAa;AAEjB;AACA;AACA;AACA;AACA;EACAF,SAAS,IAAI,IAAb,GAAoB,EAApB,GAA0B,CAAGA,CAAAA,EAAAA,SAAS,GAAG,CAAE,CAP7C,CAAA,CAAA;EAQA,OAAQ,CAAA,EAAEF,QAAS,CAAIH,EAAAA,EAAAA,OAAQ,GAAEO,aAAc,CAAA,EAAEL,IAAK,CAAtD,CAAA,CAAA;AACD;;;AC6BD,MAAMM,mBAAmB,GAAGC,kBAAM,CAChCC,oBAAQ,CAAClf,SAAD,CADwB,EAEhCmf,kBAAM,EAF0B,EAGhCtf,KAAK,IAAI,IAAIG,SAAJ,CAAcH,KAAd,CAHuB,CAAlC,CAAA;AAMA,MAAMuf,oBAAoB,GAAGC,iBAAK,CAAC,CAACF,kBAAM,EAAP,EAAWG,mBAAO,CAAC,QAAD,CAAlB,CAAD,CAAlC,CAAA;AAEA,MAAMC,wBAAwB,GAAGN,kBAAM,CACrCC,oBAAQ,CAACnhB,aAAD,CAD6B,EAErCqhB,oBAFqC,EAGrCvf,KAAK,IAAI9B,aAAM,CAACE,IAAP,CAAY4B,KAAK,CAAC,CAAD,CAAjB,EAAsB,QAAtB,CAH4B,CAAvC,CAAA;AAMA;AACA;AACA;AACA;;AACa2f,MAAAA,0BAA0B,GAAG,EAAA,GAAK,KAAxC;AAEP;AACA;AACA;AACA;AACA;AACA;;AAuOA;AACA,SAASC,iBAAT,CAA2BC,WAA3B,EAAgD;AAC9C,EAAA,IAAI,WAAWC,IAAX,CAAgBD,WAAhB,CAAA,KAAiC,KAArC,EAA4C;AAC1C,IAAA,MAAM,IAAIje,SAAJ,CAAc,mDAAd,CAAN,CAAA;AACD,GAAA;;AACD,EAAA,OAAOie,WAAP,CAAA;AACD,CAAA;AAED;;;AACA,SAASE,2BAAT,CACEC,kBADF,EAEE;AACA,EAAA,IAAIvO,UAAJ,CAAA;AACA,EAAA,IAAIjC,MAAJ,CAAA;;AACA,EAAA,IAAI,OAAOwQ,kBAAP,KAA8B,QAAlC,EAA4C;AAC1CvO,IAAAA,UAAU,GAAGuO,kBAAb,CAAA;GADF,MAEO,IAAIA,kBAAJ,EAAwB;IAC7B,MAAM;AAACvO,MAAAA,UAAU,EAAEwO,mBAAb;MAAkC,GAAGC,eAAAA;AAArC,KAAA,GACJF,kBADF,CAAA;AAEAvO,IAAAA,UAAU,GAAGwO,mBAAb,CAAA;AACAzQ,IAAAA,MAAM,GAAG0Q,eAAT,CAAA;AACD,GAAA;;EACD,OAAO;IAACzO,UAAD;AAAajC,IAAAA,MAAAA;GAApB,CAAA;AACD,CAAA;AAED;AACA;AACA;;;AACA,SAAS2Q,eAAT,CAA+BC,MAA/B,EAAqD;AACnD,EAAA,OAAOC,iBAAK,CAAC,CACXC,gBAAI,CAAC;AACHC,IAAAA,OAAO,EAAEd,mBAAO,CAAC,KAAD,CADb;IAEHe,EAAE,EAAElB,kBAAM,EAFP;AAGHc,IAAAA,MAAAA;GAHE,CADO,EAMXE,gBAAI,CAAC;AACHC,IAAAA,OAAO,EAAEd,mBAAO,CAAC,KAAD,CADb;IAEHe,EAAE,EAAElB,kBAAM,EAFP;IAGHpH,KAAK,EAAEoI,gBAAI,CAAC;MACV1D,IAAI,EAAE6D,mBAAO,EADH;MAEV5iB,OAAO,EAAEyhB,kBAAM,EAFL;AAGVrgB,MAAAA,IAAI,EAAEyhB,oBAAQ,CAACC,eAAG,EAAJ,CAAA;KAHL,CAAA;GAHT,CANO,CAAD,CAAZ,CAAA;AAgBD,CAAA;;AAED,MAAMC,gBAAgB,GAAGT,eAAe,CAACM,mBAAO,EAAR,CAAxC,CAAA;AAEA;AACA;AACA;;AACA,SAASI,aAAT,CAA6BC,MAA7B,EAAmD;EACjD,OAAO1B,kBAAM,CAACe,eAAe,CAACW,MAAD,CAAhB,EAA0BF,gBAA1B,EAA4C5gB,KAAK,IAAI;IAChE,IAAI,OAAA,IAAWA,KAAf,EAAsB;AACpB,MAAA,OAAOA,KAAP,CAAA;AACD,KAFD,MAEO;MACL,OAAO,EACL,GAAGA,KADE;AAELogB,QAAAA,MAAM,EAAEW,kBAAM,CAAC/gB,KAAK,CAACogB,MAAP,EAAeU,MAAf,CAAA;OAFhB,CAAA;AAID,KAAA;AACF,GATY,CAAb,CAAA;AAUD,CAAA;AAED;AACA;AACA;;;AACA,SAASE,uBAAT,CAAuChhB,KAAvC,EAA4D;EAC1D,OAAO6gB,aAAa,CAClBP,gBAAI,CAAC;IACHW,OAAO,EAAEX,gBAAI,CAAC;AACZ1F,MAAAA,IAAI,EAAEsG,kBAAM,EAAA;AADA,KAAD,CADV;AAIHlhB,IAAAA,KAAAA;AAJG,GAAD,CADc,CAApB,CAAA;AAQD,CAAA;AAED;AACA;AACA;;;AACA,SAASmhB,4BAAT,CAA4CnhB,KAA5C,EAAiE;AAC/D,EAAA,OAAOsgB,gBAAI,CAAC;IACVW,OAAO,EAAEX,gBAAI,CAAC;AACZ1F,MAAAA,IAAI,EAAEsG,kBAAM,EAAA;AADA,KAAD,CADH;AAIVlhB,IAAAA,KAAAA;AAJU,GAAD,CAAX,CAAA;AAMD,CAAA;AAED;AACA;AACA;;;AACA,SAASohB,4BAAT,CACE5a,OADF,EAEE6a,QAFF,EAGoB;EAClB,IAAI7a,OAAO,KAAK,CAAhB,EAAmB;IACjB,OAAO,IAAI0C,SAAJ,CAAc;MACnBlD,MAAM,EAAEqb,QAAQ,CAACrb,MADE;AAEnBS,MAAAA,iBAAiB,EAAE4a,QAAQ,CAACpb,WAAT,CAAqBvG,GAArB,CACjBiL,UAAU,IAAI,IAAIxK,SAAJ,CAAcwK,UAAd,CADG,CAFA;MAKnBzE,eAAe,EAAEmb,QAAQ,CAACnb,eALP;MAMnBQ,oBAAoB,EAAE2a,QAAQ,CAAClb,YAAT,CAAsBzG,GAAtB,CAA0B4G,EAAE,KAAK;QACrDC,cAAc,EAAED,EAAE,CAACC,cADkC;QAErDI,iBAAiB,EAAEL,EAAE,CAACM,QAF+B;AAGrD3H,QAAAA,IAAI,EAAEoB,wBAAI,CAACrB,MAAL,CAAYsH,EAAE,CAACrH,IAAf,CAAA;AAH+C,OAAL,CAA5B,CANH;MAWnB4H,mBAAmB,EAAEwa,QAAQ,CAACxa,mBAAAA;AAXX,KAAd,CAAP,CAAA;AAaD,GAdD,MAcO;AACL,IAAA,OAAO,IAAIf,OAAJ,CAAYub,QAAZ,CAAP,CAAA;AACD,GAAA;AACF,CAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAiPA,MAAMC,0BAA0B,GAAGhB,gBAAI,CAAC;EACtCiB,UAAU,EAAEL,kBAAM,EADoB;EAEtCM,cAAc,EAAEN,kBAAM,EAFgB;EAGtCO,OAAO,EAAEP,kBAAM,EAHuB;EAItCQ,KAAK,EAAER,kBAAM,EAJyB;AAKtCS,EAAAA,QAAQ,EAAET,kBAAM,EAAA;AALsB,CAAD,CAAvC,CAAA;AAQA;AACA;AACA;;AAYA;AACA;AACA;AACA,MAAMU,wBAAwB,GAAGf,aAAa,CAC5CxI,iBAAK,CACHwJ,oBAAQ,CACNvB,gBAAI,CAAC;EACHxF,KAAK,EAAEoG,kBAAM,EADV;EAEHY,aAAa,EAAEZ,kBAAM,EAFlB;EAGHa,MAAM,EAAEb,kBAAM,EAHX;AAIHc,EAAAA,WAAW,EAAEd,kBAAM,EAAA;AAJhB,CAAD,CADE,CADL,CADuC,CAA9C,CAAA;AAaA;AACA;AACA;;AAUA,MAAMe,kBAAkB,GAAG3B,gBAAI,CAAC;EAC9BxF,KAAK,EAAEoG,kBAAM,EADiB;EAE9BjG,SAAS,EAAEiG,kBAAM,EAFa;EAG9BgB,YAAY,EAAEhB,kBAAM,EAHU;EAI9BiB,YAAY,EAAEjB,kBAAM,EAJU;AAK9BkB,EAAAA,WAAW,EAAE1B,oBAAQ,CAACQ,kBAAM,EAAP,CALS;AAM9BmB,EAAAA,gBAAgB,EAAE3B,oBAAQ,CAACQ,kBAAM,EAAP,CAAA;AANI,CAAD,CAA/B,CAAA;AASA,MAAMoB,sBAAsB,GAAGhC,gBAAI,CAAC;EAClChG,aAAa,EAAE4G,kBAAM,EADa;EAElC3G,wBAAwB,EAAE2G,kBAAM,EAFE;EAGlC1G,MAAM,EAAE+H,mBAAO,EAHmB;EAIlC9H,gBAAgB,EAAEyG,kBAAM,EAJU;AAKlCxG,EAAAA,eAAe,EAAEwG,kBAAM,EAAA;AALW,CAAD,CAAnC,CAAA;AAQA;AACA;AACA;AACA;;AAKA,MAAMsB,uBAAuB,GAAGC,kBAAM,CAACnD,kBAAM,EAAP,EAAWjH,iBAAK,CAAC6I,kBAAM,EAAP,CAAhB,CAAtC,CAAA;AAEA;AACA;AACA;;AACA,MAAMwB,sBAAsB,GAAGb,oBAAQ,CAACxB,iBAAK,CAAC,CAACC,gBAAI,CAAC,EAAD,CAAL,EAAWhB,kBAAM,EAAjB,CAAD,CAAN,CAAvC,CAAA;AAEA;AACA;AACA;;AACA,MAAMqD,qBAAqB,GAAGrC,gBAAI,CAAC;AACjCpe,EAAAA,GAAG,EAAEwgB,sBAAAA;AAD4B,CAAD,CAAlC,CAAA;AAIA;AACA;AACA;;AACA,MAAME,uBAAuB,GAAGnD,mBAAO,CAAC,mBAAD,CAAvC,CAAA;AAEA;AACA;AACA;;AAOA,MAAMoD,aAAa,GAAGvC,gBAAI,CAAC;AACzB,EAAA,aAAA,EAAehB,kBAAM,EADI;EAEzB,aAAeoB,EAAAA,oBAAQ,CAACQ,kBAAM,EAAP,CAAA;AAFE,CAAD,CAA1B,CAAA;AAgCA,MAAM4B,kCAAkC,GAAG9B,uBAAuB,CAChEV,gBAAI,CAAC;AACHpe,EAAAA,GAAG,EAAE2f,oBAAQ,CAACxB,iBAAK,CAAC,CAACC,gBAAI,CAAC,EAAD,CAAL,EAAWhB,kBAAM,EAAjB,CAAD,CAAN,CADV;EAEH7D,IAAI,EAAEoG,oBAAQ,CAACxJ,iBAAK,CAACiH,kBAAM,EAAP,CAAN,CAFX;EAGH1Y,QAAQ,EAAE8Z,oBAAQ,CAChBmB,oBAAQ,CACNxJ,iBAAK,CACHwJ,oBAAQ,CACNvB,gBAAI,CAAC;IACHrI,UAAU,EAAEsK,mBAAO,EADhB;IAEHpK,KAAK,EAAEmH,kBAAM,EAFV;IAGHpL,QAAQ,EAAEgN,kBAAM,EAHb;AAIHjiB,IAAAA,IAAI,EAAEoZ,iBAAK,CAACiH,kBAAM,EAAP,CAJR;AAKHyD,IAAAA,SAAS,EAAErC,oBAAQ,CAACQ,kBAAM,EAAP,CAAA;AALhB,GAAD,CADE,CADL,CADC,CADQ,CAHf;AAkBH8B,EAAAA,aAAa,EAAEtC,oBAAQ,CAACQ,kBAAM,EAAP,CAlBpB;AAmBH+B,EAAAA,UAAU,EAAEvC,oBAAQ,CAClBmB,oBAAQ,CACNvB,gBAAI,CAAC;IACHjf,SAAS,EAAEie,kBAAM,EADd;IAEHrgB,IAAI,EAAEugB,iBAAK,CAAC,CAACF,kBAAM,EAAP,EAAWG,mBAAO,CAAC,QAAD,CAAlB,CAAD,CAAA;AAFR,GAAD,CADE,CADU,CAAA;AAnBjB,CAAD,CAD4D,CAAlE,CAAA;;AA4aA;AACA;AACA;AACA,MAAMyD,6BAA6B,GAAGlC,uBAAuB,CAC3DV,gBAAI,CAAC;EACH6C,UAAU,EAAEV,kBAAM,CAACnD,kBAAM,EAAP,EAAWjH,iBAAK,CAAC6I,kBAAM,EAAP,CAAhB,CADf;EAEHkC,KAAK,EAAE9C,gBAAI,CAAC;IACV+C,SAAS,EAAEnC,kBAAM,EADP;AAEVoC,IAAAA,QAAQ,EAAEpC,kBAAM,EAAA;GAFP,CAAA;AAFR,CAAD,CADuD,CAA7D,CAAA;AAUA;AACA;AACA;;AAYA,SAASqC,eAAT,CACEC,GADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,eAJF,EAKEC,uBALF,EAMa;AACX,EAAA,MAAMC,KAAK,GAAGH,WAAW,GAAGA,WAAH,GAAiBI,SAA1C,CAAA;AACA,EAAA,IAAIC,YAAJ,CAAA;;AACA,EAA0B;IACxBA,YAAY,GAAG,IAAI9K,YAAJ,CAAiBuK,GAAG,CAACzE,UAAJ,CAAe,QAAf,CAAA;AAAyB;KAAzD,CAAA;AACD,GAAA;;AAED,EAAA,IAAIiF,mBAAJ,CAAA;;AAEA,EAAA,IAAIL,eAAJ,EAAqB;AACnBK,IAAAA,mBAAmB,GAAG,OAAOC,IAAP,EAAajH,IAAb,KAAsB;MAC1C,MAAMkH,iBAAiB,GAAG,MAAM,IAAIjS,OAAJ,CAC9B,CAACC,OAAD,EAAUiS,MAAV,KAAqB;QACnB,IAAI;AACFR,UAAAA,eAAe,CAACM,IAAD,EAAOjH,IAAP,EAAa,CAACoH,YAAD,EAAeC,YAAf,KAC1BnS,OAAO,CAAC,CAACkS,YAAD,EAAeC,YAAf,CAAD,CADM,CAAf,CAAA;SADF,CAIE,OAAOnM,KAAP,EAAc;UACdiM,MAAM,CAACjM,KAAD,CAAN,CAAA;AACD,SAAA;AACF,OAT6B,CAAhC,CAAA;AAWA,MAAA,OAAO,MAAM2L,KAAK,CAAC,GAAGK,iBAAJ,CAAlB,CAAA;KAZF,CAAA;AAcD,GAAA;;EAED,MAAMI,aAAa,GAAG,IAAIC,6BAAJ,CAAc,OAAOC,OAAP,EAAgBC,QAAhB,KAA6B;IAC/D,MAAMC,KAAK,GAAGX,YAAY,GAAGA,YAAY,CAAClK,YAAb,EAAH,GAAiC3Z,SAA3D,CAAA;AACA,IAAA,MAAMmR,OAAO,GAAG;AACdsT,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,IAAI,EAAEJ,OAFQ;MAGdE,KAHc;AAIdG,MAAAA,OAAO,EAAElmB,MAAM,CAACC,MAAP,CACP;QACE,cAAgB,EAAA,kBAAA;AADlB,OADO,EAIP6kB,WAAW,IAAI,EAJR,EAKPqB,mBALO,CAAA;KAJX,CAAA;;IAaA,IAAI;MACF,IAAIC,yBAAyB,GAAG,CAAhC,CAAA;AACA,MAAA,IAAIC,GAAJ,CAAA;MACA,IAAIC,QAAQ,GAAG,GAAf,CAAA;;MACA,SAAS;AACP,QAAA,IAAIjB,mBAAJ,EAAyB;AACvBgB,UAAAA,GAAG,GAAG,MAAMhB,mBAAmB,CAACR,GAAD,EAAMnS,OAAN,CAA/B,CAAA;AACD,SAFD,MAEO;AACL2T,UAAAA,GAAG,GAAG,MAAMnB,KAAK,CAACL,GAAD,EAAMnS,OAAN,CAAjB,CAAA;AACD,SAAA;;QAED,IAAI2T,GAAG,CAACnT,MAAJ,KAAe,GAAA;AAAI;UAAyB;AAC9C,UAAA,MAAA;AACD,SAAA;;QACD,IAAI+R,uBAAuB,KAAK,IAAhC,EAAsC;AACpC,UAAA,MAAA;AACD,SAAA;;AACDmB,QAAAA,yBAAyB,IAAI,CAA7B,CAAA;;QACA,IAAIA,yBAAyB,KAAK,CAAlC,EAAqC;AACnC,UAAA,MAAA;AACD,SAAA;;AACDlY,QAAAA,OAAO,CAACqY,GAAR,CACG,CAAA,sBAAA,EAAwBF,GAAG,CAACnT,MAAO,CAAA,CAAA,EAAGmT,GAAG,CAACG,UAAW,CAAA,kBAAA,EAAoBF,QAAS,CADrF,WAAA,CAAA,CAAA,CAAA;QAGA,MAAMlT,KAAK,CAACkT,QAAD,CAAX,CAAA;AACAA,QAAAA,QAAQ,IAAI,CAAZ,CAAA;AACD,OAAA;;AAED,MAAA,MAAMG,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAJ,EAAnB,CAAA;;MACA,IAAIJ,GAAG,CAACK,EAAR,EAAY;AACVZ,QAAAA,QAAQ,CAAC,IAAD,EAAOW,IAAP,CAAR,CAAA;AACD,OAFD,MAEO;AACLX,QAAAA,QAAQ,CAAC,IAAIhlB,KAAJ,CAAW,CAAA,EAAEulB,GAAG,CAACnT,MAAO,CAAGmT,CAAAA,EAAAA,GAAG,CAACG,UAAW,CAAA,EAAA,EAAIC,IAAK,CAAA,CAAnD,CAAD,CAAR,CAAA;AACD,OAAA;KAjCH,CAkCE,OAAOljB,GAAP,EAAY;AACZ,MAAA,IAAIA,GAAG,YAAYzC,KAAnB,EAA0BglB,QAAQ,CAACviB,GAAD,CAAR,CAAA;AAC3B,KApCD,SAoCU;AACR6hB,MAAAA,YAAY,IAAIA,YAAY,CAAChK,UAAb,EAAhB,CAAA;AACD,KAAA;GArDmB,EAsDnB,EAtDmB,CAAtB,CAAA;AAwDA,EAAA,OAAOuK,aAAP,CAAA;AACD,CAAA;;AAED,SAASgB,gBAAT,CAA0BC,MAA1B,EAAyD;AACvD,EAAA,OAAO,CAACZ,MAAD,EAAS5e,IAAT,KAAkB;AACvB,IAAA,OAAO,IAAIkM,OAAJ,CAAY,CAACC,OAAD,EAAUiS,MAAV,KAAqB;MACtCoB,MAAM,CAACf,OAAP,CAAeG,MAAf,EAAuB5e,IAAvB,EAA6B,CAAC7D,GAAD,EAAWmf,QAAX,KAA6B;AACxD,QAAA,IAAInf,GAAJ,EAAS;UACPiiB,MAAM,CAACjiB,GAAD,CAAN,CAAA;AACA,UAAA,OAAA;AACD,SAAA;;QACDgQ,OAAO,CAACmP,QAAD,CAAP,CAAA;OALF,CAAA,CAAA;AAOD,KARM,CAAP,CAAA;GADF,CAAA;AAWD,CAAA;;AAED,SAASmE,qBAAT,CAA+BD,MAA/B,EAAmE;AACjE,EAAA,OAAQE,QAAD,IAA2B;AAChC,IAAA,OAAO,IAAIxT,OAAJ,CAAY,CAACC,OAAD,EAAUiS,MAAV,KAAqB;AACtC;MACA,IAAIsB,QAAQ,CAACjmB,MAAT,KAAoB,CAAxB,EAA2B0S,OAAO,CAAC,EAAD,CAAP,CAAA;AAE3B,MAAA,MAAMwT,KAAK,GAAGD,QAAQ,CAAC/lB,GAAT,CAAc8W,MAAD,IAAuB;QAChD,OAAO+O,MAAM,CAACf,OAAP,CAAehO,MAAM,CAACmP,UAAtB,EAAkCnP,MAAM,CAACzQ,IAAzC,CAAP,CAAA;AACD,OAFa,CAAd,CAAA;MAIAwf,MAAM,CAACf,OAAP,CAAekB,KAAf,EAAsB,CAACxjB,GAAD,EAAWmf,QAAX,KAA6B;AACjD,QAAA,IAAInf,GAAJ,EAAS;UACPiiB,MAAM,CAACjiB,GAAD,CAAN,CAAA;AACA,UAAA,OAAA;AACD,SAAA;;QACDgQ,OAAO,CAACmP,QAAD,CAAP,CAAA;OALF,CAAA,CAAA;AAOD,KAfM,CAAP,CAAA;GADF,CAAA;AAkBD,CAAA;AAED;AACA;AACA;;;AACA,MAAMuE,6BAA6B,GAAG/E,aAAa,CAACS,0BAAD,CAAnD,CAAA;AAEA;AACA;AACA;;AACA,MAAMuE,qBAAqB,GAAGhF,aAAa,CAACoB,kBAAD,CAA3C,CAAA;AAEA;AACA;AACA;;AACA,MAAM6D,yBAAyB,GAAGjF,aAAa,CAACyB,sBAAD,CAA/C,CAAA;AAEA;AACA;AACA;;AACA,MAAMyD,0BAA0B,GAAGlF,aAAa,CAAC2B,uBAAD,CAAhD,CAAA;AAEA;AACA;AACA;;AACA,MAAMwD,aAAa,GAAGnF,aAAa,CAACK,kBAAM,EAAP,CAAnC,CAAA;AAEA;AACA;AACA;;AAYA;AACA;AACA;AACA,MAAM+E,kBAAkB,GAAGjF,uBAAuB,CAChDV,gBAAI,CAAC;EACH4F,KAAK,EAAEhF,kBAAM,EADV;EAEHiF,WAAW,EAAEjF,kBAAM,EAFhB;EAGHkF,cAAc,EAAElF,kBAAM,EAHnB;EAIHmF,sBAAsB,EAAEhO,iBAAK,CAAC8G,mBAAD,CAAA;AAJ1B,CAAD,CAD4C,CAAlD,CAAA;AASA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA,MAAMmH,iBAAiB,GAAGhG,gBAAI,CAAC;EAC7ByB,MAAM,EAAEzC,kBAAM,EADe;AAE7BiH,EAAAA,QAAQ,EAAE1E,oBAAQ,CAACX,kBAAM,EAAP,CAFW;EAG7BsF,QAAQ,EAAEtF,kBAAM,EAHa;AAI7BuF,EAAAA,cAAc,EAAE/F,oBAAQ,CAACpB,kBAAM,EAAP,CAAA;AAJK,CAAD,CAA9B,CAAA;AAOA;AACA;AACA;;AAcA;AACA;AACA;AACA,MAAMoH,6BAA6B,GAAG1F,uBAAuB,CAC3D3I,iBAAK,CACHiI,gBAAI,CAAC;AACHte,EAAAA,OAAO,EAAEmd,mBADN;EAEH4C,MAAM,EAAEzC,kBAAM,EAFX;AAGHiH,EAAAA,QAAQ,EAAE1E,oBAAQ,CAACX,kBAAM,EAAP,CAHf;EAIHsF,QAAQ,EAAEtF,kBAAM,EAJb;AAKHuF,EAAAA,cAAc,EAAE/F,oBAAQ,CAACpB,kBAAM,EAAP,CAAA;AALrB,CAAD,CADD,CADsD,CAA7D,CAAA;AAYA;AACA;AACA;;AACA,MAAMqH,uBAAuB,GAAG3F,uBAAuB,CACrD3I,iBAAK,CACHiI,gBAAI,CAAC;AACHje,EAAAA,MAAM,EAAE8c,mBADL;EAEH9Y,OAAO,EAAEia,gBAAI,CAAC;IACZrI,UAAU,EAAEsK,mBAAO,EADP;AAEZpK,IAAAA,KAAK,EAAEgH,mBAFK;IAGZjL,QAAQ,EAAEgN,kBAAM,EAHJ;AAIZjiB,IAAAA,IAAI,EAAEygB,wBAJM;AAKZqD,IAAAA,SAAS,EAAE7B,kBAAM,EAAA;GALN,CAAA;AAFV,CAAD,CADD,CADgD,CAAvD,CAAA;AAeA,MAAM0F,uBAAuB,GAAGtG,gBAAI,CAAC;EACnC1I,OAAO,EAAE0H,kBAAM,EADoB;EAEnCuH,MAAM,EAAEpG,mBAAO,EAFoB;AAGnCtM,EAAAA,KAAK,EAAE+M,kBAAM,EAAA;AAHsB,CAAD,CAApC,CAAA;AAMA;AACA;AACA;;AACA,MAAM4F,6BAA6B,GAAG9F,uBAAuB,CAC3D3I,iBAAK,CACHiI,gBAAI,CAAC;AACHje,EAAAA,MAAM,EAAE8c,mBADL;EAEH9Y,OAAO,EAAEia,gBAAI,CAAC;IACZrI,UAAU,EAAEsK,mBAAO,EADP;AAEZpK,IAAAA,KAAK,EAAEgH,mBAFK;IAGZjL,QAAQ,EAAEgN,kBAAM,EAHJ;AAIZjiB,IAAAA,IAAI,EAAE2nB,uBAJM;AAKZ7D,IAAAA,SAAS,EAAE7B,kBAAM,EAAA;GALN,CAAA;AAFV,CAAD,CADD,CADsD,CAA7D,CAAA;AAeA;AACA;AACA;;AAMA;AACA;AACA;AACA,MAAM6F,2BAA2B,GAAG/F,uBAAuB,CACzD3I,iBAAK,CACHiI,gBAAI,CAAC;EACHpM,QAAQ,EAAEgN,kBAAM,EADb;AAEHlf,EAAAA,OAAO,EAAEmd,mBAAAA;AAFN,CAAD,CADD,CADoD,CAA3D,CAAA;AASA;AACA;AACA;;AACA,MAAM6H,iBAAiB,GAAG1G,gBAAI,CAAC;EAC7BrI,UAAU,EAAEsK,mBAAO,EADU;AAE7BpK,EAAAA,KAAK,EAAEgH,mBAFsB;EAG7BjL,QAAQ,EAAEgN,kBAAM,EAHa;AAI7BjiB,EAAAA,IAAI,EAAEygB,wBAJuB;AAK7BqD,EAAAA,SAAS,EAAE7B,kBAAM,EAAA;AALY,CAAD,CAA9B,CAAA;AAQA;AACA;AACA;;AACA,MAAM+F,sBAAsB,GAAG3G,gBAAI,CAAC;AAClCje,EAAAA,MAAM,EAAE8c,mBAD0B;AAElC9Y,EAAAA,OAAO,EAAE2gB,iBAAAA;AAFyB,CAAD,CAAnC,CAAA;AAKA,MAAME,sBAAsB,GAAG9H,kBAAM,CACnCiB,iBAAK,CAAC,CAAChB,oBAAQ,CAACnhB,aAAD,CAAT,EAAmB0oB,uBAAnB,CAAD,CAD8B,EAEnCvG,iBAAK,CAAC,CAACd,oBAAD,EAAuBqH,uBAAvB,CAAD,CAF8B,EAGnC5mB,KAAK,IAAI;AACP,EAAA,IAAIiF,KAAK,CAACC,OAAN,CAAclF,KAAd,CAAJ,EAA0B;AACxB,IAAA,OAAO+gB,kBAAM,CAAC/gB,KAAD,EAAQ0f,wBAAR,CAAb,CAAA;AACD,GAFD,MAEO;AACL,IAAA,OAAO1f,KAAP,CAAA;AACD,GAAA;AACF,CATkC,CAArC,CAAA;AAYA;AACA;AACA;;AACA,MAAMmnB,uBAAuB,GAAG7G,gBAAI,CAAC;EACnCrI,UAAU,EAAEsK,mBAAO,EADgB;AAEnCpK,EAAAA,KAAK,EAAEgH,mBAF4B;EAGnCjL,QAAQ,EAAEgN,kBAAM,EAHmB;AAInCjiB,EAAAA,IAAI,EAAEioB,sBAJ6B;AAKnCnE,EAAAA,SAAS,EAAE7B,kBAAM,EAAA;AALkB,CAAD,CAApC,CAAA;AAQA,MAAMkG,4BAA4B,GAAG9G,gBAAI,CAAC;AACxCje,EAAAA,MAAM,EAAE8c,mBADgC;AAExC9Y,EAAAA,OAAO,EAAE8gB,uBAAAA;AAF+B,CAAD,CAAzC,CAAA;AAKA;AACA;AACA;;AACA,MAAME,qBAAqB,GAAG/G,gBAAI,CAAC;EACjC7C,KAAK,EAAE4C,iBAAK,CAAC,CACXZ,mBAAO,CAAC,QAAD,CADI,EAEXA,mBAAO,CAAC,UAAD,CAFI,EAGXA,mBAAO,CAAC,YAAD,CAHI,EAIXA,mBAAO,CAAC,cAAD,CAJI,CAAD,CADqB;EAOjC6H,MAAM,EAAEpG,kBAAM,EAPmB;AAQjCqG,EAAAA,QAAQ,EAAErG,kBAAM,EAAA;AARiB,CAAD,CAAlC,CAAA;AAWA;AACA;AACA;;AAEA,MAAMsG,0CAA0C,GAAG3G,aAAa,CAC9DxI,iBAAK,CACHiI,gBAAI,CAAC;EACHpd,SAAS,EAAEoc,kBAAM,EADd;EAEH1E,IAAI,EAAEsG,kBAAM,EAFT;AAGHhf,EAAAA,GAAG,EAAEwgB,sBAHF;AAIH+E,EAAAA,IAAI,EAAE5F,oBAAQ,CAACvC,kBAAM,EAAP,CAJX;AAKHoI,EAAAA,SAAS,EAAEhH,oBAAQ,CAACmB,oBAAQ,CAACX,kBAAM,EAAP,CAAT,CAAA;AALhB,CAAD,CADD,CADyD,CAAhE,CAAA;AAYA;AACA;AACA;;AACA,MAAMyG,gCAAgC,GAAG9G,aAAa,CACpDxI,iBAAK,CACHiI,gBAAI,CAAC;EACHpd,SAAS,EAAEoc,kBAAM,EADd;EAEH1E,IAAI,EAAEsG,kBAAM,EAFT;AAGHhf,EAAAA,GAAG,EAAEwgB,sBAHF;AAIH+E,EAAAA,IAAI,EAAE5F,oBAAQ,CAACvC,kBAAM,EAAP,CAJX;AAKHoI,EAAAA,SAAS,EAAEhH,oBAAQ,CAACmB,oBAAQ,CAACX,kBAAM,EAAP,CAAT,CAAA;AALhB,CAAD,CADD,CAD+C,CAAtD,CAAA;AAYA;AACA;AACA;;AACA,MAAM0G,yBAAyB,GAAGtH,gBAAI,CAAC;EACrCuH,YAAY,EAAE3G,kBAAM,EADiB;EAErCd,MAAM,EAAEe,4BAA4B,CAAC6F,iBAAD,CAAA;AAFC,CAAD,CAAtC,CAAA;AAKA;AACA;AACA;;AACA,MAAMc,wBAAwB,GAAGxH,gBAAI,CAAC;AACpCje,EAAAA,MAAM,EAAE8c,mBAD4B;AAEpC9Y,EAAAA,OAAO,EAAE2gB,iBAAAA;AAF2B,CAAD,CAArC,CAAA;AAKA;AACA;AACA;;AACA,MAAMe,gCAAgC,GAAGzH,gBAAI,CAAC;EAC5CuH,YAAY,EAAE3G,kBAAM,EADwB;EAE5Cd,MAAM,EAAEe,4BAA4B,CAAC2G,wBAAD,CAAA;AAFQ,CAAD,CAA7C,CAAA;AAKA;AACA;AACA;;AACA,MAAME,cAAc,GAAG1H,gBAAI,CAAC;EAC1B2H,MAAM,EAAE/G,kBAAM,EADY;EAE1BtG,IAAI,EAAEsG,kBAAM,EAFc;AAG1BgH,EAAAA,IAAI,EAAEhH,kBAAM,EAAA;AAHc,CAAD,CAA3B,CAAA;AAMA;AACA;AACA;;AACA,MAAMiH,sBAAsB,GAAG7H,gBAAI,CAAC;EAClCuH,YAAY,EAAE3G,kBAAM,EADc;AAElCd,EAAAA,MAAM,EAAE4H,cAAAA;AAF0B,CAAD,CAAnC,CAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AACA;AACA;AACA,MAAMI,gBAAgB,GAAG/H,iBAAK,CAAC,CAC7BC,gBAAI,CAAC;EACHzb,IAAI,EAAEwb,iBAAK,CAAC,CACVZ,mBAAO,CAAC,oBAAD,CADG,EAEVA,mBAAO,CAAC,WAAD,CAFG,EAGVA,mBAAO,CAAC,wBAAD,CAHG,EAIVA,mBAAO,CAAC,MAAD,CAJG,CAAD,CADR;EAOH7E,IAAI,EAAEsG,kBAAM,EAPT;AAQHmH,EAAAA,SAAS,EAAEnH,kBAAM,EAAA;AARd,CAAD,CADyB,EAW7BZ,gBAAI,CAAC;AACHzb,EAAAA,IAAI,EAAE4a,mBAAO,CAAC,aAAD,CADV;EAEHwI,MAAM,EAAE/G,kBAAM,EAFX;EAGHtG,IAAI,EAAEsG,kBAAM,EAHT;AAIHmH,EAAAA,SAAS,EAAEnH,kBAAM,EAAA;AAJd,CAAD,CAXyB,EAiB7BZ,gBAAI,CAAC;AACHzb,EAAAA,IAAI,EAAE4a,mBAAO,CAAC,QAAD,CADV;EAEH7E,IAAI,EAAEsG,kBAAM,EAFT;EAGHmH,SAAS,EAAEnH,kBAAM,EAHd;EAIHoH,KAAK,EAAEhI,gBAAI,CAAC;IACViI,qBAAqB,EAAErH,kBAAM,EADnB;IAEVsH,yBAAyB,EAAEtH,kBAAM,EAFvB;IAGVuH,qBAAqB,EAAEvH,kBAAM,EAHnB;AAIVwH,IAAAA,uBAAuB,EAAExH,kBAAM,EAAA;GAJtB,CAAA;AAJR,CAAD,CAjByB,EA4B7BZ,gBAAI,CAAC;AACHzb,EAAAA,IAAI,EAAE4a,mBAAO,CAAC,MAAD,CADV;EAEH7E,IAAI,EAAEsG,kBAAM,EAFT;EAGHmH,SAAS,EAAEnH,kBAAM,EAHd;AAIHhf,EAAAA,GAAG,EAAEod,kBAAM,EAAA;AAJR,CAAD,CA5ByB,CAAD,CAA9B,CAAA;AAoCA;AACA;AACA;;AACA,MAAMqJ,4BAA4B,GAAGrI,gBAAI,CAAC;EACxCuH,YAAY,EAAE3G,kBAAM,EADoB;AAExCd,EAAAA,MAAM,EAAEgI,gBAAAA;AAFgC,CAAD,CAAzC,CAAA;AAKA;AACA;AACA;;AACA,MAAMQ,2BAA2B,GAAGtI,gBAAI,CAAC;EACvCuH,YAAY,EAAE3G,kBAAM,EADmB;EAEvCd,MAAM,EAAEe,4BAA4B,CAClCd,iBAAK,CAAC,CAACsC,qBAAD,EAAwBC,uBAAxB,CAAD,CAD6B,CAAA;AAFG,CAAD,CAAxC,CAAA;AAOA;AACA;AACA;;AACA,MAAMiG,sBAAsB,GAAGvI,gBAAI,CAAC;EAClCuH,YAAY,EAAE3G,kBAAM,EADc;AAElCd,EAAAA,MAAM,EAAEc,kBAAM,EAAA;AAFoB,CAAD,CAAnC,CAAA;AAKA,MAAM4H,iBAAiB,GAAGxI,gBAAI,CAAC;EAC7Bje,MAAM,EAAEid,kBAAM,EADe;AAE7ByJ,EAAAA,MAAM,EAAElH,oBAAQ,CAACvC,kBAAM,EAAP,CAFa;AAG7B0J,EAAAA,GAAG,EAAEnH,oBAAQ,CAACvC,kBAAM,EAAP,CAHgB;AAI7B2J,EAAAA,GAAG,EAAEpH,oBAAQ,CAACvC,kBAAM,EAAP,CAJgB;AAK7B9Y,EAAAA,OAAO,EAAEqb,oBAAQ,CAACvC,kBAAM,EAAP,CAAA;AALY,CAAD,CAA9B,CAAA;AAQA,MAAM4J,qBAAqB,GAAG5I,gBAAI,CAAC;EACjC6I,UAAU,EAAE7J,kBAAM,EADe;EAEjC8J,UAAU,EAAE9J,kBAAM,EAFe;EAGjC+J,cAAc,EAAEnI,kBAAM,EAHW;EAIjCoI,gBAAgB,EAAE/G,mBAAO,EAJQ;AAKjCgH,EAAAA,YAAY,EAAElR,iBAAK,CAACmH,iBAAK,CAAC,CAAC0B,kBAAM,EAAP,EAAWA,kBAAM,EAAjB,EAAqBA,kBAAM,EAA3B,CAAD,CAAN,CALc;EAMjCsI,UAAU,EAAEtI,kBAAM,EANe;EAOjCuI,QAAQ,EAAEvI,kBAAM,EAPiB;AAQjCwI,EAAAA,QAAQ,EAAE7H,oBAAQ,CAACX,kBAAM,EAAP,CAAA;AARe,CAAD,CAAlC,CAAA;AAWA;AACA;AACA;;AACA,MAAMyI,eAAe,GAAG9I,aAAa,CACnCP,gBAAI,CAAC;AACHsJ,EAAAA,OAAO,EAAEvR,iBAAK,CAAC6Q,qBAAD,CADX;EAEHW,UAAU,EAAExR,iBAAK,CAAC6Q,qBAAD,CAAA;AAFd,CAAD,CAD+B,CAArC,CAAA;AAOA,MAAMY,kBAAkB,GAAGzJ,iBAAK,CAAC,CAC/BZ,mBAAO,CAAC,WAAD,CADwB,EAE/BA,mBAAO,CAAC,WAAD,CAFwB,EAG/BA,mBAAO,CAAC,WAAD,CAHwB,CAAD,CAAhC,CAAA;AAMA,MAAMsK,uBAAuB,GAAGzJ,gBAAI,CAAC;EACnC1F,IAAI,EAAEsG,kBAAM,EADuB;AAEnC8I,EAAAA,aAAa,EAAEnI,oBAAQ,CAACX,kBAAM,EAAP,CAFY;AAGnChf,EAAAA,GAAG,EAAEwgB,sBAH8B;EAInCuH,kBAAkB,EAAEvJ,oBAAQ,CAACoJ,kBAAD,CAAA;AAJO,CAAD,CAApC,CAAA;AAOA;AACA;AACA;;AACA,MAAMI,6BAA6B,GAAGlJ,uBAAuB,CAC3D3I,iBAAK,CAACwJ,oBAAQ,CAACkI,uBAAD,CAAT,CADsD,CAA7D,CAAA;AAIA;AACA;AACA;;AACA,MAAMI,0CAA0C,GAAGtJ,aAAa,CAACK,kBAAM,EAAP,CAAhE,CAAA;AAEA,MAAMkJ,wBAAwB,GAAG9J,gBAAI,CAAC;AACpC3V,EAAAA,UAAU,EAAEwU,mBADwB;AAEpC5U,EAAAA,eAAe,EAAE8N,iBAAK,CAAC6I,kBAAM,EAAP,CAFc;AAGpCzW,EAAAA,eAAe,EAAE4N,iBAAK,CAAC6I,kBAAM,EAAP,CAAA;AAHc,CAAD,CAArC,CAAA;AAMA,MAAMmJ,0BAA0B,GAAG/J,gBAAI,CAAC;AACtCzU,EAAAA,UAAU,EAAEwM,iBAAK,CAACiH,kBAAM,EAAP,CADqB;EAEtCzhB,OAAO,EAAEyiB,gBAAI,CAAC;AACZra,IAAAA,WAAW,EAAEoS,iBAAK,CAACiH,kBAAM,EAAP,CADN;IAEZtZ,MAAM,EAAEsa,gBAAI,CAAC;MACXtZ,qBAAqB,EAAEka,kBAAM,EADlB;MAEXha,yBAAyB,EAAEga,kBAAM,EAFtB;AAGX/Z,MAAAA,2BAA2B,EAAE+Z,kBAAM,EAAA;AAHxB,KAAD,CAFA;AAOZ/a,IAAAA,YAAY,EAAEkS,iBAAK,CACjBiI,gBAAI,CAAC;AACH1Z,MAAAA,QAAQ,EAAEyR,iBAAK,CAAC6I,kBAAM,EAAP,CADZ;MAEHjiB,IAAI,EAAEqgB,kBAAM,EAFT;AAGH/Y,MAAAA,cAAc,EAAE2a,kBAAM,EAAA;AAHnB,KAAD,CADa,CAPP;IAcZhb,eAAe,EAAEoZ,kBAAM,EAdX;AAeZzY,IAAAA,mBAAmB,EAAE6Z,oBAAQ,CAACrI,iBAAK,CAAC+R,wBAAD,CAAN,CAAA;GAflB,CAAA;AAFyB,CAAD,CAAvC,CAAA;AAqBA,MAAME,uBAAuB,GAAGhK,gBAAI,CAAC;EACnCuG,MAAM,EAAEpG,mBAAO,EADoB;EAEnC7I,OAAO,EAAE0H,kBAAM,EAFoB;AAGnCje,EAAAA,SAAS,EAAE8d,mBAAAA;AAHwB,CAAD,CAApC,CAAA;AAMA,MAAMoL,oBAAoB,GAAGjK,gBAAI,CAAC;AAChC1Z,EAAAA,QAAQ,EAAEyR,iBAAK,CAAC8G,mBAAD,CADiB;EAEhClgB,IAAI,EAAEqgB,kBAAM,EAFoB;AAGhCje,EAAAA,SAAS,EAAE8d,mBAAAA;AAHqB,CAAD,CAAjC,CAAA;AAMA,MAAMqL,iBAAiB,GAAGnK,iBAAK,CAAC,CAC9BkK,oBAD8B,EAE9BD,uBAF8B,CAAD,CAA/B,CAAA;AAKA,MAAMG,wBAAwB,GAAGpK,iBAAK,CAAC,CACrCC,gBAAI,CAAC;EACHuG,MAAM,EAAEpG,mBAAO,EADZ;EAEH7I,OAAO,EAAE0H,kBAAM,EAFZ;AAGHje,EAAAA,SAAS,EAAEie,kBAAM,EAAA;AAHd,CAAD,CADiC,EAMrCgB,gBAAI,CAAC;AACH1Z,EAAAA,QAAQ,EAAEyR,iBAAK,CAACiH,kBAAM,EAAP,CADZ;EAEHrgB,IAAI,EAAEqgB,kBAAM,EAFT;AAGHje,EAAAA,SAAS,EAAEie,kBAAM,EAAA;AAHd,CAAD,CANiC,CAAD,CAAtC,CAAA;AAaA,MAAMoL,sBAAsB,GAAGtL,kBAAM,CACnCoL,iBADmC,EAEnCC,wBAFmC,EAGnCzqB,KAAK,IAAI;EACP,IAAI,UAAA,IAAcA,KAAlB,EAAyB;AACvB,IAAA,OAAO+gB,kBAAM,CAAC/gB,KAAD,EAAQuqB,oBAAR,CAAb,CAAA;AACD,GAFD,MAEO;AACL,IAAA,OAAOxJ,kBAAM,CAAC/gB,KAAD,EAAQsqB,uBAAR,CAAb,CAAA;AACD,GAAA;AACF,CATkC,CAArC,CAAA;AAYA;AACA;AACA;;AACA,MAAMK,gCAAgC,GAAGrK,gBAAI,CAAC;AAC5CzU,EAAAA,UAAU,EAAEwM,iBAAK,CAACiH,kBAAM,EAAP,CAD2B;EAE5CzhB,OAAO,EAAEyiB,gBAAI,CAAC;AACZra,IAAAA,WAAW,EAAEoS,iBAAK,CAChBiI,gBAAI,CAAC;AACHje,MAAAA,MAAM,EAAE8c,mBADL;MAEHpQ,MAAM,EAAEwT,mBAAO,EAFZ;AAGHqI,MAAAA,QAAQ,EAAErI,mBAAO,EAAA;AAHd,KAAD,CADY,CADN;AAQZpc,IAAAA,YAAY,EAAEkS,iBAAK,CAACqS,sBAAD,CARP;IASZxkB,eAAe,EAAEoZ,kBAAM,EATX;IAUZzY,mBAAmB,EAAE6Z,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAAC+R,wBAAD,CAAN,CAAT,CAAA;GAVlB,CAAA;AAF+B,CAAD,CAA7C,CAAA;AAgBA,MAAMS,kBAAkB,GAAGvK,gBAAI,CAAC;EAC9BwK,YAAY,EAAE5J,kBAAM,EADU;EAE9B6J,IAAI,EAAEzL,kBAAM,EAFkB;AAG9BnH,EAAAA,KAAK,EAAEuI,oBAAQ,CAACpB,kBAAM,EAAP,CAHe;AAI9B0L,EAAAA,aAAa,EAAE1E,iBAAAA;AAJe,CAAD,CAA/B,CAAA;AAOA,MAAM2E,qBAAqB,GAAG3K,gBAAI,CAAC;AACjCsK,EAAAA,QAAQ,EAAEvS,iBAAK,CAAC8G,mBAAD,CADkB;EAEjC+L,QAAQ,EAAE7S,iBAAK,CAAC8G,mBAAD,CAAA;AAFkB,CAAD,CAAlC,CAAA;AAKA;AACA;AACA;;AACA,MAAMgM,8BAA8B,GAAG7K,gBAAI,CAAC;AAC1Cpe,EAAAA,GAAG,EAAEwgB,sBADqC;EAE1C0I,GAAG,EAAElK,kBAAM,EAF+B;EAG1CmK,iBAAiB,EAAE3K,oBAAQ,CACzBmB,oBAAQ,CACNxJ,iBAAK,CACHiI,gBAAI,CAAC;IACHvZ,KAAK,EAAEma,kBAAM,EADV;AAEH/a,IAAAA,YAAY,EAAEkS,iBAAK,CACjBiI,gBAAI,CAAC;AACH1Z,MAAAA,QAAQ,EAAEyR,iBAAK,CAAC6I,kBAAM,EAAP,CADZ;MAEHjiB,IAAI,EAAEqgB,kBAAM,EAFT;AAGH/Y,MAAAA,cAAc,EAAE2a,kBAAM,EAAA;AAHnB,KAAD,CADa,CAAA;GAFjB,CADD,CADC,CADiB,CAHe;AAmB1CoK,EAAAA,WAAW,EAAEjT,iBAAK,CAAC6I,kBAAM,EAAP,CAnBwB;AAoB1CqK,EAAAA,YAAY,EAAElT,iBAAK,CAAC6I,kBAAM,EAAP,CApBuB;EAqB1CsK,WAAW,EAAE9K,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAACiH,kBAAM,EAAP,CAAN,CAAT,CArBqB;EAsB1CmM,gBAAgB,EAAE/K,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAACwS,kBAAD,CAAN,CAAT,CAtBgB;EAuB1Ca,iBAAiB,EAAEhL,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAACwS,kBAAD,CAAN,CAAT,CAvBe;AAwB1Cc,EAAAA,eAAe,EAAEjL,oBAAQ,CAACuK,qBAAD,CAxBiB;AAyB1CW,EAAAA,oBAAoB,EAAElL,oBAAQ,CAACQ,kBAAM,EAAP,CAAA;AAzBY,CAAD,CAA3C,CAAA;AA4BA;AACA;AACA;;AACA,MAAM2K,oCAAoC,GAAGvL,gBAAI,CAAC;AAChDpe,EAAAA,GAAG,EAAEwgB,sBAD2C;EAEhD0I,GAAG,EAAElK,kBAAM,EAFqC;EAGhDmK,iBAAiB,EAAE3K,oBAAQ,CACzBmB,oBAAQ,CACNxJ,iBAAK,CACHiI,gBAAI,CAAC;IACHvZ,KAAK,EAAEma,kBAAM,EADV;IAEH/a,YAAY,EAAEkS,iBAAK,CAACqS,sBAAD,CAAA;GAFjB,CADD,CADC,CADiB,CAHqB;AAahDY,EAAAA,WAAW,EAAEjT,iBAAK,CAAC6I,kBAAM,EAAP,CAb8B;AAchDqK,EAAAA,YAAY,EAAElT,iBAAK,CAAC6I,kBAAM,EAAP,CAd6B;EAehDsK,WAAW,EAAE9K,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAACiH,kBAAM,EAAP,CAAN,CAAT,CAf2B;EAgBhDmM,gBAAgB,EAAE/K,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAACwS,kBAAD,CAAN,CAAT,CAhBsB;EAiBhDa,iBAAiB,EAAEhL,oBAAQ,CAACmB,oBAAQ,CAACxJ,iBAAK,CAACwS,kBAAD,CAAN,CAAT,CAjBqB;AAkBhDc,EAAAA,eAAe,EAAEjL,oBAAQ,CAACuK,qBAAD,CAlBuB;AAmBhDW,EAAAA,oBAAoB,EAAElL,oBAAQ,CAACQ,kBAAM,EAAP,CAAA;AAnBkB,CAAD,CAAjD,CAAA;AAsBA,MAAM4K,wBAAwB,GAAGzL,iBAAK,CAAC,CAACZ,mBAAO,CAAC,CAAD,CAAR,EAAaA,mBAAO,CAAC,QAAD,CAApB,CAAD,CAAtC,CAAA;AAEA;AACA;AACA;;AACA,MAAMsM,iBAAiB,GAAGlL,aAAa,CACrCgB,oBAAQ,CACNvB,gBAAI,CAAC;EACHjU,SAAS,EAAEiT,kBAAM,EADd;EAEH0M,iBAAiB,EAAE1M,kBAAM,EAFtB;EAGH2M,UAAU,EAAE/K,kBAAM,EAHf;AAIH5I,EAAAA,YAAY,EAAED,iBAAK,CACjBiI,gBAAI,CAAC;AACH5X,IAAAA,WAAW,EAAE2hB,0BADV;AAEHrc,IAAAA,IAAI,EAAE6T,oBAAQ,CAACsJ,8BAAD,CAFX;IAGH3kB,OAAO,EAAEka,oBAAQ,CAACoL,wBAAD,CAAA;AAHd,GAAD,CADa,CAJhB;AAWHI,EAAAA,OAAO,EAAExL,oBAAQ,CACfrI,iBAAK,CACHiI,gBAAI,CAAC;IACHje,MAAM,EAAEid,kBAAM,EADX;IAEHpL,QAAQ,EAAEgN,kBAAM,EAFb;AAGHc,IAAAA,WAAW,EAAEH,oBAAQ,CAACX,kBAAM,EAAP,CAHlB;AAIHiL,IAAAA,UAAU,EAAEtK,oBAAQ,CAACvC,kBAAM,EAAP,CAAA;GAJlB,CADD,CADU,CAXd;AAqBHoI,EAAAA,SAAS,EAAE7F,oBAAQ,CAACX,kBAAM,EAAP,CArBhB;AAsBHkB,EAAAA,WAAW,EAAEP,oBAAQ,CAACX,kBAAM,EAAP,CAAA;AAtBlB,CAAD,CADE,CAD6B,CAAvC,CAAA;AA6BA;AACA;AACA;AACA;AACA;;AACA,MAAMkL,0BAA0B,GAAGvL,aAAa,CAC9CgB,oBAAQ,CACNvB,gBAAI,CAAC;EACHjU,SAAS,EAAEiT,kBAAM,EADd;EAEH0M,iBAAiB,EAAE1M,kBAAM,EAFtB;EAGH2M,UAAU,EAAE/K,kBAAM,EAHf;AAIH5I,EAAAA,YAAY,EAAED,iBAAK,CACjBiI,gBAAI,CAAC;AACH5X,IAAAA,WAAW,EAAE2hB,0BADV;IAEHrc,IAAI,EAAE6T,oBAAQ,CAACsJ,8BAAD,CAAA;AAFX,GAAD,CADa,CAJhB;AAUHe,EAAAA,OAAO,EAAExL,oBAAQ,CACfrI,iBAAK,CACHiI,gBAAI,CAAC;IACHje,MAAM,EAAEid,kBAAM,EADX;IAEHpL,QAAQ,EAAEgN,kBAAM,EAFb;AAGHc,IAAAA,WAAW,EAAEH,oBAAQ,CAACX,kBAAM,EAAP,CAHlB;AAIHiL,IAAAA,UAAU,EAAEtK,oBAAQ,CAACvC,kBAAM,EAAP,CAAA;GAJlB,CADD,CADU,CAVd;AAoBHoI,EAAAA,SAAS,EAAE7F,oBAAQ,CAACX,kBAAM,EAAP,CAAA;AApBhB,CAAD,CADE,CADsC,CAAhD,CAAA;AA2BA;AACA;AACA;;AACA,MAAMmL,2BAA2B,GAAGxL,aAAa,CAC/CgB,oBAAQ,CACNvB,gBAAI,CAAC;EACHjU,SAAS,EAAEiT,kBAAM,EADd;EAEH0M,iBAAiB,EAAE1M,kBAAM,EAFtB;EAGH2M,UAAU,EAAE/K,kBAAM,EAHf;AAIHrV,EAAAA,UAAU,EAAEwM,iBAAK,CAACiH,kBAAM,EAAP,CAJd;AAKHoI,EAAAA,SAAS,EAAE7F,oBAAQ,CAACX,kBAAM,EAAP,CAAA;AALhB,CAAD,CADE,CADuC,CAAjD,CAAA;AAYA;AACA;AACA;;AACA,MAAMoL,uBAAuB,GAAGzL,aAAa,CAC3CgB,oBAAQ,CACNvB,gBAAI,CAAC;EACH1F,IAAI,EAAEsG,kBAAM,EADT;AAEHlT,EAAAA,IAAI,EAAEmd,8BAFH;EAGHzD,SAAS,EAAEhH,oBAAQ,CAACmB,oBAAQ,CAACX,kBAAM,EAAP,CAAT,CAHhB;AAIHxY,EAAAA,WAAW,EAAE2hB,0BAJV;EAKH7jB,OAAO,EAAEka,oBAAQ,CAACoL,wBAAD,CAAA;AALd,CAAD,CADE,CADmC,CAA7C,CAAA;AAYA;AACA;AACA;;AACA,MAAMS,6BAA6B,GAAG1L,aAAa,CACjDgB,oBAAQ,CACNvB,gBAAI,CAAC;EACH1F,IAAI,EAAEsG,kBAAM,EADT;AAEHxY,EAAAA,WAAW,EAAEiiB,gCAFV;AAGH3c,EAAAA,IAAI,EAAE6T,oBAAQ,CAACgK,oCAAD,CAHX;EAIHnE,SAAS,EAAEhH,oBAAQ,CAACmB,oBAAQ,CAACX,kBAAM,EAAP,CAAT,CAJhB;EAKH1a,OAAO,EAAEka,oBAAQ,CAACoL,wBAAD,CAAA;AALd,CAAD,CADE,CADyC,CAAnD,CAAA;AAYA;AACA;AACA;AACA;AACA;;AACA,MAAMU,qCAAqC,GAAGxL,uBAAuB,CACnEV,gBAAI,CAAC;EACHjU,SAAS,EAAEiT,kBAAM,EADd;EAEHxM,aAAa,EAAEwN,gBAAI,CAAC;AAClBmM,IAAAA,oBAAoB,EAAEvL,kBAAM,EAAA;GADX,CAAA;AAFhB,CAAD,CAD+D,CAArE,CAAA;AASA;AACA;AACA;;AACA,MAAMwL,2BAA2B,GAAG1L,uBAAuB,CACzDV,gBAAI,CAAC;EACHjU,SAAS,EAAEiT,kBAAM,EADd;AAEHvT,EAAAA,oBAAoB,EAAEmV,kBAAM,EAAA;AAFzB,CAAD,CADqD,CAA3D,CAAA;AAOA,MAAMyL,gBAAgB,GAAGrM,gBAAI,CAAC;EAC5B1F,IAAI,EAAEsG,kBAAM,EADgB;EAE5B0L,eAAe,EAAE1L,kBAAM,EAFK;EAG5B2L,QAAQ,EAAE3L,kBAAM,EAHY;AAI5B4L,EAAAA,gBAAgB,EAAE5L,kBAAM,EAAA;AAJI,CAAD,CAA7B,CAAA;AAOA;AACA;AACA;;AACA,MAAM6L,oCAAoC,GAAGlM,aAAa,CACxDxI,iBAAK,CAACsU,gBAAD,CADmD,CAA1D,CAAA;AAIA;AACA;AACA;;AACA,MAAMK,yBAAyB,GAAGhM,uBAAuB,CACvDa,oBAAQ,CACNvB,gBAAI,CAAC;EACHxN,aAAa,EAAEwN,gBAAI,CAAC;AAClBmM,IAAAA,oBAAoB,EAAEvL,kBAAM,EAAA;GADX,CAAA;AADhB,CAAD,CADE,CAD+C,CAAzD,CAAA;AAUA;AACA;AACA;;AACA,MAAM+L,uBAAuB,GAAGpM,aAAa,CAACvB,kBAAM,EAAP,CAA7C,CAAA;AAEA;AACA;AACA;;AACA,MAAM4N,wBAAwB,GAAGrM,aAAa,CAACvB,kBAAM,EAAP,CAA9C,CAAA;AAEA;AACA;AACA;;AA2OA;AACA;AACA;AACA,MAAM6N,UAAU,GAAG7M,gBAAI,CAAC;AACtBpe,EAAAA,GAAG,EAAEwgB,sBADiB;AAEtBjH,EAAAA,IAAI,EAAEpD,iBAAK,CAACiH,kBAAM,EAAP,CAFW;AAGtBpc,EAAAA,SAAS,EAAEoc,kBAAM,EAAA;AAHK,CAAD,CAAvB,CAAA;AAMA;AACA;AACA;;AAOA;AACA;AACA;AACA,MAAM8N,sBAAsB,GAAG9M,gBAAI,CAAC;AAClCF,EAAAA,MAAM,EAAEe,4BAA4B,CAACgM,UAAD,CADF;AAElCtF,EAAAA,YAAY,EAAE3G,kBAAM,EAAA;AAFc,CAAD,CAAnC,CAAA;AAKA;AACA;AACA;;AA2GA;AACA,MAAM4D,mBAAmB,GAAG;EAC1B,eAAkB,EAAA,CAAA,GAAA,EAAD,yBAAMuI,mBAAN,yEAAyC,SAAU,CAAA,CAAA;AAD1C,CAA5B,CAAA;AAIA;AACA;AACA;;AACO,MAAMC,UAAN,CAAiB;AACtB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;;AACA;;AACA;;AAYA;;AACA;;AAKA;;AAKA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AAGA;AACF;AACA;AACA;AACA;AACA;AACE7uB,EAAAA,WAAW,CACT+f,QADS,EAETwB,kBAFS,EAGT;AAAA,IAAA,IAAA,CA5EeuN,WA4Ef,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CA3EeC,iCA2Ef,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CA1Ee/U,YA0Ef,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAzEegV,cAyEf,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAxEeC,UAwEf,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAvEeC,WAuEf,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAtEeC,gBAsEf,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CArEeC,aAqEf,GAAA,KAAA,CAAA,CAAA;IAAA,IApEeC,CAAAA,sBAoEf,GApEiD,KAoEjD,CAAA;IAAA,IAnEeC,CAAAA,sBAmEf,GAjES,IAiET,CAAA;IAAA,IAhEeC,CAAAA,wBAgEf,GA9DS,IA8DT,CAAA;IAAA,IAvDUC,CAAAA,uBAuDV,GAvD4C,CAuD5C,CAAA;IAAA,IArDeC,CAAAA,wBAqDf,GArDmD,KAqDnD,CAAA;IAAA,IApDeC,CAAAA,iBAoDf,GApD4C,KAoD5C,CAAA;AAAA,IAAA,IAAA,CAnDeC,cAmDf,GA9CE;AACFC,MAAAA,eAAe,EAAE,IADf;AAEFC,MAAAA,SAAS,EAAE,CAFT;AAGFC,MAAAA,qBAAqB,EAAE,EAHrB;AAIFC,MAAAA,mBAAmB,EAAE,EAAA;KA0CrB,CAAA;IAAA,IAvCuBC,CAAAA,yBAuCvB,GAvCyE,CAuCzE,CAAA;IAAA,IAtCuBC,CAAAA,mDAsCvB,GAlCE,EAkCF,CAAA;IAAA,IAjCuBC,CAAAA,4CAiCvB,GA7BE,EA6BF,CAAA;IAAA,IA5BuBC,CAAAA,oBA4BvB,GA1BE,EA0BF,CAAA;AAAA,IAAA,IAAA,CAZuBC,+BAYvB,GAXA,IAAIhgB,GAAJ,EAWA,CAAA;AACA,IAAA,IAAIigB,UAAJ,CAAA;AACA,IAAA,IAAIrL,WAAJ,CAAA;AACA,IAAA,IAAII,KAAJ,CAAA;AACA,IAAA,IAAIF,eAAJ,CAAA;AACA,IAAA,IAAIC,uBAAJ,CAAA;;AACA,IAAA,IAAI5D,kBAAkB,IAAI,OAAOA,kBAAP,KAA8B,QAAxD,EAAkE;MAChE,IAAKuN,CAAAA,WAAL,GAAmBvN,kBAAnB,CAAA;KADF,MAEO,IAAIA,kBAAJ,EAAwB;AAC7B,MAAA,IAAA,CAAKuN,WAAL,GAAmBvN,kBAAkB,CAACvO,UAAtC,CAAA;AACA,MAAA,IAAA,CAAK+b,iCAAL,GACExN,kBAAkB,CAAC+O,gCADrB,CAAA;MAEAD,UAAU,GAAG9O,kBAAkB,CAAC8O,UAAhC,CAAA;MACArL,WAAW,GAAGzD,kBAAkB,CAACyD,WAAjC,CAAA;MACAI,KAAK,GAAG7D,kBAAkB,CAAC6D,KAA3B,CAAA;MACAF,eAAe,GAAG3D,kBAAkB,CAAC2D,eAArC,CAAA;MACAC,uBAAuB,GAAG5D,kBAAkB,CAAC4D,uBAA7C,CAAA;AACD,KAAA;;AAED,IAAA,IAAA,CAAKnL,YAAL,GAAoBmH,iBAAiB,CAACpB,QAAD,CAArC,CAAA;AACA,IAAA,IAAA,CAAKiP,cAAL,GAAsBqB,UAAU,IAAIvQ,gBAAgB,CAACC,QAAD,CAApD,CAAA;AAEA,IAAA,IAAA,CAAKkP,UAAL,GAAkBnK,eAAe,CAC/B/E,QAD+B,EAE/BiF,WAF+B,EAG/BI,KAH+B,EAI/BF,eAJ+B,EAK/BC,uBAL+B,CAAjC,CAAA;AAOA,IAAA,IAAA,CAAK+J,WAAL,GAAmBrI,gBAAgB,CAAC,IAAA,CAAKoI,UAAN,CAAnC,CAAA;AACA,IAAA,IAAA,CAAKE,gBAAL,GAAwBpI,qBAAqB,CAAC,IAAA,CAAKkI,UAAN,CAA7C,CAAA;AAEA,IAAA,IAAA,CAAKG,aAAL,GAAqB,IAAImB,oBAAJ,CAAuB,IAAA,CAAKvB,cAA5B,EAA4C;AAC/DwB,MAAAA,WAAW,EAAE,KADkD;AAE/DC,MAAAA,cAAc,EAAEC,QAAAA;AAF+C,KAA5C,CAArB,CAAA;;AAIA,IAAA,IAAA,CAAKtB,aAAL,CAAmBuB,EAAnB,CAAsB,MAAtB,EAA8B,IAAKC,CAAAA,SAAL,CAAeprB,IAAf,CAAoB,IAApB,CAA9B,CAAA,CAAA;;AACA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CAAsB,OAAtB,EAA+B,IAAKE,CAAAA,UAAL,CAAgBrrB,IAAhB,CAAqB,IAArB,CAA/B,CAAA,CAAA;;AACA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CAAsB,OAAtB,EAA+B,IAAKG,CAAAA,UAAL,CAAgBtrB,IAAhB,CAAqB,IAArB,CAA/B,CAAA,CAAA;;AACA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,qBADF,EAEE,IAAKI,CAAAA,wBAAL,CAA8BvrB,IAA9B,CAAmC,IAAnC,CAFF,CAAA,CAAA;;AAIA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,qBADF,EAEE,IAAKK,CAAAA,+BAAL,CAAqCxrB,IAArC,CAA0C,IAA1C,CAFF,CAAA,CAAA;;AAIA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,kBADF,EAEE,IAAKM,CAAAA,qBAAL,CAA2BzrB,IAA3B,CAAgC,IAAhC,CAFF,CAAA,CAAA;;AAIA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,0BADF,EAEE,IAAKO,CAAAA,4BAAL,CAAkC1rB,IAAlC,CAAuC,IAAvC,CAFF,CAAA,CAAA;;AAIA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,uBADF,EAEE,IAAKQ,CAAAA,0BAAL,CAAgC3rB,IAAhC,CAAqC,IAArC,CAFF,CAAA,CAAA;;AAIA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,kBADF,EAEE,IAAKS,CAAAA,qBAAL,CAA2B5rB,IAA3B,CAAgC,IAAhC,CAFF,CAAA,CAAA;;AAIA,IAAA,IAAA,CAAK4pB,aAAL,CAAmBuB,EAAnB,CACE,kBADF,EAEE,IAAKU,CAAAA,qBAAL,CAA2B7rB,IAA3B,CAAgC,IAAhC,CAFF,CAAA,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AACgB,EAAA,IAAVwN,UAAU,GAA2B;AACvC,IAAA,OAAO,KAAK8b,WAAZ,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACiB,EAAA,IAAXwC,WAAW,GAAW;AACxB,IAAA,OAAO,KAAKtX,YAAZ,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC4B,EAAA,MAApBuX,oBAAoB,CACxB7yB,SADwB,EAExB6iB,kBAFwB,EAGgB;AACxC;IACA,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;AAEA,IAAA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,CAAC9yB,SAAS,CAACsD,QAAV,EAAD,CADW,EAEXgR,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,YAAjB,EAA+B5nB,IAA/B,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlP,uBAAuB,CAACE,kBAAM,EAAP,CAAnC,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,0BAAA,EAA4B/a,SAAS,CAACsD,QAAV,EAAqB,EAF9C,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACkB,EAAA,MAAV+P,UAAU,CACdhzB,SADc,EAEd6iB,kBAFc,EAGG;AACjB,IAAA,OAAO,MAAM,IAAKgQ,CAAAA,oBAAL,CAA0B7yB,SAA1B,EAAqC6iB,kBAArC,CACVoQ,CAAAA,IADU,CACL9iB,CAAC,IAAIA,CAAC,CAACtN,KADF,EAEVqwB,KAFU,CAEJC,CAAC,IAAI;AACV,MAAA,MAAM,IAAI7wB,KAAJ,CACJ,mCAAA,GAAsCtC,SAAS,CAACsD,QAAV,EAAtC,GAA6D,IAA7D,GAAoE6vB,CADhE,CAAN,CAAA;AAGD,KANU,CAAb,CAAA;AAOD,GAAA;AAED;AACF;AACA;;;EACoB,MAAZC,YAAY,CAAC3V,IAAD,EAAuC;IACvD,MAAMsV,SAAS,GAAG,MAAM,IAAKvC,CAAAA,WAAL,CAAiB,cAAjB,EAAiC,CAAC/S,IAAD,CAAjC,CAAxB,CAAA;AACA,IAAA,MAAMoK,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACgB,oBAAQ,CAACX,kBAAM,EAAP,CAAT,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,kCAAA,EAAoC0C,IAAK,CAAA,CAFtC,CAAN,CAAA;AAID,KAAA;;IACD,OAAOoK,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AAC4B,EAAA,MAApBoQ,oBAAoB,GAAoB;IAC5C,MAAMN,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,mBAAjB,EAAsC,EAAtC,CAAxB,CAAA;IACA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACK,kBAAM,EAAP,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,mCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC8B,EAAA,MAAtBqQ,sBAAsB,GAAoB;IAC9C,MAAMP,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,wBAAjB,EAA2C,EAA3C,CAAxB,CAAA;AACA,IAAA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlK,aAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWhB,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,qCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACiB,MAATsQ,SAAS,CACblhB,MADa,EAE2B;IACxC,IAAImhB,SAA0B,GAAG,EAAjC,CAAA;;AACA,IAAA,IAAI,OAAOnhB,MAAP,KAAkB,QAAtB,EAAgC;AAC9BmhB,MAAAA,SAAS,GAAG;AAAClf,QAAAA,UAAU,EAAEjC,MAAAA;OAAzB,CAAA;KADF,MAEO,IAAIA,MAAJ,EAAY;MACjBmhB,SAAS,GAAG,EACV,GAAGnhB,MADO;AAEViC,QAAAA,UAAU,EAAGjC,MAAM,IAAIA,MAAM,CAACiC,UAAlB,IAAiC,IAAKA,CAAAA,UAAAA;OAFpD,CAAA;AAID,KALM,MAKA;AACLkf,MAAAA,SAAS,GAAG;AACVlf,QAAAA,UAAU,EAAE,IAAKA,CAAAA,UAAAA;OADnB,CAAA;AAGD,KAAA;;IAED,MAAMye,SAAS,GAAG,MAAM,IAAKvC,CAAAA,WAAL,CAAiB,WAAjB,EAA8B,CAACgD,SAAD,CAA9B,CAAxB,CAAA;AACA,IAAA,MAAM3L,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYjK,kBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWjB,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,sBAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACsB,EAAA,MAAdwQ,cAAc,CAClBC,gBADkB,EAElBpf,UAFkB,EAG2B;AAC7C,IAAA,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,CAACY,gBAAgB,CAACpwB,QAAjB,EAAD,CAAhB,EAA+CgR,UAA/C,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlP,uBAAuB,CAACsF,iBAAD,CAAnC,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWtB,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,4BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC8B,EAAA,MAAtB0Q,sBAAsB,CAC1BC,YAD0B,EAE1Btf,UAF0B,EAGmB;AAC7C,IAAA,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,CAACc,YAAY,CAACtwB,QAAb,EAAD,CAAhB,EAA2CgR,UAA3C,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,wBAAjB,EAA2C5nB,IAA3C,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlP,uBAAuB,CAACsF,iBAAD,CAAnC,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWtB,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,qCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AAC+B,EAAA,MAAvB4Q,uBAAuB,CAC3BC,YAD2B,EAE3BxpB,MAF2B,EAG3BuY,kBAH2B,EAQ3B;IACA,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;AAEA,IAAA,IAAIkR,KAAY,GAAG,CAACD,YAAY,CAACxwB,QAAb,EAAD,CAAnB,CAAA;;IACA,IAAI,MAAA,IAAUgH,MAAd,EAAsB;MACpBypB,KAAK,CAACrrB,IAAN,CAAW;AAACklB,QAAAA,IAAI,EAAEtjB,MAAM,CAACsjB,IAAP,CAAYtqB,QAAZ,EAAA;OAAlB,CAAA,CAAA;AACD,KAFD,MAEO;MACLywB,KAAK,CAACrrB,IAAN,CAAW;AAACxE,QAAAA,SAAS,EAAEoG,MAAM,CAACpG,SAAP,CAAiBZ,QAAjB,EAAA;OAAvB,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,MAAMsF,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgBiB,KAAhB,EAAuBzf,UAAvB,EAAmC,QAAnC,EAA6CjC,MAA7C,CAAb,CAAA;;IACA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,yBAAjB,EAA4C5nB,IAA5C,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYvJ,uBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW3B,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,8CAAA,EAAgD+Y,YAAY,CAACxwB,QAAb,EAAwB,EAFrE,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACqC,EAAA,MAA7B+Q,6BAA6B,CACjCF,YADiC,EAEjCxpB,MAFiC,EAGjCgK,UAHiC,EAQjC;AACA,IAAA,IAAIyf,KAAY,GAAG,CAACD,YAAY,CAACxwB,QAAb,EAAD,CAAnB,CAAA;;IACA,IAAI,MAAA,IAAUgH,MAAd,EAAsB;MACpBypB,KAAK,CAACrrB,IAAN,CAAW;AAACklB,QAAAA,IAAI,EAAEtjB,MAAM,CAACsjB,IAAP,CAAYtqB,QAAZ,EAAA;OAAlB,CAAA,CAAA;AACD,KAFD,MAEO;MACLywB,KAAK,CAACrrB,IAAN,CAAW;AAACxE,QAAAA,SAAS,EAAEoG,MAAM,CAACpG,SAAP,CAAiBZ,QAAjB,EAAA;OAAvB,CAAA,CAAA;AACD,KAAA;;IAED,MAAMsF,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CAAgBiB,KAAhB,EAAuBzf,UAAvB,EAAmC,YAAnC,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,yBAAjB,EAA4C5nB,IAA5C,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYpJ,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW9B,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,8CAAA,EAAgD+Y,YAAY,CAACxwB,QAAb,EAAwB,EAFrE,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC0B,MAAlBgR,kBAAkB,CACtB5hB,MADsB,EAEqC;AAC3D,IAAA,MAAM6hB,GAAG,GAAG,EACV,GAAG7hB,MADO;AAEViC,MAAAA,UAAU,EAAGjC,MAAM,IAAIA,MAAM,CAACiC,UAAlB,IAAiC,IAAKA,CAAAA,UAAAA;KAFpD,CAAA;AAIA,IAAA,MAAM1L,IAAI,GAAGsrB,GAAG,CAAC5pB,MAAJ,IAAc4pB,GAAG,CAAC5f,UAAlB,GAA+B,CAAC4f,GAAD,CAA/B,GAAuC,EAApD,CAAA;IACA,MAAMnB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYnJ,2BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW/B,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,gCAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AAC+B,EAAA,MAAvBkR,uBAAuB,CAC3BC,WAD2B,EAE3B9f,UAF2B,EAGqC;AAChE,IAAA,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,CAACsB,WAAW,CAAC9wB,QAAZ,EAAD,CAAhB,EAA0CgR,UAA1C,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,yBAAjB,EAA4C5nB,IAA5C,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYxJ,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW1B,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,sCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACgC,EAAA,MAAxBoR,wBAAwB,CAC5Br0B,SAD4B,EAE5B6iB,kBAF4B,EAGgC;IAC5D,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;AAEA,IAAA,MAAMja,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC9yB,SAAS,CAACsD,QAAV,EAAD,CADW,EAEXgR,UAFW,EAGX,QAHW,EAIXjC,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAChBmP,SADgB,EAEhBlP,uBAAuB,CAACa,oBAAQ,CAACmF,iBAAD,CAAT,CAFP,CAAlB,CAAA;;IAIA,IAAI,OAAA,IAAWhC,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,iCAAA,EAAmC/a,SAAS,CAACsD,QAAV,EAAqB,EAFrD,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC4B,EAAA,MAApBqR,oBAAoB,CACxBt0B,SADwB,EAExB6iB,kBAFwB,EAKxB;IACA,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;AAEA,IAAA,MAAMja,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC9yB,SAAS,CAACsD,QAAV,EAAD,CADW,EAEXgR,UAFW,EAGX,YAHW,EAIXjC,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAChBmP,SADgB,EAEhBlP,uBAAuB,CAACa,oBAAQ,CAACsF,uBAAD,CAAT,CAFP,CAAlB,CAAA;;IAIA,IAAI,OAAA,IAAWnC,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,iCAAA,EAAmC/a,SAAS,CAACsD,QAAV,EAAqB,EAFrD,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACsB,EAAA,MAAdpI,cAAc,CAClB7a,SADkB,EAElB6iB,kBAFkB,EAGmB;IACrC,IAAI;MACF,MAAMgF,GAAG,GAAG,MAAM,IAAA,CAAKwM,wBAAL,CAChBr0B,SADgB,EAEhB6iB,kBAFgB,CAAlB,CAAA;MAIA,OAAOgF,GAAG,CAAChlB,KAAX,CAAA;KALF,CAME,OAAOswB,CAAP,EAAU;AACV,MAAA,MAAM,IAAI7wB,KAAJ,CACJ,mCAAA,GAAsCtC,SAAS,CAACsD,QAAV,EAAtC,GAA6D,IAA7D,GAAoE6vB,CADhE,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACyC,EAAA,MAAjCoB,iCAAiC,CACrCC,UADqC,EAErC3R,kBAFqC,EAG2B;IAChE,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;AAEA,IAAA,MAAMzgB,IAAI,GAAGoyB,UAAU,CAACjyB,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACc,QAAJ,EAAtB,CAAb,CAAA;;AACA,IAAA,MAAMsF,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,CAAC1wB,IAAD,CAAhB,EAAwBkS,UAAxB,EAAoC,QAApC,EAA8CjC,MAA9C,CAAb,CAAA;;IACA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,qBAAjB,EAAwC5nB,IAAxC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAChBmP,SADgB,EAEhBlP,uBAAuB,CAAC3I,iBAAK,CAACwJ,oBAAQ,CAACmF,iBAAD,CAAT,CAAN,CAFP,CAAlB,CAAA;;IAIA,IAAI,OAAA,IAAWhC,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,gCAAA,EAAkC3Y,IAAK,CAAA,CAFpC,CAAN,CAAA;AAID,KAAA;;IACD,OAAOylB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC+B,EAAA,MAAvBwR,uBAAuB,CAC3BD,UAD2B,EAE3B3R,kBAF2B,EAGc;IACzC,MAAMgF,GAAG,GAAG,MAAM,IAAA,CAAK0M,iCAAL,CAChBC,UADgB,EAEhB3R,kBAFgB,CAAlB,CAAA;IAIA,OAAOgF,GAAG,CAAChlB,KAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC0B,EAAA,MAAlB6xB,kBAAkB,CACtB10B,SADsB,EAEtB6iB,kBAFsB,EAGtBlF,KAHsB,EAIQ;IAC9B,MAAM;MAACrJ,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;AAEA,IAAA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,CAAC9yB,SAAS,CAACsD,QAAV,EAAD,CADW,EAEXgR,UAFW,EAGXvR,SAAAA;AAAU;MACV,EACE,GAAGsP,MADL;AAEEsL,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBtL,MAAxB,KAAwBA,IAAAA,IAAAA,MAAxB,KAAwBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAEsL,KAAAA;AAFzC,KAJW,CAAb,CAAA;;IAUA,MAAMoV,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACwG,qBAAD,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWrC,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,+BAAA,EAAiC/a,SAAS,CAACsD,QAAV,EAAqB,EAFnD,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AAC0B,EAAA,MAAlB0R,kBAAkB,CACtBzwB,SADsB,EAEtB0wB,kBAFsB,EAG6C;IACnE,MAAM;MAACtgB,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACgS,kBAAD,CAD7B,CAAA;IAEA,MAAM;MAACC,QAAD;MAAW,GAAGC,qBAAAA;KAAyBziB,GAAAA,MAAM,IAAI,EAAvD,CAAA;;AACA,IAAA,MAAMzJ,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC5uB,SAAS,CAACZ,QAAV,EAAD,CADW,EAEXgR,UAFW,EAGXugB,QAAQ,IAAI,QAHD,EAIXC,qBAJW,CAAb,CAAA;;IAMA,MAAM/B,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACxI,iBAAK,CAAC4O,sBAAD,CAAN,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWjC,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,wCAAA,EAA0C7W,SAAS,CAACZ,QAAV,EAAqB,EAF5D,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACgC,EAAA,MAAxB8R,wBAAwB,CAC5B7wB,SAD4B,EAE5B0wB,kBAF4B,EAQ5B;IACA,MAAM;MAACtgB,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACgS,kBAAD,CAD7B,CAAA;;AAEA,IAAA,MAAMhsB,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC5uB,SAAS,CAACZ,QAAV,EAAD,CADW,EAEXgR,UAFW,EAGX,YAHW,EAIXjC,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAChBmP,SADgB,EAEhBrP,aAAa,CAACxI,iBAAK,CAAC+O,4BAAD,CAAN,CAFG,CAAlB,CAAA;;IAIA,IAAI,OAAA,IAAWpC,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,wCAAA,EAA0C7W,SAAS,CAACZ,QAAV,EAAqB,EAF5D,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;;AAcD;AACwB,EAAA,MAAlBtO,kBAAkB,CACtBqgB,QADsB,EAItB1gB,UAJsB,EAK2B;AACjD,IAAA,IAAI2gB,YAAJ,CAAA;;AAEA,IAAA,IAAI,OAAOD,QAAP,IAAmB,QAAvB,EAAiC;AAC/BC,MAAAA,YAAY,GAAGD,QAAf,CAAA;AACD,KAFD,MAEO;MACL,MAAM3iB,MAAM,GACV2iB,QADF,CAAA;MAEAC,YAAY,GAAG5iB,MAAM,CAACtM,SAAtB,CAAA;AACD,KAAA;;AAED,IAAA,IAAImvB,gBAAJ,CAAA;;IAEA,IAAI;AACFA,MAAAA,gBAAgB,GAAGhyB,wBAAI,CAACrB,MAAL,CAAYozB,YAAZ,CAAnB,CAAA;KADF,CAEE,OAAOlwB,GAAP,EAAY;AACZ,MAAA,MAAM,IAAIzC,KAAJ,CAAU,oCAAA,GAAuC2yB,YAAjD,CAAN,CAAA;AACD,KAAA;;IAEDvnB,MAAM,CAACwnB,gBAAgB,CAAC7yB,MAAjB,KAA4B,EAA7B,EAAiC,8BAAjC,CAAN,CAAA;AAEA,IAAA,MAAM8yB,sBAAsB,GAAG7gB,UAAU,IAAI,KAAKA,UAAlD,CAAA;AACA,IAAA,IAAI8gB,SAAJ,CAAA;AACA,IAAA,IAAIC,cAAJ,CAAA;IACA,IAAIC,IAAI,GAAG,KAAX,CAAA;IAEA,MAAMC,mBAAmB,GAAG,IAAIzgB,OAAJ,CAGzB,CAACC,OAAD,EAAUiS,MAAV,KAAqB;MACtB,IAAI;QACFqO,cAAc,GAAG,IAAKG,CAAAA,WAAL,CACfP,YADe,EAEf,CAAChS,MAAD,EAA0Ba,OAA1B,KAA+C;AAC7CuR,UAAAA,cAAc,GAAGtyB,SAAjB,CAAA;AACA,UAAA,MAAMmhB,QAAQ,GAAG;YACfJ,OADe;AAEfjhB,YAAAA,KAAK,EAAEogB,MAAAA;WAFT,CAAA;AAIAqS,UAAAA,IAAI,GAAG,IAAP,CAAA;AACAvgB,UAAAA,OAAO,CAAC;YAAC0gB,MAAM,EAAEvnB,yBAAiB,CAACwnB,SAA3B;AAAsCxR,YAAAA,QAAAA;AAAtC,WAAD,CAAP,CAAA;SATa,EAWfiR,sBAXe,CAAjB,CAAA;OADF,CAcE,OAAOpwB,GAAP,EAAY;QACZiiB,MAAM,CAACjiB,GAAD,CAAN,CAAA;AACD,OAAA;AACF,KArB2B,CAA5B,CAAA;AAuBA,IAAA,MAAM4wB,aAAa,GAAG,IAAI7gB,OAAJ,CAGpBC,OAAO,IAAI;AACX,MAAA,IAAI,OAAOigB,QAAP,KAAoB,QAAxB,EAAkC;AAChC,QAAA,IAAIY,SAAS,GAAG,IAAA,CAAKvF,iCAAL,IAA0C,KAAK,IAA/D,CAAA;;AACA,QAAA,QAAQ8E,sBAAR;AACE,UAAA,KAAK,WAAL,CAAA;AACA,UAAA,KAAK,QAAL,CAAA;AACA,UAAA,KAAK,QAAL,CAAA;AACA,UAAA,KAAK,WAAL,CAAA;AACA,UAAA,KAAK,cAAL;AAAqB,YAAA;AACnBS,cAAAA,SAAS,GAAG,IAAA,CAAKvF,iCAAL,IAA0C,KAAK,IAA3D,CAAA;AACA,cAAA,MAAA;AACD,aAAA;AARH,SAAA;;AAeA+E,QAAAA,SAAS,GAAGpgB,UAAU,CACpB,MAAMD,OAAO,CAAC;UAAC0gB,MAAM,EAAEvnB,yBAAiB,CAAC2nB,SAA3B;AAAsCD,UAAAA,SAAAA;SAAvC,CADO,EAEpBA,SAFoB,CAAtB,CAAA;AAID,OArBD,MAqBO;QACL,IAAIvjB,MAAM,GACR2iB,QADF,CAAA;;QAEA,MAAMc,gBAAgB,GAAG,YAAY;UACnC,IAAI;AACF,YAAA,MAAM7Q,WAAW,GAAG,MAAM,KAAK8Q,cAAL,CAAoBzhB,UAApB,CAA1B,CAAA;AACA,YAAA,OAAO2Q,WAAP,CAAA;WAFF,CAGE,OAAO+Q,EAAP,EAAW;AACX,YAAA,OAAO,CAAC,CAAR,CAAA;AACD,WAAA;SANH,CAAA;;AAQA,QAAA,CAAC,YAAY;AACX,UAAA,IAAIC,kBAAkB,GAAG,MAAMH,gBAAgB,EAA/C,CAAA;AACA,UAAA,IAAIR,IAAJ,EAAU,OAAA;;AACV,UAAA,OAAOW,kBAAkB,IAAI5jB,MAAM,CAACzD,oBAApC,EAA0D;YACxD,MAAMgG,KAAK,CAAC,IAAD,CAAX,CAAA;AACA,YAAA,IAAI0gB,IAAJ,EAAU,OAAA;YACVW,kBAAkB,GAAG,MAAMH,gBAAgB,EAA3C,CAAA;AACA,YAAA,IAAIR,IAAJ,EAAU,OAAA;AACX,WAAA;;AACDvgB,UAAAA,OAAO,CAAC;YAAC0gB,MAAM,EAAEvnB,yBAAiB,CAACgoB,oBAAAA;AAA3B,WAAD,CAAP,CAAA;SATF,GAAA,CAAA;AAWD,OAAA;AACF,KAhDqB,CAAtB,CAAA;AAkDA,IAAA,IAAIjT,MAAJ,CAAA;;IACA,IAAI;AACF,MAAA,MAAMkT,OAAO,GAAG,MAAMrhB,OAAO,CAACshB,IAAR,CAAa,CAACb,mBAAD,EAAsBI,aAAtB,CAAb,CAAtB,CAAA;;MACA,QAAQQ,OAAO,CAACV,MAAhB;QACE,KAAKvnB,yBAAiB,CAACgoB,oBAAvB;AACE,UAAA,MAAM,IAAIpwB,0CAAJ,CAA+CmvB,YAA/C,CAAN,CAAA;;QACF,KAAK/mB,yBAAiB,CAACwnB,SAAvB;UACEzS,MAAM,GAAGkT,OAAO,CAACjS,QAAjB,CAAA;AACA,UAAA,MAAA;;QACF,KAAKhW,yBAAiB,CAAC2nB,SAAvB;UACE,MAAM,IAAI3vB,8BAAJ,CACJ+uB,YADI,EAEJkB,OAAO,CAACP,SAAR,GAAoB,IAFhB,CAAN,CAAA;AAPJ,OAAA;AAYD,KAdD,SAcU;MACRjZ,YAAY,CAACyY,SAAD,CAAZ,CAAA;;AACA,MAAA,IAAIC,cAAJ,EAAoB;QAClB,IAAKgB,CAAAA,uBAAL,CAA6BhB,cAA7B,CAAA,CAAA;AACD,OAAA;AACF,KAAA;;AACD,IAAA,OAAOpS,MAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACuB,EAAA,MAAfqT,eAAe,GAAgC;IACnD,MAAMvD,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,iBAAjB,EAAoC,EAApC,CAAxB,CAAA;AACA,IAAA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACxI,iBAAK,CAACyQ,iBAAD,CAAN,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW9D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,6BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACuB,MAAfsT,eAAe,CAACjiB,UAAD,EAAsD;IACzE,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,EAAhB,EAAoBxe,UAApB,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,iBAAjB,EAAoC5nB,IAApC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYvG,eAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW3E,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,6BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACe,MAAPuT,OAAO,CACX3T,kBADW,EAEM;IACjB,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,EADW,EAEXxe,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,SAAjB,EAA4B5nB,IAA5B,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACK,kBAAM,EAAP,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,oBAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACqB,MAAbwT,aAAa,CACjB5T,kBADiB,EAEA;IACjB,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,EADW,EAEXxe,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,eAAjB,EAAkC5nB,IAAlC,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACvB,kBAAM,EAAP,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW0F,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,2BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;AACsB,EAAA,MAAdyT,cAAc,CAClBC,SADkB,EAElBC,KAFkB,EAGS;AAC3B,IAAA,MAAMhuB,IAAI,GAAG,CAAC+tB,SAAD,EAAYC,KAAZ,CAAb,CAAA;IACA,MAAM7D,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACxI,iBAAK,CAAC8G,mBAAD,CAAN,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW6F,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,4BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC0B,EAAA,MAAlB4T,kBAAkB,CACtB9wB,SADsB,EAEtBsM,MAFsB,EAGkC;IACxD,MAAM;MAACyR,OAAD;AAAUjhB,MAAAA,KAAK,EAAEuH,MAAAA;KAAU,GAAA,MAAM,KAAK0sB,oBAAL,CACrC,CAAC/wB,SAAD,CADqC,EAErCsM,MAFqC,CAAvC,CAAA;AAIA3E,IAAAA,MAAM,CAACtD,MAAM,CAAC/H,MAAP,KAAkB,CAAnB,CAAN,CAAA;AACA,IAAA,MAAMQ,KAAK,GAAGuH,MAAM,CAAC,CAAD,CAApB,CAAA;IACA,OAAO;MAAC0Z,OAAD;AAAUjhB,MAAAA,KAAAA;KAAjB,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC4B,EAAA,MAApBi0B,oBAAoB,CACxBpoB,UADwB,EAExB2D,MAFwB,EAGuC;AAC/D,IAAA,MAAMgH,MAAa,GAAG,CAAC3K,UAAD,CAAtB,CAAA;;AACA,IAAA,IAAI2D,MAAJ,EAAY;MACVgH,MAAM,CAAC3Q,IAAP,CAAY2J,MAAZ,CAAA,CAAA;AACD,KAAA;;IACD,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,sBAAjB,EAAyCnX,MAAzC,CAAxB,CAAA;AACA,IAAA,MAAMwO,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYhG,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWlF,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,gCAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC2B,MAAnB8T,mBAAmB,CACvBlU,kBADuB,EAEN;IACjB,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,EADW,EAEXxe,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,qBAAjB,EAAwC5nB,IAAxC,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACK,kBAAM,EAAP,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,iCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACsB,MAAd+T,cAAc,CAAC1iB,UAAD,EAA2C;AAC7D,IAAA,MAAM2O,MAAM,GAAG,MAAM,IAAA,CAAKsQ,SAAL,CAAe;MAClCjf,UADkC;AAElC2iB,MAAAA,iCAAiC,EAAE,IAAA;AAFD,KAAf,CAArB,CAAA;AAIA,IAAA,OAAOhU,MAAM,CAACpgB,KAAP,CAAakmB,KAApB,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC4B,MAApBmO,oBAAoB,CACxB5iB,UADwB,EAEI;IAC5B,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,EAAhB,EAAoBxe,UAApB,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,sBAAjB,EAAyC5nB,IAAzC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYtK,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWZ,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,yBAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC0B,EAAA,MAAlBkU,kBAAkB,CACtBrW,SADsB,EAEtBnD,KAFsB,EAGtBkF,kBAHsB,EAIe;IACrC,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,CAAChS,SAAS,CAACve,GAAV,CAAc2C,MAAM,IAAIA,MAAM,CAAC5B,QAAP,EAAxB,CAAD,CADW,EAEXgR,UAFW,EAGXvR,SAAAA;AAAU;MACV,EACE,GAAGsP,MADL;AAEEsL,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBtL,MAAxB,KAAwBA,IAAAA,IAAAA,MAAxB,KAAwBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAEsL,KAAAA;AAFzC,KAJW,CAAb,CAAA;;IASA,MAAMoV,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYtO,wBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWoD,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,gCAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACoB,MAAZmU,YAAY,CAChBvU,kBADgB,EAEI;IACpB,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,EADW,EAEXxe,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,cAAjB,EAAiC5nB,IAAjC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrK,qBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWb,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,0BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACwB,EAAA,MAAhBoU,gBAAgB,GAA2B;IAC/C,MAAMtE,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,kBAAjB,EAAqC,EAArC,CAAxB,CAAA;AACA,IAAA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYpK,yBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWd,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,8BAAlC,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,MAAMuc,aAAa,GAAGzP,GAAG,CAAC5E,MAA1B,CAAA;IACA,OAAO,IAAI/F,aAAJ,CACLoa,aAAa,CAACna,aADT,EAELma,aAAa,CAACla,wBAFT,EAGLka,aAAa,CAACja,MAHT,EAILia,aAAa,CAACha,gBAJT,EAKLga,aAAa,CAAC/Z,eALT,CAAP,CAAA;AAOD,GAAA;AAED;AACF;AACA;AACA;;;AACyB,EAAA,MAAjBga,iBAAiB,GAA4B;IACjD,MAAMxE,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,mBAAjB,EAAsC,EAAtC,CAAxB,CAAA;AACA,IAAA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYnK,0BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWf,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,+BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AACyC,EAAA,MAAjCtI,iCAAiC,CACrC5P,UADqC,EAErCuJ,UAFqC,EAGpB;IACjB,MAAM1L,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CAAgB,CAAC/nB,UAAD,CAAhB,EAA8BuJ,UAA9B,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CACtB,mCADsB,EAEtB5nB,IAFsB,CAAxB,CAAA;AAIA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY/F,0CAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWnF,GAAf,EAAoB;MAClBnY,OAAO,CAACC,IAAR,CAAa,oDAAb,CAAA,CAAA;AACA,MAAA,OAAO,CAAP,CAAA;AACD,KAAA;;IACD,OAAOkY,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EACoC,MAA5BuU,4BAA4B,CAChCljB,UADgC,EAIhC;IACA,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,EAAhB,EAAoBxe,UAApB,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY1D,qCAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWxH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,gCAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;EACmC,MAA3BwU,2BAA2B,CAC/Bb,KAD+B,EAEH;AAC5B,IAAA,MAAM7D,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CACtB,6BADsB,EAEtBoG,KAAK,GAAG,CAACA,KAAD,CAAH,GAAa,EAFI,CAAxB,CAAA;AAIA,IAAA,MAAM/O,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYnD,oCAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW/H,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,0CAFI,CAAN,CAAA;AAID,KAAA;;IAED,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACoC,EAAA,MAA5ByU,4BAA4B,CAChCxoB,SADgC,EAEhCoF,UAFgC,EAGsB;IACtD,MAAM1L,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CAAgB,CAAC5jB,SAAD,CAAhB,EAA6BoF,UAA7B,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CACtB,8BADsB,EAEtB5nB,IAFsB,CAAxB,CAAA;AAKA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlD,yBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWhI,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,8BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,MAAM;MAAC+I,OAAD;AAAUjhB,MAAAA,KAAAA;KAASglB,GAAAA,GAAG,CAAC5E,MAA7B,CAAA;IACA,OAAO;MACLa,OADK;MAELjhB,KAAK,EAAEA,KAAK,KAAK,IAAV,GAAiBA,KAAK,CAAC8S,aAAvB,GAAuC,IAAA;KAFhD,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AACwB,EAAA,MAAhBpE,gBAAgB,CACpB7Q,OADoB,EAEpB4T,UAFoB,EAGoB;IACxC,MAAMqjB,WAAW,GAAGj3B,OAAO,CAACiB,SAAR,EAAoBmC,CAAAA,QAApB,CAA6B,QAA7B,CAApB,CAAA;;IACA,MAAM8E,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CAAgB,CAAC6E,WAAD,CAAhB,EAA+BrjB,UAA/B,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,kBAAjB,EAAqC5nB,IAArC,CAAxB,CAAA;AAEA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlP,uBAAuB,CAACa,oBAAQ,CAACX,kBAAM,EAAP,CAAT,CAAnC,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,oBAAlC,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,IAAI8M,GAAG,CAAC5E,MAAJ,KAAe,IAAnB,EAAyB;AACvB,MAAA,MAAM,IAAI3gB,KAAJ,CAAU,mBAAV,CAAN,CAAA;AACD,KAAA;;IACD,OAAOulB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EAC0B,MAAlB2U,kBAAkB,CACtBtjB,UADsB,EAEyC;IAC/D,IAAI;AACF,MAAA,MAAMuT,GAAG,GAAG,MAAM,KAAK2P,4BAAL,CAAkCljB,UAAlC,CAAlB,CAAA;MACA,OAAOuT,GAAG,CAAChlB,KAAX,CAAA;KAFF,CAGE,OAAOswB,CAAP,EAAU;AACV,MAAA,MAAM,IAAI7wB,KAAJ,CAAU,kCAAA,GAAqC6wB,CAA/C,CAAN,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;AACA;;;EAC0B,MAAlB0E,kBAAkB,CACtBhV,kBADsB,EAEmB;IACzC,IAAI;AACF,MAAA,MAAMgF,GAAG,GAAG,MAAM,KAAKiQ,4BAAL,CAAkCjV,kBAAlC,CAAlB,CAAA;MACA,OAAOgF,GAAG,CAAChlB,KAAX,CAAA;KAFF,CAGE,OAAOswB,CAAP,EAAU;AACV,MAAA,MAAM,IAAI7wB,KAAJ,CAAU,kCAAA,GAAqC6wB,CAA/C,CAAN,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;AACA;;;EACoC,MAA5B2E,4BAA4B,CAChCjV,kBADgC,EAEgC;IAChE,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,EADW,EAEXxe,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYxD,2BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW1H,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,gCAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACkB,EAAA,MAAV8U,UAAU,GAAqB;IACnC,MAAMhF,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,YAAjB,EAA+B,EAA/B,CAAxB,CAAA;IACA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACgC,aAAD,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWmC,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,uBAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACsB,EAAA,MAAd+U,cAAc,GAAoB;IACtC,MAAMjF,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC,EAAnC,CAAxB,CAAA;IACA,MAAM3I,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACvB,kBAAM,EAAP,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW0F,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,4BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;AAeE;AACF;AACA;AACE;AACc,EAAA,MAARgV,QAAQ,CACZxa,IADY,EAEZya,SAFY,EAG4B;IACxC,MAAM;MAAC5jB,UAAD;AAAajC,MAAAA,MAAAA;KAAUuQ,GAAAA,2BAA2B,CAACsV,SAAD,CAAxD,CAAA;;IACA,MAAMtvB,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CACX,CAAC1a,IAAD,CADW,EAEXnJ,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,UAAjB,EAA6B5nB,IAA7B,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYnE,iBAAZ,CAAlB,CAAA;;IAEA,IAAI,OAAA,IAAW/G,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,+BAAlC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;AACA,IAAA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP,CAAA;IAEb,OAAO,EACL,GAAGA,MADE;AAEL9H,MAAAA,YAAY,EAAE8H,MAAM,CAAC9H,YAAP,CAAoB5Y,GAApB,CAAwB,CAAC;QAACgJ,WAAD;QAAcsF,IAAd;AAAoBxH,QAAAA,OAAAA;AAApB,OAAD,MAAmC;QACvEwH,IADuE;QAEvEtF,WAAW,EAAE,EACX,GAAGA,WADQ;AAEX7K,UAAAA,OAAO,EAAEujB,4BAA4B,CAAC5a,OAAD,EAAUkC,WAAW,CAAC7K,OAAtB,CAAA;SAJgC;AAMvE2I,QAAAA,OAAAA;AANuE,OAAnC,CAAxB,CAAA;KAFhB,CAAA;AAWD,GAAA;AAED;AACF;AACA;;;EACsB,MAAd0sB,cAAc,CAClBlT,kBADkB,EAED;IACjB,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;IAEA,MAAMja,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,EADW,EAEXxe,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACK,kBAAM,EAAP,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,wCAFI,CAAN,CAAA;AAID,KAAA;;IAED,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC0B,MAAlBmV,kBAAkB,CACtBxD,kBADsB,EAE2B;AACjD,IAAA,IAAIyD,KAAJ,CAAA;AACA,IAAA,IAAI/jB,UAAJ,CAAA;;AAEA,IAAA,IAAI,OAAOsgB,kBAAP,KAA8B,QAAlC,EAA4C;AAC1CtgB,MAAAA,UAAU,GAAGsgB,kBAAb,CAAA;KADF,MAEO,IAAIA,kBAAJ,EAAwB;MAC7B,MAAM;AAACtgB,QAAAA,UAAU,EAAEgkB,CAAb;QAAgB,GAAG5W,IAAAA;AAAnB,OAAA,GAA2BkT,kBAAjC,CAAA;AACAtgB,MAAAA,UAAU,GAAGgkB,CAAb,CAAA;AACAD,MAAAA,KAAK,GAAG3W,IAAR,CAAA;AACD,KAAA;;AAED,IAAA,MAAM9Y,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,EAAhB,EAAoBxe,UAApB,EAAgC,QAAhC,EAA0C+jB,KAA1C,CAAb,CAAA;;IACA,MAAMtF,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,oBAAjB,EAAuC5nB,IAAvC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYhN,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8B,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,4CAFI,CAAN,CAAA;AAID,KAAA;;IAED,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAeE;AACF;AACA;AACE;AACoB,EAAA,MAAdsV,cAAc,CAClBxyB,SADkB,EAElBmyB,SAFkB,EAG4B;IAC9C,MAAM;MAAC5jB,UAAD;AAAajC,MAAAA,MAAAA;KAAUuQ,GAAAA,2BAA2B,CAACsV,SAAD,CAAxD,CAAA;;IACA,MAAMtvB,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CACX,CAACpyB,SAAD,CADW,EAEXuO,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXsP,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY5D,uBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWtH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,2BAAlC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;AACA,IAAA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP,CAAA;IAEb,OAAO,EACL,GAAGA,MADE;AAEL1X,MAAAA,WAAW,EAAE,EACX,GAAG0X,MAAM,CAAC1X,WADC;QAEX7K,OAAO,EAAEujB,4BAA4B,CACnChB,MAAM,CAAC5Z,OAD4B,EAEnC4Z,MAAM,CAAC1X,WAAP,CAAmB7K,OAFgB,CAAA;AAF1B,OAAA;KAFf,CAAA;AAUD,GAAA;AAED;AACF;AACA;;;AAC4B,EAAA,MAApB83B,oBAAoB,CACxBzyB,SADwB,EAExB8c,kBAFwB,EAGmB;IAC3C,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;;AAEA,IAAA,MAAMja,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACX,CAACpyB,SAAD,CADW,EAEXuO,UAFW,EAGX,YAHW,EAIXjC,MAJW,CAAb,CAAA;;IAMA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,gBAAjB,EAAmC5nB,IAAnC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY3D,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWvH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,2BAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC6B,EAAA,MAArBwV,qBAAqB,CACzB/pB,UADyB,EAEzBmU,kBAFyB,EAGsB;IAC/C,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;AAEA,IAAA,MAAM0F,KAAK,GAAG7Z,UAAU,CAACnM,GAAX,CAAewD,SAAS,IAAI;AACxC,MAAA,MAAM6C,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACX,CAACpyB,SAAD,CADW,EAEXuO,UAFW,EAGX,YAHW,EAIXjC,MAJW,CAAb,CAAA;;MAMA,OAAO;AACLmW,QAAAA,UAAU,EAAE,gBADP;AAEL5f,QAAAA,IAAAA;OAFF,CAAA;AAID,KAXa,CAAd,CAAA;AAaA,IAAA,MAAMmqB,SAAS,GAAG,MAAM,KAAKtC,gBAAL,CAAsBlI,KAAtB,CAAxB,CAAA;AACA,IAAA,MAAMV,GAAG,GAAGkL,SAAS,CAACxwB,GAAV,CAAewwB,SAAD,IAAoB;AAC5C,MAAA,MAAMlL,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY3D,6BAAZ,CAAlB,CAAA;;MACA,IAAI,OAAA,IAAWvH,GAAf,EAAoB;QAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,4BAAlC,CAAN,CAAA;AACD,OAAA;;MACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,KANW,CAAZ,CAAA;AAQA,IAAA,OAAO4E,GAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAiBE;AACF;AACA;AACA;AACA;AACE;AACqB,EAAA,MAAf6Q,eAAe,CACnBhqB,UADmB,EAEnBmU,kBAFmB,EAG+B;IAClD,MAAM;MAACvO,UAAD;AAAajC,MAAAA,MAAAA;KACjBuQ,GAAAA,2BAA2B,CAACC,kBAAD,CAD7B,CAAA;AAEA,IAAA,MAAM0F,KAAK,GAAG7Z,UAAU,CAACnM,GAAX,CAAewD,SAAS,IAAI;MACxC,MAAM6C,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CACX,CAACpyB,SAAD,CADW,EAEXuO,UAFW,EAGXvR,SAAAA;AAAU;AAHC,QAIXsP,MAJW,CAAb,CAAA;;MAMA,OAAO;AACLmW,QAAAA,UAAU,EAAE,gBADP;AAEL5f,QAAAA,IAAAA;OAFF,CAAA;AAID,KAXa,CAAd,CAAA;AAaA,IAAA,MAAMmqB,SAAS,GAAG,MAAM,KAAKtC,gBAAL,CAAsBlI,KAAtB,CAAxB,CAAA;AACA,IAAA,MAAMV,GAAG,GAAGkL,SAAS,CAACxwB,GAAV,CAAewwB,SAAD,IAAoB;AAC5C,MAAA,MAAMlL,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY5D,uBAAZ,CAAlB,CAAA;;MACA,IAAI,OAAA,IAAWtH,GAAf,EAAoB;QAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,4BAAlC,CAAN,CAAA;AACD,OAAA;;AACD,MAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;AACA,MAAA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP,CAAA;MAEb,OAAO,EACL,GAAGA,MADE;AAEL1X,QAAAA,WAAW,EAAE,EACX,GAAG0X,MAAM,CAAC1X,WADC;UAEX7K,OAAO,EAAEujB,4BAA4B,CACnChB,MAAM,CAAC5Z,OAD4B,EAEnC4Z,MAAM,CAAC1X,WAAP,CAAmB7K,OAFgB,CAAA;AAF1B,SAAA;OAFf,CAAA;AAUD,KAlBW,CAAZ,CAAA;AAoBA,IAAA,OAAOmnB,GAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;AACyB,EAAA,MAAjB8Q,iBAAiB,CACrBlb,IADqB,EAErBnJ,UAFqB,EAGI;IACzB,MAAM1L,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CAAgC,CAAC1a,IAAD,CAAhC,EAAwCnJ,UAAxC,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,mBAAjB,EAAsC5nB,IAAtC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY9D,0BAAZ,CAAlB,CAAA;;IAEA,IAAI,OAAA,IAAWpH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,+BAAlC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;;IACA,IAAI,CAACA,MAAL,EAAa;AACX,MAAA,MAAM,IAAI3gB,KAAJ,CAAU,qBAAqBmb,IAArB,GAA4B,YAAtC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMmb,KAAK,GAAG,EACZ,GAAG3V,MADS;AAEZ9H,MAAAA,YAAY,EAAE8H,MAAM,CAAC9H,YAAP,CAAoB5Y,GAApB,CAAwB,CAAC;QAACgJ,WAAD;AAAcsF,QAAAA,IAAAA;AAAd,OAAD,KAAyB;QAC7D,MAAMnQ,OAAO,GAAG,IAAIiI,OAAJ,CAAY4C,WAAW,CAAC7K,OAAxB,CAAhB,CAAA;QACA,OAAO;UACLmQ,IADK;UAELtF,WAAW,EAAE,EACX,GAAGA,WADQ;AAEX7K,YAAAA,OAAAA;AAFW,WAAA;SAFf,CAAA;OAFY,CAAA;KAFhB,CAAA;IAcA,OAAO,EACL,GAAGk4B,KADE;AAELzd,MAAAA,YAAY,EAAEyd,KAAK,CAACzd,YAAN,CAAmB5Y,GAAnB,CAAuB,CAAC;QAACgJ,WAAD;AAAcsF,QAAAA,IAAAA;AAAd,OAAD,KAAyB;QAC5D,OAAO;UACLA,IADK;UAELtF,WAAW,EAAEkD,WAAW,CAACkE,QAAZ,CACXpH,WAAW,CAAC7K,OADD,EAEX6K,WAAW,CAACmD,UAFD,CAAA;SAFf,CAAA;OADY,CAAA;KAFhB,CAAA;AAYD,GAAA;AAED;AACF;AACA;;;AACiB,EAAA,MAATmqB,SAAS,CACblC,SADa,EAEbmC,OAFa,EAGbxkB,UAHa,EAIW;IACxB,MAAM1L,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACXW,OAAO,KAAK/1B,SAAZ,GAAwB,CAAC4zB,SAAD,EAAYmC,OAAZ,CAAxB,GAA+C,CAACnC,SAAD,CADpC,EAEXriB,UAFW,CAAb,CAAA;;IAIA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,WAAjB,EAA8B5nB,IAA9B,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYrP,aAAa,CAACxI,iBAAK,CAAC6I,kBAAM,EAAP,CAAN,CAAzB,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,sBAAlC,CAAN,CAAA;AACD,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC0B,EAAA,MAAlB8V,kBAAkB,CACtBtb,IADsB,EAEtBnJ,UAFsB,EAGI;AAC1B,IAAA,MAAM1L,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACX,CAAC1a,IAAD,CADW,EAEXnJ,UAFW,EAGXvR,SAHW,EAIX;AACEi2B,MAAAA,kBAAkB,EAAE,YADtB;AAEEjK,MAAAA,OAAO,EAAE,KAAA;AAFX,KAJW,CAAb,CAAA;;IASA,MAAMgE,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,UAAjB,EAA6B5nB,IAA7B,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY7D,2BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWrH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,qBAAlC,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;;IACA,IAAI,CAACA,MAAL,EAAa;AACX,MAAA,MAAM,IAAI3gB,KAAJ,CAAU,WAAWmb,IAAX,GAAkB,YAA5B,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,OAAOwF,MAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACmC,EAAA,MAA3BgW,2BAA2B,CAC/Bxb,IAD+B,EAE/BnJ,UAF+B,EAGL;AAC1B,IAAA,MAAM1L,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACX,CAAC1a,IAAD,CADW,EAEXnJ,UAFW,EAGXvR,SAHW,EAIX;AACEi2B,MAAAA,kBAAkB,EAAE,YADtB;AAEEjK,MAAAA,OAAO,EAAE,KAAA;AAFX,KAJW,CAAb,CAAA;;IASA,MAAMgE,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,mBAAjB,EAAsC5nB,IAAtC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY7D,2BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWrH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,+BAAlC,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;;IACA,IAAI,CAACA,MAAL,EAAa;AACX,MAAA,MAAM,IAAI3gB,KAAJ,CAAU,qBAAqBmb,IAArB,GAA4B,YAAtC,CAAN,CAAA;AACD,KAAA;;AACD,IAAA,OAAOwF,MAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AAC+B,EAAA,MAAvBiW,uBAAuB,CAC3BnzB,SAD2B,EAE3BuO,UAF2B,EAGW;IACtC,MAAM1L,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CAAgC,CAACpyB,SAAD,CAAhC,EAA6CuO,UAA7C,CAAb,CAAA;;IACA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,yBAAjB,EAA4C5nB,IAA5C,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY5D,uBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWtH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CAAuBqI,GAAG,CAAC9M,KAA3B,EAAkC,2BAAlC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMkI,MAAM,GAAG4E,GAAG,CAAC5E,MAAnB,CAAA;AACA,IAAA,IAAI,CAACA,MAAL,EAAa,OAAOA,MAAP,CAAA;IAEb,MAAMviB,OAAO,GAAG,IAAIiI,OAAJ,CAAYsa,MAAM,CAAC1X,WAAP,CAAmB7K,OAA/B,CAAhB,CAAA;AACA,IAAA,MAAMgO,UAAU,GAAGuU,MAAM,CAAC1X,WAAP,CAAmBmD,UAAtC,CAAA;IACA,OAAO,EACL,GAAGuU,MADE;AAEL1X,MAAAA,WAAW,EAAEkD,WAAW,CAACkE,QAAZ,CAAqBjS,OAArB,EAA8BgO,UAA9B,CAAA;KAFf,CAAA;AAID,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACqC,EAAA,MAA7ByqB,6BAA6B,CACjCpzB,SADiC,EAEjCuO,UAFiC,EAGW;AAC5C,IAAA,MAAM1L,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACX,CAACpyB,SAAD,CADW,EAEXuO,UAFW,EAGX,YAHW,CAAb,CAAA;;IAKA,MAAMye,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,yBAAjB,EAA4C5nB,IAA5C,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY3D,6BAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWvH,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,qCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;AACsC,EAAA,MAA9BmW,8BAA8B,CAClC1qB,UADkC,EAElC4F,UAFkC,EAGc;AAChD,IAAA,MAAMiU,KAAK,GAAG7Z,UAAU,CAACnM,GAAX,CAAewD,SAAS,IAAI;AACxC,MAAA,MAAM6C,IAAI,GAAG,IAAKuvB,CAAAA,0BAAL,CACX,CAACpyB,SAAD,CADW,EAEXuO,UAFW,EAGX,YAHW,CAAb,CAAA;;MAKA,OAAO;AACLkU,QAAAA,UAAU,EAAE,yBADP;AAEL5f,QAAAA,IAAAA;OAFF,CAAA;AAID,KAVa,CAAd,CAAA;AAYA,IAAA,MAAMmqB,SAAS,GAAG,MAAM,KAAKtC,gBAAL,CAAsBlI,KAAtB,CAAxB,CAAA;AACA,IAAA,MAAMV,GAAG,GAAGkL,SAAS,CAACxwB,GAAV,CAAewwB,SAAD,IAAoB;AAC5C,MAAA,MAAMlL,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY3D,6BAAZ,CAAlB,CAAA;;MACA,IAAI,OAAA,IAAWvH,GAAf,EAAoB;QAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,sCAFI,CAAN,CAAA;AAID,OAAA;;MACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,KATW,CAAZ,CAAA;AAWA,IAAA,OAAO4E,GAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwC,EAAA,MAAhCwR,gCAAgC,CACpCx0B,OADoC,EAEpC8xB,SAFoC,EAGpCmC,OAHoC,EAIE;IACtC,IAAI5kB,OAAY,GAAG,EAAnB,CAAA;AAEA,IAAA,IAAIolB,mBAAmB,GAAG,MAAM,IAAA,CAAKhG,sBAAL,EAAhC,CAAA;;AACA,IAAA,OAAO,EAAE,OAAA,IAAWpf,OAAb,CAAP,EAA8B;MAC5ByiB,SAAS,EAAA,CAAA;;AACT,MAAA,IAAIA,SAAS,IAAI,CAAb,IAAkBA,SAAS,GAAG2C,mBAAlC,EAAuD;AACrD,QAAA,MAAA;AACD,OAAA;;MAED,IAAI;QACF,MAAMV,KAAK,GAAG,MAAM,IAAA,CAAKK,2BAAL,CAClBtC,SADkB,EAElB,WAFkB,CAApB,CAAA;;AAIA,QAAA,IAAIiC,KAAK,CAAClqB,UAAN,CAAiBrM,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B6R,UAAAA,OAAO,CAACqlB,KAAR,GACEX,KAAK,CAAClqB,UAAN,CAAiBkqB,KAAK,CAAClqB,UAAN,CAAiBrM,MAAjB,GAA0B,CAA3C,CAAA,CAA8CyB,QAA9C,EADF,CAAA;AAED,SAAA;OARH,CASE,OAAOiB,GAAP,EAAY;AACZ,QAAA,IAAIA,GAAG,YAAYzC,KAAf,IAAwByC,GAAG,CAACrE,OAAJ,CAAYoP,QAAZ,CAAqB,SAArB,CAA5B,EAA6D;AAC3D,UAAA,SAAA;AACD,SAFD,MAEO;AACL,UAAA,MAAM/K,GAAN,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;AAED,IAAA,IAAIy0B,oBAAoB,GAAG,MAAM,KAAKhD,OAAL,CAAa,WAAb,CAAjC,CAAA;;AACA,IAAA,OAAO,EAAE,QAAA,IAAYtiB,OAAd,CAAP,EAA+B;MAC7B4kB,OAAO,EAAA,CAAA;;MACP,IAAIA,OAAO,GAAGU,oBAAd,EAAoC;AAClC,QAAA,MAAA;AACD,OAAA;;MAED,IAAI;AACF,QAAA,MAAMZ,KAAK,GAAG,MAAM,KAAKK,2BAAL,CAAiCH,OAAjC,CAApB,CAAA;;AACA,QAAA,IAAIF,KAAK,CAAClqB,UAAN,CAAiBrM,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B6R,UAAAA,OAAO,CAACulB,MAAR,GACEb,KAAK,CAAClqB,UAAN,CAAiBkqB,KAAK,CAAClqB,UAAN,CAAiBrM,MAAjB,GAA0B,CAA3C,CAAA,CAA8CyB,QAA9C,EADF,CAAA;AAED,SAAA;OALH,CAME,OAAOiB,GAAP,EAAY;AACZ,QAAA,IAAIA,GAAG,YAAYzC,KAAf,IAAwByC,GAAG,CAACrE,OAAJ,CAAYoP,QAAZ,CAAqB,SAArB,CAA5B,EAA6D;AAC3D,UAAA,SAAA;AACD,SAFD,MAEO;AACL,UAAA,MAAM/K,GAAN,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;IAED,MAAM20B,sBAAsB,GAAG,MAAM,IAAA,CAAKC,iCAAL,CACnC90B,OADmC,EAEnCqP,OAFmC,CAArC,CAAA;IAIA,OAAOwlB,sBAAsB,CAACn3B,GAAvB,CAA2BukB,IAAI,IAAIA,IAAI,CAAC/gB,SAAxC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACyC,EAAA,MAAjC4zB,iCAAiC,CACrC90B,OADqC,EAErCqP,OAFqC,EAGrCI,UAHqC,EAIG;AACxC,IAAA,MAAM1L,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CACX,CAACtzB,OAAO,CAACvB,QAAR,EAAD,CADW,EAEXgR,UAFW,EAGXvR,SAHW,EAIXmR,OAJW,CAAb,CAAA;;IAMA,MAAM6e,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CACtB,mCADsB,EAEtB5nB,IAFsB,CAAxB,CAAA;AAIA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAY1I,0CAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWxC,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,gDAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,EAAA,MAAvB2W,uBAAuB,CAC3B/0B,OAD2B,EAE3BqP,OAF2B,EAG3BI,UAH2B,EAIa;AACxC,IAAA,MAAM1L,IAAI,GAAG,IAAA,CAAKuvB,0BAAL,CACX,CAACtzB,OAAO,CAACvB,QAAR,EAAD,CADW,EAEXgR,UAFW,EAGXvR,SAHW,EAIXmR,OAJW,CAAb,CAAA;;IAMA,MAAM6e,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,yBAAjB,EAA4C5nB,IAA5C,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYvI,gCAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW3C,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEJ,sCAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;;AAE0B,EAAA,MAArB4W,qBAAqB,CACzBrsB,UADyB,EAEzB6E,MAFyB,EAGyC;IAClE,MAAM;MAACyR,OAAD;AAAUjhB,MAAAA,KAAK,EAAEi3B,WAAAA;AAAjB,KAAA,GAAgC,MAAM,IAAKzF,CAAAA,wBAAL,CAC1C7mB,UAD0C,EAE1C6E,MAF0C,CAA5C,CAAA;IAKA,IAAIxP,KAAK,GAAG,IAAZ,CAAA;;IACA,IAAIi3B,WAAW,KAAK,IAApB,EAA0B;MACxBj3B,KAAK,GAAG,IAAIwd,yBAAJ,CAA8B;AACpC7d,QAAAA,GAAG,EAAEgL,UAD+B;AAEpC8S,QAAAA,KAAK,EAAED,yBAAyB,CAACte,WAA1B,CAAsC+3B,WAAW,CAACh4B,IAAlD,CAAA;AAF6B,OAA9B,CAAR,CAAA;AAID,KAAA;;IAED,OAAO;MACLgiB,OADK;AAELjhB,MAAAA,KAAAA;KAFF,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AAC0B,EAAA,MAAlBk3B,kBAAkB,CACtBlkB,YADsB,EAEtBvB,UAFsB,EAG+B;IACrD,MAAM;MAACwP,OAAD;AAAUjhB,MAAAA,KAAK,EAAEi3B,WAAAA;AAAjB,KAAA,GAAgC,MAAM,IAAKzF,CAAAA,wBAAL,CAC1Cxe,YAD0C,EAE1CvB,UAF0C,CAA5C,CAAA;IAKA,IAAIzR,KAAK,GAAG,IAAZ,CAAA;;IACA,IAAIi3B,WAAW,KAAK,IAApB,EAA0B;MACxBj3B,KAAK,GAAG4S,YAAY,CAACG,eAAb,CAA6BkkB,WAAW,CAACh4B,IAAzC,CAAR,CAAA;AACD,KAAA;;IAED,OAAO;MACLgiB,OADK;AAELjhB,MAAAA,KAAAA;KAFF,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AACgB,EAAA,MAARm3B,QAAQ,CACZnkB,YADY,EAEZvB,UAFY,EAGkB;AAC9B,IAAA,OAAO,MAAM,IAAKylB,CAAAA,kBAAL,CAAwBlkB,YAAxB,EAAsCvB,UAAtC,CACV2e,CAAAA,IADU,CACL9iB,CAAC,IAAIA,CAAC,CAACtN,KADF,EAEVqwB,KAFU,CAEJC,CAAC,IAAI;AACV,MAAA,MAAM,IAAI7wB,KAAJ,CACJ,kCAAA,GACEuT,YAAY,CAACvS,QAAb,EADF,GAEE,IAFF,GAGE6vB,CAJE,CAAN,CAAA;AAMD,KATU,CAAb,CAAA;AAUD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,EAAA,MAAd8G,cAAc,CAClBC,EADkB,EAElBnjB,QAFkB,EAGa;AAC/B,IAAA,MAAMgc,SAAS,GAAG,MAAM,IAAKvC,CAAAA,WAAL,CAAiB,gBAAjB,EAAmC,CACzD0J,EAAE,CAAC52B,QAAH,EADyD,EAEzDyT,QAFyD,CAAnC,CAAxB,CAAA;AAIA,IAAA,MAAM8Q,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYjD,uBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWjI,GAAf,EAAoB;AAClB,MAAA,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,CAAA,WAAA,EAAamf,EAAE,CAAC52B,QAAH,EAAc,SAFxB,CAAN,CAAA;AAID,KAAA;;IACD,OAAOukB,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACuC,MAA/BkX,+BAA+B,CACnCC,YADmC,EAEM;IACzC,IAAI,CAACA,YAAL,EAAmB;AACjB;MACA,OAAO,IAAA,CAAKpJ,iBAAZ,EAA+B;QAC7B,MAAMpc,KAAK,CAAC,GAAD,CAAX,CAAA;AACD,OAAA;;MACD,MAAMylB,cAAc,GAAGC,IAAI,CAACC,GAAL,EAAa,GAAA,IAAA,CAAKtJ,cAAL,CAAoBE,SAAxD,CAAA;;AACA,MAAA,MAAMqJ,OAAO,GAAGH,cAAc,IAAI7X,0BAAlC,CAAA;;MACA,IAAI,IAAA,CAAKyO,cAAL,CAAoBC,eAApB,KAAwC,IAAxC,IAAgD,CAACsJ,OAArD,EAA8D;QAC5D,OAAO,IAAA,CAAKvJ,cAAL,CAAoBC,eAA3B,CAAA;AACD,OAAA;AACF,KAAA;;IAED,OAAO,MAAM,IAAKuJ,CAAAA,iBAAL,EAAb,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACyB,EAAA,MAAjBA,iBAAiB,GAA4C;IACjE,IAAKzJ,CAAAA,iBAAL,GAAyB,IAAzB,CAAA;;IACA,IAAI;AACF,MAAA,MAAM0J,SAAS,GAAGJ,IAAI,CAACC,GAAL,EAAlB,CAAA;AACA,MAAA,MAAMI,qBAAqB,GAAG,IAAK1J,CAAAA,cAAL,CAAoBC,eAAlD,CAAA;MACA,MAAM0J,eAAe,GAAGD,qBAAqB,GACzCA,qBAAqB,CAACzrB,SADmB,GAEzC,IAFJ,CAAA;;MAGA,KAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAA,MAAMulB,eAAe,GAAG,MAAM,KAAK2G,kBAAL,CAAwB,WAAxB,CAA9B,CAAA;;AAEA,QAAA,IAAI+C,eAAe,KAAK1J,eAAe,CAAChiB,SAAxC,EAAmD;AACjD,UAAA,IAAA,CAAK+hB,cAAL,GAAsB;YACpBC,eADoB;AAEpBC,YAAAA,SAAS,EAAEmJ,IAAI,CAACC,GAAL,EAFS;AAGpBnJ,YAAAA,qBAAqB,EAAE,EAHH;AAIpBC,YAAAA,mBAAmB,EAAE,EAAA;WAJvB,CAAA;AAMA,UAAA,OAAOH,eAAP,CAAA;AACD,SAX0B;;;AAc3B,QAAA,MAAMtc,KAAK,CAACuL,WAAW,GAAG,CAAf,CAAX,CAAA;AACD,OAAA;;MAED,MAAM,IAAI7d,KAAJ,CACH,CAAyCg4B,uCAAAA,EAAAA,IAAI,CAACC,GAAL,EAAA,GAAaG,SAAU,CAAA,EAAA,CAD7D,CAAN,CAAA;AAGD,KA1BD,SA0BU;MACR,IAAK1J,CAAAA,iBAAL,GAAyB,KAAzB,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;EACiC,MAAzB6J,yBAAyB,CAC7BxoB,MAD6B,EAEW;IACxC,MAAM;MAACiC,UAAD;AAAajC,MAAAA,MAAM,EAAEmhB,SAAAA;KAAa5Q,GAAAA,2BAA2B,CAACvQ,MAAD,CAAnE,CAAA;;AACA,IAAA,MAAMzJ,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CAAgB,EAAhB,EAAoBxe,UAApB,EAAgC,QAAhC,EAA0Ckf,SAA1C,CAAb,CAAA;;IACA,MAAMT,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,2BAAjB,EAA8C5nB,IAA9C,CAAxB,CAAA;IACA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYlP,uBAAuB,CAACE,kBAAM,EAAP,CAAnC,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAW8D,GAAf,EAAoB;MAClB,MAAM,IAAIrI,kBAAJ,CACJqI,GAAG,CAAC9M,KADA,EAEH,wCAFG,CAAN,CAAA;AAID,KAAA;;IACD,OAAO8M,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAC2B,EAAA,MAAnB6X,mBAAmB,CACvBC,oBADuB,EAEvB3rB,OAFuB,EAGvB4rB,eAHuB,EAIuC;AAC9D,IAAA,IAAIzvB,WAAJ,CAAA;;IACA,IAAIwvB,oBAAoB,YAAYtsB,WAApC,EAAiD;MAC/C,IAAIwsB,UAAuB,GAAGF,oBAA9B,CAAA;MACAxvB,WAAW,GAAG,IAAIkD,WAAJ,EAAd,CAAA;AACAlD,MAAAA,WAAW,CAACoD,QAAZ,GAAuBssB,UAAU,CAACtsB,QAAlC,CAAA;AACApD,MAAAA,WAAW,CAACvC,YAAZ,GAA2B+xB,oBAAoB,CAAC/xB,YAAhD,CAAA;AACAuC,MAAAA,WAAW,CAACsD,SAAZ,GAAwBosB,UAAU,CAACpsB,SAAnC,CAAA;AACAtD,MAAAA,WAAW,CAACmD,UAAZ,GAAyBusB,UAAU,CAACvsB,UAApC,CAAA;AACD,KAPD,MAOO;MACLnD,WAAW,GAAGkD,WAAW,CAACkE,QAAZ,CAAqBooB,oBAArB,CAAd,CADK;;AAGLxvB,MAAAA,WAAW,CAACuD,QAAZ,GAAuBvD,WAAW,CAACwD,KAAZ,GAAoBhM,SAA3C,CAAA;AACD,KAAA;;AAED,IAAA,IAAIwI,WAAW,CAACsD,SAAZ,IAAyBO,OAA7B,EAAsC;AACpC7D,MAAAA,WAAW,CAAC9K,IAAZ,CAAiB,GAAG2O,OAApB,CAAA,CAAA;AACD,KAFD,MAEO;MACL,IAAIgrB,YAAY,GAAG,IAAA,CAAKrJ,wBAAxB,CAAA;;MACA,SAAS;AACP,QAAA,MAAMG,eAAe,GAAG,MAAM,KAAKiJ,+BAAL,CAC5BC,YAD4B,CAA9B,CAAA;AAGA7uB,QAAAA,WAAW,CAACqD,oBAAZ,GAAmCsiB,eAAe,CAACtiB,oBAAnD,CAAA;AACArD,QAAAA,WAAW,CAACxC,eAAZ,GAA8BmoB,eAAe,CAAChiB,SAA9C,CAAA;QAEA,IAAI,CAACE,OAAL,EAAc,MAAA;AAEd7D,QAAAA,WAAW,CAAC9K,IAAZ,CAAiB,GAAG2O,OAApB,CAAA,CAAA;;AACA,QAAA,IAAI,CAAC7D,WAAW,CAACxF,SAAjB,EAA4B;AAC1B,UAAA,MAAM,IAAIzD,KAAJ,CAAU,YAAV,CAAN,CAD0B;AAE3B,SAAA;;QAED,MAAMyD,SAAS,GAAGwF,WAAW,CAACxF,SAAZ,CAAsBjC,QAAtB,CAA+B,QAA/B,CAAlB,CAAA;;QACA,IACE,CAAC,KAAKmtB,cAAL,CAAoBI,mBAApB,CAAwCvhB,QAAxC,CAAiD/J,SAAjD,CAAD,IACA,CAAC,IAAA,CAAKkrB,cAAL,CAAoBG,qBAApB,CAA0CthB,QAA1C,CAAmD/J,SAAnD,CAFH,EAGE;AACA;AACA;AACA,UAAA,IAAA,CAAKkrB,cAAL,CAAoBI,mBAApB,CAAwC3oB,IAAxC,CAA6C3C,SAA7C,CAAA,CAAA;;AACA,UAAA,MAAA;AACD,SARD,MAQO;AACL;AACA;AACA;AACA;AACAq0B,UAAAA,YAAY,GAAG,IAAf,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;AAED,IAAA,MAAM15B,OAAO,GAAG6K,WAAW,CAACyF,QAAZ,EAAhB,CAAA;;AACA,IAAA,MAAMxF,QAAQ,GAAG9K,OAAO,CAACiB,SAAR,EAAjB,CAAA;;AACA,IAAA,MAAM8Q,eAAe,GAAGlH,WAAW,CAAC+G,UAAZ,CAAuB9G,QAAvB,CAAxB,CAAA;;AACA,IAAA,MAAM0vB,kBAAkB,GAAGzoB,eAAe,CAAC3O,QAAhB,CAAyB,QAAzB,CAA3B,CAAA;AACA,IAAA,MAAMuO,MAAW,GAAG;AAClBwiB,MAAAA,QAAQ,EAAE,QADQ;AAElBvgB,MAAAA,UAAU,EAAE,IAAKA,CAAAA,UAAAA;KAFnB,CAAA;;AAKA,IAAA,IAAI0mB,eAAJ,EAAqB;MACnB,MAAMla,SAAS,GAAG,CAChBhZ,KAAK,CAACC,OAAN,CAAcizB,eAAd,CACIA,GAAAA,eADJ,GAEIt6B,OAAO,CAAC2J,aAAR,EAHY,EAIhB9H,GAJgB,CAIZC,GAAG,IAAIA,GAAG,CAACc,QAAJ,EAJK,CAAlB,CAAA;MAMA+O,MAAM,CAAC,UAAD,CAAN,GAAqB;AACnBwiB,QAAAA,QAAQ,EAAE,QADS;AAEnB/T,QAAAA,SAAAA;OAFF,CAAA;AAID,KAAA;;AAED,IAAA,IAAI1R,OAAJ,EAAa;MACXiD,MAAM,CAAC8oB,SAAP,GAAmB,IAAnB,CAAA;AACD,KAAA;;AAED,IAAA,MAAMvyB,IAAI,GAAG,CAACsyB,kBAAD,EAAqB7oB,MAArB,CAAb,CAAA;IACA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,qBAAjB,EAAwC5nB,IAAxC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYpN,kCAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWkC,GAAf,EAAoB;AAClB,MAAA,IAAIvJ,IAAJ,CAAA;;AACA,MAAA,IAAI,MAAUuJ,IAAAA,GAAG,CAAC9M,KAAlB,EAAyB;AACvBuD,QAAAA,IAAI,GAAGuJ,GAAG,CAAC9M,KAAJ,CAAUjZ,IAAV,CAAewc,IAAtB,CAAA;;QACA,IAAIA,IAAI,IAAIxW,KAAK,CAACC,OAAN,CAAcuW,IAAd,CAAZ,EAAiC;UAC/B,MAAM8c,WAAW,GAAG,QAApB,CAAA;UACA,MAAMC,QAAQ,GAAGD,WAAW,GAAG9c,IAAI,CAACgd,IAAL,CAAUF,WAAV,CAA/B,CAAA;UACA1rB,OAAO,CAACqL,KAAR,CAAc8M,GAAG,CAAC9M,KAAJ,CAAUra,OAAxB,EAAiC26B,QAAjC,CAAA,CAAA;AACD,SAAA;AACF,OAAA;;MACD,MAAM,IAAIhd,oBAAJ,CACJ,kCAAqCwJ,GAAAA,GAAG,CAAC9M,KAAJ,CAAUra,OAD3C,EAEJ4d,IAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAOuJ,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACuB,EAAA,MAAfxO,eAAe,CACnBlJ,WADmB,EAEnB6D,OAFmB,EAGnB8E,OAHmB,EAIY;IAC/B,IAAI3I,WAAW,CAACsD,SAAhB,EAA2B;AACzBtD,MAAAA,WAAW,CAAC9K,IAAZ,CAAiB,GAAG2O,OAApB,CAAA,CAAA;AACD,KAFD,MAEO;MACL,IAAIgrB,YAAY,GAAG,IAAA,CAAKrJ,wBAAxB,CAAA;;MACA,SAAS;AACP,QAAA,MAAMG,eAAe,GAAG,MAAM,KAAKiJ,+BAAL,CAC5BC,YAD4B,CAA9B,CAAA;AAGA7uB,QAAAA,WAAW,CAACqD,oBAAZ,GAAmCsiB,eAAe,CAACtiB,oBAAnD,CAAA;AACArD,QAAAA,WAAW,CAACxC,eAAZ,GAA8BmoB,eAAe,CAAChiB,SAA9C,CAAA;AACA3D,QAAAA,WAAW,CAAC9K,IAAZ,CAAiB,GAAG2O,OAApB,CAAA,CAAA;;AACA,QAAA,IAAI,CAAC7D,WAAW,CAACxF,SAAjB,EAA4B;AAC1B,UAAA,MAAM,IAAIzD,KAAJ,CAAU,YAAV,CAAN,CAD0B;AAE3B,SAAA;;QAED,MAAMyD,SAAS,GAAGwF,WAAW,CAACxF,SAAZ,CAAsBjC,QAAtB,CAA+B,QAA/B,CAAlB,CAAA;;QACA,IAAI,CAAC,IAAKmtB,CAAAA,cAAL,CAAoBG,qBAApB,CAA0CthB,QAA1C,CAAmD/J,SAAnD,CAAL,EAAoE;AAClE;AACA;AACA,UAAA,IAAA,CAAKkrB,cAAL,CAAoBG,qBAApB,CAA0C1oB,IAA1C,CAA+C3C,SAA/C,CAAA,CAAA;;AACA,UAAA,MAAA;AACD,SALD,MAKO;AACL;AACA;AACA;AACA;AACAq0B,UAAAA,YAAY,GAAG,IAAf,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;AAED,IAAA,MAAM3nB,eAAe,GAAGlH,WAAW,CAAC5J,SAAZ,EAAxB,CAAA;AACA,IAAA,OAAO,MAAM,IAAK45B,CAAAA,kBAAL,CAAwB9oB,eAAxB,EAAyCyB,OAAzC,CAAb,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AAC0B,EAAA,MAAlBqnB,kBAAkB,CACtBC,cADsB,EAEtBtnB,OAFsB,EAGS;IAC/B,MAAMgnB,kBAAkB,GAAGr6B,QAAQ,CAAC26B,cAAD,CAAR,CAAyB13B,QAAzB,CAAkC,QAAlC,CAA3B,CAAA;IACA,MAAMmf,MAAM,GAAG,MAAM,IAAA,CAAKwY,sBAAL,CACnBP,kBADmB,EAEnBhnB,OAFmB,CAArB,CAAA;AAIA,IAAA,OAAO+O,MAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;AAC8B,EAAA,MAAtBwY,sBAAsB,CAC1BP,kBAD0B,EAE1BhnB,OAF0B,EAGK;AAC/B,IAAA,MAAM7B,MAAW,GAAG;AAACwiB,MAAAA,QAAQ,EAAE,QAAA;KAA/B,CAAA;AACA,IAAA,MAAMzgB,aAAa,GAAGF,OAAO,IAAIA,OAAO,CAACE,aAAzC,CAAA;IACA,MAAMC,mBAAmB,GACtBH,OAAO,IAAIA,OAAO,CAACG,mBAApB,IAA4C,IAAA,CAAKC,UADnD,CAAA;;AAGA,IAAA,IAAIJ,OAAO,IAAIA,OAAO,CAACK,UAAR,IAAsB,IAArC,EAA2C;AACzClC,MAAAA,MAAM,CAACkC,UAAP,GAAoBL,OAAO,CAACK,UAA5B,CAAA;AACD,KAAA;;AACD,IAAA,IAAIL,OAAO,IAAIA,OAAO,CAACM,cAAR,IAA0B,IAAzC,EAA+C;AAC7CnC,MAAAA,MAAM,CAACmC,cAAP,GAAwBN,OAAO,CAACM,cAAhC,CAAA;AACD,KAAA;;AACD,IAAA,IAAIJ,aAAJ,EAAmB;MACjB/B,MAAM,CAAC+B,aAAP,GAAuBA,aAAvB,CAAA;AACD,KAAA;;AACD,IAAA,IAAIC,mBAAJ,EAAyB;MACvBhC,MAAM,CAACgC,mBAAP,GAA6BA,mBAA7B,CAAA;AACD,KAAA;;AAED,IAAA,MAAMzL,IAAI,GAAG,CAACsyB,kBAAD,EAAqB7oB,MAArB,CAAb,CAAA;IACA,MAAM0gB,SAAS,GAAG,MAAM,IAAA,CAAKvC,WAAL,CAAiB,iBAAjB,EAAoC5nB,IAApC,CAAxB,CAAA;AACA,IAAA,MAAMif,GAAG,GAAGjE,kBAAM,CAACmP,SAAD,EAAYhD,wBAAZ,CAAlB,CAAA;;IACA,IAAI,OAAA,IAAWlI,GAAf,EAAoB;AAClB,MAAA,IAAIvJ,IAAJ,CAAA;;AACA,MAAA,IAAI,MAAUuJ,IAAAA,GAAG,CAAC9M,KAAlB,EAAyB;AACvBuD,QAAAA,IAAI,GAAGuJ,GAAG,CAAC9M,KAAJ,CAAUjZ,IAAV,CAAewc,IAAtB,CAAA;AACD,OAAA;;MACD,MAAM,IAAID,oBAAJ,CACJ,8BAAiCwJ,GAAAA,GAAG,CAAC9M,KAAJ,CAAUra,OADvC,EAEJ4d,IAFI,CAAN,CAAA;AAID,KAAA;;IACD,OAAOuJ,GAAG,CAAC5E,MAAX,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACEiP,EAAAA,SAAS,GAAG;IACV,IAAKvB,CAAAA,sBAAL,GAA8B,IAA9B,CAAA;AACA,IAAA,IAAA,CAAKC,sBAAL,GAA8B8K,WAAW,CAAC,MAAM;AAC9C;MACA,IAAKhL,CAAAA,aAAL,CAAmBiL,MAAnB,CAA0B,MAA1B,EAAkCzI,KAAlC,CAAwC,MAAM,EAA9C,CAAA,CAAA;KAFuC,EAGtC,IAHsC,CAAzC,CAAA;;AAIA,IAAA,IAAA,CAAK0I,oBAAL,EAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACEzJ,UAAU,CAACptB,GAAD,EAAa;IACrB,IAAK4rB,CAAAA,sBAAL,GAA8B,KAA9B,CAAA;AACAjhB,IAAAA,OAAO,CAACqL,KAAR,CAAc,WAAd,EAA2BhW,GAAG,CAACrE,OAA/B,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACE0xB,UAAU,CAAC3S,IAAD,EAAe;IACvB,IAAKkR,CAAAA,sBAAL,GAA8B,KAA9B,CAAA;AACA,IAAA,IAAA,CAAKG,uBAAL,EAAA,CAAA;;IACA,IAAI,IAAA,CAAKD,wBAAT,EAAmC;MACjClU,YAAY,CAAC,IAAKkU,CAAAA,wBAAN,CAAZ,CAAA;MACA,IAAKA,CAAAA,wBAAL,GAAgC,IAAhC,CAAA;AACD,KAAA;;IACD,IAAI,IAAA,CAAKD,sBAAT,EAAiC;MAC/BiL,aAAa,CAAC,IAAKjL,CAAAA,sBAAN,CAAb,CAAA;MACA,IAAKA,CAAAA,sBAAL,GAA8B,IAA9B,CAAA;AACD,KAAA;;IAED,IAAInR,IAAI,KAAK,IAAb,EAAmB;AACjB;AACA,MAAA,IAAA,CAAKmc,oBAAL,EAAA,CAAA;;AACA,MAAA,OAAA;AACD,KAhBsB;;;IAmBvB,IAAKpK,CAAAA,4CAAL,GAAoD,EAApD,CAAA;AACAhwB,IAAAA,MAAM,CAACmV,OAAP,CACE,IAAA,CAAK8a,oBADP,CAEEjtB,CAAAA,OAFF,CAEU,CAAC,CAACs3B,IAAD,EAAOpR,YAAP,CAAD,KAA0B;AAClC,MAAA,IAAA,CAAK+G,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;AAEhCpK,QAAAA,KAAK,EAAE,SAAA;OAFT,CAAA;KAHF,CAAA,CAAA;AAQD,GAAA;AAED;AACF;AACA;;;AAC4B,EAAA,MAApBsb,oBAAoB,GAAG;IAC3B,IAAIp6B,MAAM,CAACY,IAAP,CAAY,IAAA,CAAKqvB,oBAAjB,CAAuCpvB,CAAAA,MAAvC,KAAkD,CAAtD,EAAyD;MACvD,IAAI,IAAA,CAAKsuB,sBAAT,EAAiC;QAC/B,IAAKA,CAAAA,sBAAL,GAA8B,KAA9B,CAAA;AACA,QAAA,IAAA,CAAKE,wBAAL,GAAgC7b,UAAU,CAAC,MAAM;UAC/C,IAAK6b,CAAAA,wBAAL,GAAgC,IAAhC,CAAA;;UACA,IAAI;YACF,IAAKH,CAAAA,aAAL,CAAmBqL,KAAnB,EAAA,CAAA;WADF,CAEE,OAAOh3B,GAAP,EAAY;AACZ;YACA,IAAIA,GAAG,YAAYzC,KAAnB,EAA0B;AACxBoN,cAAAA,OAAO,CAACqY,GAAR,CACG,yCAAwChjB,GAAG,CAACrE,OAAQ,CADvD,CAAA,CAAA,CAAA;AAGD,aAAA;AACF,WAAA;SAXuC,EAYvC,GAZuC,CAA1C,CAAA;AAaD,OAAA;;AACD,MAAA,OAAA;AACD,KAAA;;AAED,IAAA,IAAI,IAAKmwB,CAAAA,wBAAL,KAAkC,IAAtC,EAA4C;MAC1ClU,YAAY,CAAC,IAAKkU,CAAAA,wBAAN,CAAZ,CAAA;MACA,IAAKA,CAAAA,wBAAL,GAAgC,IAAhC,CAAA;MACA,IAAKF,CAAAA,sBAAL,GAA8B,IAA9B,CAAA;AACD,KAAA;;IAED,IAAI,CAAC,IAAKA,CAAAA,sBAAV,EAAkC;MAChC,IAAKD,CAAAA,aAAL,CAAmBsL,OAAnB,EAAA,CAAA;;AACA,MAAA,OAAA;AACD,KAAA;;IAED,MAAMC,yBAAyB,GAAG,IAAA,CAAKnL,uBAAvC,CAAA;;IACA,MAAMoL,8BAA8B,GAAG,MAAM;MAC3C,OAAOD,yBAAyB,KAAK,IAAA,CAAKnL,uBAA1C,CAAA;KADF,CAAA;;IAIA,MAAMhc,OAAO,CAAC0G,GAAR;AAEJ;AACA;AACA;IACAha,MAAM,CAACY,IAAP,CAAY,IAAKqvB,CAAAA,oBAAjB,EAAuClvB,GAAvC,CAA2C,MAAMu5B,IAAN,IAAc;AACvD,MAAA,MAAMpR,YAAY,GAAG,IAAA,CAAK+G,oBAAL,CAA0BqK,IAA1B,CAArB,CAAA;;MACA,IAAIpR,YAAY,KAAK3nB,SAArB,EAAgC;AAC9B;AACA,QAAA,OAAA;AACD,OAAA;;MACD,QAAQ2nB,YAAY,CAACpK,KAArB;AACE,QAAA,KAAK,SAAL,CAAA;AACA,QAAA,KAAK,cAAL;AACE,UAAA,IAAIoK,YAAY,CAACyR,SAAb,CAAuB9zB,IAAvB,KAAgC,CAApC,EAAuC;AACrC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc,YAAA,OAAO,IAAKopB,CAAAA,oBAAL,CAA0BqK,IAA1B,CAAP,CAAA;;AACA,YAAA,IAAIpR,YAAY,CAACpK,KAAb,KAAuB,cAA3B,EAA2C;AACzC,cAAA,OAAO,KAAKkR,4CAAL,CACL9G,YAAY,CAAC0R,oBADR,CAAP,CAAA;AAGD,aAAA;;YACD,MAAM,IAAA,CAAKR,oBAAL,EAAN,CAAA;AACA,YAAA,OAAA;AACD,WAAA;;AACD,UAAA,MAAM,CAAC,YAAY;YACjB,MAAM;cAAChzB,IAAD;AAAO4e,cAAAA,MAAAA;AAAP,aAAA,GAAiBkD,YAAvB,CAAA;;YACA,IAAI;AACF,cAAA,IAAA,CAAK+G,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;AAEhCpK,gBAAAA,KAAK,EAAE,aAAA;eAFT,CAAA;cAIA,MAAM8b,oBAA0C,GAC7C,MAAM,IAAK1L,CAAAA,aAAL,CAAmBzhB,IAAnB,CAAwBuY,MAAxB,EAAgC5e,IAAhC,CADT,CAAA;AAEA,cAAA,IAAA,CAAK6oB,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;gBAEhC0R,oBAFgC;AAGhC9b,gBAAAA,KAAK,EAAE,YAAA;eAHT,CAAA;AAKA,cAAA,IAAA,CAAKkR,4CAAL,CACE4K,oBADF,CAEI1R,GAAAA,YAAY,CAACyR,SAFjB,CAAA;cAGA,MAAM,IAAA,CAAKP,oBAAL,EAAN,CAAA;aAfF,CAgBE,OAAOzI,CAAP,EAAU;cACV,IAAIA,CAAC,YAAY7wB,KAAjB,EAAwB;gBACtBoN,OAAO,CAACqL,KAAR,CACG,CAAEyM,EAAAA,MAAO,CADZ,mBAAA,CAAA,EAEE5e,IAFF,EAGEuqB,CAAC,CAACzyB,OAHJ,CAAA,CAAA;AAKD,eAAA;;cACD,IAAI,CAACw7B,8BAA8B,EAAnC,EAAuC;AACrC,gBAAA,OAAA;AACD,eAVS;;;AAYV,cAAA,IAAA,CAAKzK,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;AAEhCpK,gBAAAA,KAAK,EAAE,SAAA;eAFT,CAAA;cAIA,MAAM,IAAA,CAAKsb,oBAAL,EAAN,CAAA;AACD,aAAA;AACF,WApCK,GAAN,CAAA;AAqCA,UAAA,MAAA;;AACF,QAAA,KAAK,YAAL;AACE,UAAA,IAAIlR,YAAY,CAACyR,SAAb,CAAuB9zB,IAAvB,KAAgC,CAApC,EAAuC;AACrC;AACA;AACA;AACA,YAAA,MAAM,CAAC,YAAY;cACjB,MAAM;gBAAC+zB,oBAAD;AAAuBC,gBAAAA,iBAAAA;AAAvB,eAAA,GAA4C3R,YAAlD,CAAA;;AACA,cAAA,IACE,KAAKgH,+BAAL,CAAqCxnB,GAArC,CAAyCkyB,oBAAzC,CADF,EAEE;AACA;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB,gBAAA,IAAA,CAAK1K,+BAAL,CAAqC4K,MAArC,CACEF,oBADF,CAAA,CAAA;AAGD,eAfD,MAeO;AACL,gBAAA,IAAA,CAAK3K,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;AAEhCpK,kBAAAA,KAAK,EAAE,eAAA;iBAFT,CAAA;;gBAIA,IAAI;kBACF,MAAM,IAAA,CAAKoQ,aAAL,CAAmBzhB,IAAnB,CAAwBotB,iBAAxB,EAA2C,CAC/CD,oBAD+C,CAA3C,CAAN,CAAA;iBADF,CAIE,OAAOjJ,CAAP,EAAU;kBACV,IAAIA,CAAC,YAAY7wB,KAAjB,EAAwB;oBACtBoN,OAAO,CAACqL,KAAR,CAAe,CAAA,EAAEshB,iBAAkB,CAAnC,OAAA,CAAA,EAA6ClJ,CAAC,CAACzyB,OAA/C,CAAA,CAAA;AACD,mBAAA;;kBACD,IAAI,CAACw7B,8BAA8B,EAAnC,EAAuC;AACrC,oBAAA,OAAA;AACD,mBANS;;;AAQV,kBAAA,IAAA,CAAKzK,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;AAEhCpK,oBAAAA,KAAK,EAAE,YAAA;mBAFT,CAAA;kBAIA,MAAM,IAAA,CAAKsb,oBAAL,EAAN,CAAA;AACA,kBAAA,OAAA;AACD,iBAAA;AACF,eAAA;;AACD,cAAA,IAAA,CAAKnK,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGpR,YAD6B;AAEhCpK,gBAAAA,KAAK,EAAE,cAAA;eAFT,CAAA;cAIA,MAAM,IAAA,CAAKsb,oBAAL,EAAN,CAAA;AACD,aA/CK,GAAN,CAAA;AAgDD,WAAA;;AACD,UAAA,MAAA;AAtHJ,OAAA;AA2HD,KAjID,CALI,CAAN,CAAA;AAwID,GAAA;AAED;AACF;AACA;;;AACUW,EAAAA,yBAAyB,CAG/BH,oBAH+B,EAI/BI,YAJ+B,EAKzB;AACN,IAAA,MAAML,SAAS,GACb,IAAA,CAAK3K,4CAAL,CAAkD4K,oBAAlD,CADF,CAAA;;IAEA,IAAID,SAAS,KAAKp5B,SAAlB,EAA6B;AAC3B,MAAA,OAAA;AACD,KAAA;;AACDo5B,IAAAA,SAAS,CAAC33B,OAAV,CAAkBi4B,EAAE,IAAI;MACtB,IAAI;AACFA,QAAAA,EAAE;AAEA;AACA;AACA;AACA,QAAA,GAAGD,YALH,CAAF,CAAA;OADF,CAQE,OAAOrJ,CAAP,EAAU;QACVzjB,OAAO,CAACqL,KAAR,CAAcoY,CAAd,CAAA,CAAA;AACD,OAAA;KAXH,CAAA,CAAA;AAaD,GAAA;AAED;AACF;AACA;;;EACEd,wBAAwB,CAACqK,YAAD,EAAuB;IAC7C,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CACnC8Y,YADmC,EAEnCjS,yBAFmC,CAArC,CAAA;;AAIA,IAAA,IAAA,CAAK8R,yBAAL,CAAsD7R,YAAtD,EAAoE,CAClEzH,MAAM,CAACpgB,KAD2D,EAElEogB,MAAM,CAACa,OAF2D,CAApE,CAAA,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AACU6Y,EAAAA,iBAAiB,CACvBC,kBADuB;AAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIh0B,EAAAA,IA1BuB,EA2BD;AACtB,IAAA,MAAMi0B,oBAAoB,GAAG,IAAKvL,CAAAA,yBAAL,EAA7B,CAAA;IACA,MAAMwK,IAAI,GAAGgB,qBAAmB,CAC9B,CAACF,kBAAkB,CAACpV,MAApB,EAA4B5e,IAA5B,CAD8B,EAE9B,IAAA;AAAK;KAFP,CAAA;AAIA,IAAA,MAAMm0B,oBAAoB,GAAG,IAAA,CAAKtL,oBAAL,CAA0BqK,IAA1B,CAA7B,CAAA;;IACA,IAAIiB,oBAAoB,KAAKh6B,SAA7B,EAAwC;AACtC,MAAA,IAAA,CAAK0uB,oBAAL,CAA0BqK,IAA1B,CAAkC,GAAA,EAChC,GAAGc,kBAD6B;QAEhCh0B,IAFgC;QAGhCuzB,SAAS,EAAE,IAAIzqB,GAAJ,CAAQ,CAACkrB,kBAAkB,CAACtV,QAApB,CAAR,CAHqB;AAIhChH,QAAAA,KAAK,EAAE,SAAA;OAJT,CAAA;AAMD,KAPD,MAOO;AACLyc,MAAAA,oBAAoB,CAACZ,SAArB,CAA+B9sB,GAA/B,CAAmCutB,kBAAkB,CAACtV,QAAtD,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,IAAA,CAAKiK,mDAAL,CACEsL,oBADF,CAAA,GAEI,YAAY;AACd,MAAA,OAAO,IAAKtL,CAAAA,mDAAL,CACLsL,oBADK,CAAP,CAAA;AAGA,MAAA,MAAMnS,YAAY,GAAG,IAAA,CAAK+G,oBAAL,CAA0BqK,IAA1B,CAArB,CAAA;MACApuB,MAAM,CACJgd,YAAY,KAAK3nB,SADb,EAEH,CAA2E85B,yEAAAA,EAAAA,oBAAqB,EAF7F,CAAN,CAAA;AAIAnS,MAAAA,YAAY,CAACyR,SAAb,CAAuBG,MAAvB,CAA8BM,kBAAkB,CAACtV,QAAjD,CAAA,CAAA;MACA,MAAM,IAAA,CAAKsU,oBAAL,EAAN,CAAA;KAZF,CAAA;;AAcA,IAAA,IAAA,CAAKA,oBAAL,EAAA,CAAA;;AACA,IAAA,OAAOiB,oBAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,eAAe,CACbh9B,SADa,EAEbsnB,QAFa,EAGbhT,UAHa,EAIS;AACtB,IAAA,MAAM1L,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC9yB,SAAS,CAACsD,QAAV,EAAD,CADW,EAEXgR,UAAU,IAAI,KAAK8b,WAAnB,IAAkC,WAFvB;AAGX,IAAA,QAHW,CAAb,CAAA;;IAKA,OAAO,IAAA,CAAKuM,iBAAL,CACL;MACErV,QADF;AAEEE,MAAAA,MAAM,EAAE,kBAFV;AAGE6U,MAAAA,iBAAiB,EAAE,oBAAA;KAJhB,EAMLzzB,IANK,CAAP,CAAA;AAQD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACmC,MAA3Bq0B,2BAA2B,CAC/BJ,oBAD+B,EAEhB;AACf,IAAA,MAAM,KAAKK,8BAAL,CACJL,oBADI,EAEJ,gBAFI,CAAN,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EACEvK,+BAA+B,CAACoK,YAAD,EAAuB;IACpD,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CACnC8Y,YADmC,EAEnC9R,gCAFmC,CAArC,CAAA;;AAIA,IAAA,IAAA,CAAK2R,yBAAL,CAA6D7R,YAA7D,EAA2E,CACzE;AACEyS,MAAAA,SAAS,EAAEla,MAAM,CAACpgB,KAAP,CAAaqC,MAD1B;AAEE40B,MAAAA,WAAW,EAAE7W,MAAM,CAACpgB,KAAP,CAAaqG,OAAAA;AAF5B,KADyE,EAKzE+Z,MAAM,CAACa,OALkE,CAA3E,CAAA,CAAA;AAOD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEsZ,sBAAsB,CACpBl5B,SADoB,EAEpBojB,QAFoB,EAGpBhT,UAHoB,EAIpB+oB,OAJoB,EAKE;AACtB,IAAA,MAAMz0B,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC5uB,SAAS,CAACZ,QAAV,EAAD,CADW,EAEXgR,UAAU,IAAI,KAAK8b,WAAnB,IAAkC,WAFvB;AAGX,IAAA,QAAA;AAAS;AAHE,MAIXiN,OAAO,GAAG;AAACA,MAAAA,OAAO,EAAEA,OAAAA;AAAV,KAAH,GAAwBt6B,SAAAA;AAAU;KAJ3C,CAAA;;IAMA,OAAO,IAAA,CAAK45B,iBAAL,CACL;MACErV,QADF;AAEEE,MAAAA,MAAM,EAAE,kBAFV;AAGE6U,MAAAA,iBAAiB,EAAE,oBAAA;KAJhB,EAMLzzB,IANK,CAAP,CAAA;AAQD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EAC0C,MAAlC00B,kCAAkC,CACtCT,oBADsC,EAEvB;AACf,IAAA,MAAM,KAAKK,8BAAL,CACJL,oBADI,EAEJ,wBAFI,CAAN,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AACEU,EAAAA,MAAM,CACJjzB,MADI,EAEJgd,QAFI,EAGJhT,UAHI,EAIkB;IACtB,MAAM1L,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC,OAAOxoB,MAAP,KAAkB,QAAlB,GAA6B;AAACkzB,MAAAA,QAAQ,EAAE,CAAClzB,MAAM,CAACxG,QAAP,EAAD,CAAA;KAAxC,GAA+DwG,MAAhE,CADW,EAEXgK,UAAU,IAAI,IAAK8b,CAAAA,WAAnB,IAAkC,WAFvB;KAAb,CAAA;;IAIA,OAAO,IAAA,CAAKuM,iBAAL,CACL;MACErV,QADF;AAEEE,MAAAA,MAAM,EAAE,eAFV;AAGE6U,MAAAA,iBAAiB,EAAE,iBAAA;KAJhB,EAMLzzB,IANK,CAAP,CAAA;AAQD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EAC4B,MAApB60B,oBAAoB,CACxBZ,oBADwB,EAET;AACf,IAAA,MAAM,KAAKK,8BAAL,CAAoCL,oBAApC,EAA0D,MAA1D,CAAN,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACElK,qBAAqB,CAAC+J,YAAD,EAAuB;IAC1C,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CAAC8Y,YAAD,EAAezM,sBAAf,CAArC,CAAA;;AACA,IAAA,IAAA,CAAKsM,yBAAL,CAA6C7R,YAA7C,EAA2D,CACzDzH,MAAM,CAACpgB,KADkD,EAEzDogB,MAAM,CAACa,OAFkD,CAA3D,CAAA,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EACEyO,qBAAqB,CAACmK,YAAD,EAAuB;IAC1C,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CAAC8Y,YAAD,EAAe1R,sBAAf,CAArC,CAAA;;AACA,IAAA,IAAA,CAAKuR,yBAAL,CAAmD7R,YAAnD,EAAiE,CAACzH,MAAD,CAAjE,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EACEya,YAAY,CAACpW,QAAD,EAAqD;IAC/D,OAAO,IAAA,CAAKqV,iBAAL,CACL;MACErV,QADF;AAEEE,MAAAA,MAAM,EAAE,eAFV;AAGE6U,MAAAA,iBAAiB,EAAE,iBAAA;AAHrB,KADK,EAML,EAAA;AAAG;KANL,CAAA;AAQD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxBsB,wBAAwB,CAC5Bd,oBAD4B,EAEb;AACf,IAAA,MAAM,KAAKK,8BAAL,CACJL,oBADI,EAEJ,aAFI,CAAN,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EACErK,4BAA4B,CAACkK,YAAD,EAAuB;IACjD,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CACnC8Y,YADmC,EAEnClR,4BAFmC,CAArC,CAAA;;AAIA,IAAA,IAAA,CAAK+Q,yBAAL,CAAmD7R,YAAnD,EAAiE,CAACzH,MAAD,CAAjE,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE2a,YAAY,CAACtW,QAAD,EAAqD;IAC/D,OAAO,IAAA,CAAKqV,iBAAL,CACL;MACErV,QADF;AAEEE,MAAAA,MAAM,EAAE,uBAFV;AAGE6U,MAAAA,iBAAiB,EAAE,yBAAA;AAHrB,KADK,EAML,EAAA;AAAG;KANL,CAAA;AAQD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxBwB,wBAAwB,CAC5BhB,oBAD4B,EAEb;AACf,IAAA,MAAM,KAAKK,8BAAL,CACJL,oBADI,EAEJ,aAFI,CAAN,CAAA;AAID,GAAA;AAED;AACF;AACA;;;AAE8C,EAAA,MAA9BK,8BAA8B,CAC1CL,oBAD0C,EAE1CiB,gBAF0C,EAG1C;AACA,IAAA,MAAMC,OAAO,GACX,IAAA,CAAKxM,mDAAL,CACEsL,oBADF,CADF,CAAA;;AAIA,IAAA,IAAIkB,OAAJ,EAAa;AACX,MAAA,MAAMA,OAAO,EAAb,CAAA;AACD,KAFD,MAEO;MACLruB,OAAO,CAACC,IAAR,CACE,qEACG,GAAA,CAAA,EAAA,EAAIktB,oBAAqB,CAAUiB,QAAAA,EAAAA,gBAAiB,CADvD,SAAA,CAAA,GAEE,qBAHJ,CAAA,CAAA;AAKD,KAAA;AACF,GAAA;;EAEDhL,UAAU,CACRlqB,IADQ,EAERo1B,QAFQ,EAGRnJ,QAHQ,EAIRwD,KAJQ,EAKI;AACZ,IAAA,MAAM/jB,UAAU,GAAG0pB,QAAQ,IAAI,KAAK5N,WAApC,CAAA;;AACA,IAAA,IAAI9b,UAAU,IAAIugB,QAAd,IAA0BwD,KAA9B,EAAqC;MACnC,IAAInkB,OAAY,GAAG,EAAnB,CAAA;;AACA,MAAA,IAAI2gB,QAAJ,EAAc;QACZ3gB,OAAO,CAAC2gB,QAAR,GAAmBA,QAAnB,CAAA;AACD,OAAA;;AACD,MAAA,IAAIvgB,UAAJ,EAAgB;QACdJ,OAAO,CAACI,UAAR,GAAqBA,UAArB,CAAA;AACD,OAAA;;AACD,MAAA,IAAI+jB,KAAJ,EAAW;QACTnkB,OAAO,GAAG1S,MAAM,CAACC,MAAP,CAAcyS,OAAd,EAAuBmkB,KAAvB,CAAV,CAAA;AACD,OAAA;;MACDzvB,IAAI,CAACF,IAAL,CAAUwL,OAAV,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,OAAOtL,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACEuvB,0BAA0B,CACxBvvB,IADwB,EAExBo1B,QAFwB,EAGxBnJ,QAHwB,EAIxBwD,KAJwB,EAKZ;AACZ,IAAA,MAAM/jB,UAAU,GAAG0pB,QAAQ,IAAI,KAAK5N,WAApC,CAAA;;AACA,IAAA,IAAI9b,UAAU,IAAI,CAAC,CAAC,WAAD,EAAc,WAAd,CAAA,CAA2BxE,QAA3B,CAAoCwE,UAApC,CAAnB,EAAoE;MAClE,MAAM,IAAIhS,KAAJ,CACJ,6CAAA,GACE,KAAK8tB,WADP,GAEE,6CAHE,CAAN,CAAA;AAKD,KAAA;;IACD,OAAO,IAAA,CAAK0C,UAAL,CAAgBlqB,IAAhB,EAAsBo1B,QAAtB,EAAgCnJ,QAAhC,EAA0CwD,KAA1C,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACE5F,0BAA0B,CAACiK,YAAD,EAAuB;IAC/C,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CACnC8Y,YADmC,EAEnCjR,2BAFmC,CAArC,CAAA;;AAIA,IAAA,IAAIxI,MAAM,CAACpgB,KAAP,KAAiB,mBAArB,EAA0C;AACxC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,MAAA,IAAA,CAAK6uB,+BAAL,CAAqCriB,GAArC,CAAyCqb,YAAzC,CAAA,CAAA;AACD,KAAA;;IACD,IAAK6R,CAAAA,yBAAL,CACE7R,YADF,EAEEzH,MAAM,CAACpgB,KAAP,KAAiB,mBAAjB,GACI,CAAC;AAAC6E,MAAAA,IAAI,EAAE,UAAA;AAAP,KAAD,EAAqBub,MAAM,CAACa,OAA5B,CADJ,GAEI,CAAC;AAACpc,MAAAA,IAAI,EAAE,QAAP;MAAiBub,MAAM,EAAEA,MAAM,CAACpgB,KAAAA;AAAhC,KAAD,EAAyCogB,MAAM,CAACa,OAAhD,CAJN,CAAA,CAAA;AAMD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE0R,EAAAA,WAAW,CACTzvB,SADS,EAETuhB,QAFS,EAGThT,UAHS,EAIa;AACtB,IAAA,MAAM1L,IAAI,GAAG,IAAKkqB,CAAAA,UAAL,CACX,CAAC/sB,SAAD,CADW,EAEXuO,UAAU,IAAI,IAAA,CAAK8b,WAAnB,IAAkC,WAFvB;KAAb,CAAA;;AAIA,IAAA,MAAMyM,oBAAoB,GAAG,IAAKF,CAAAA,iBAAL,CAC3B;AACErV,MAAAA,QAAQ,EAAE,CAACoV,YAAD,EAAe5Y,OAAf,KAA2B;AACnC,QAAA,IAAI4Y,YAAY,CAACh1B,IAAb,KAAsB,QAA1B,EAAoC;UAClC4f,QAAQ,CAACoV,YAAY,CAACzZ,MAAd,EAAsBa,OAAtB,CAAR,CADkC;AAGlC;;UACA,IAAI;AACF,YAAA,IAAA,CAAKuS,uBAAL,CAA6BwG,oBAA7B,CAAA,CADE;AAGH,WAHD,CAGE,OAAOoB,IAAP,EAAa;AAEd,WAAA;AACF,SAAA;OAZL;AAcEzW,MAAAA,MAAM,EAAE,oBAdV;AAeE6U,MAAAA,iBAAiB,EAAE,sBAAA;KAhBM,EAkB3BzzB,IAlB2B,CAA7B,CAAA;;AAoBA,IAAA,OAAOi0B,oBAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEqB,EAAAA,sBAAsB,CACpBn4B,SADoB,EAEpBuhB,QAFoB,EAGpBpT,OAHoB,EAIE;IACtB,MAAM;MAACI,UAAD;MAAa,GAAG+jB,KAAAA;KAAS,GAAA,EAC7B,GAAGnkB,OAD0B;MAE7BI,UAAU,EACPJ,OAAO,IAAIA,OAAO,CAACI,UAApB,IAAmC,IAAK8b,CAAAA,WAAxC,IAAuD,WAH5B;;KAA/B,CAAA;;IAKA,MAAMxnB,IAAI,GAAG,IAAA,CAAKkqB,UAAL,CACX,CAAC/sB,SAAD,CADW,EAEXuO,UAFW,EAGXvR,SAAAA;AAAU;AAHC,MAIXs1B,KAJW,CAAb,CAAA;;AAMA,IAAA,MAAMwE,oBAAoB,GAAG,IAAKF,CAAAA,iBAAL,CAC3B;AACErV,MAAAA,QAAQ,EAAE,CAACoV,YAAD,EAAe5Y,OAAf,KAA2B;AACnCwD,QAAAA,QAAQ,CAACoV,YAAD,EAAe5Y,OAAf,CAAR,CADmC;AAGnC;;QACA,IAAI;AACF,UAAA,IAAA,CAAKuS,uBAAL,CAA6BwG,oBAA7B,CAAA,CADE;AAGH,SAHD,CAGE,OAAOoB,IAAP,EAAa;AAEd,SAAA;OAVL;AAYEzW,MAAAA,MAAM,EAAE,oBAZV;AAaE6U,MAAAA,iBAAiB,EAAE,sBAAA;KAdM,EAgB3BzzB,IAhB2B,CAA7B,CAAA;;AAkBA,IAAA,OAAOi0B,oBAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EAC+B,MAAvBxG,uBAAuB,CAC3BwG,oBAD2B,EAEZ;AACf,IAAA,MAAM,KAAKK,8BAAL,CACJL,oBADI,EAEJ,kBAFI,CAAN,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EACEnK,qBAAqB,CAACgK,YAAD,EAAuB;IAC1C,MAAM;MAACzZ,MAAD;AAASyH,MAAAA,YAAAA;AAAT,KAAA,GAAyB9G,kBAAM,CAAC8Y,YAAD,EAAehR,sBAAf,CAArC,CAAA;;AACA,IAAA,IAAA,CAAK6Q,yBAAL,CAAmD7R,YAAnD,EAAiE,CAACzH,MAAD,CAAjE,CAAA,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EACEkb,YAAY,CAAC7W,QAAD,EAAqD;IAC/D,OAAO,IAAA,CAAKqV,iBAAL,CACL;MACErV,QADF;AAEEE,MAAAA,MAAM,EAAE,eAFV;AAGE6U,MAAAA,iBAAiB,EAAE,iBAAA;AAHrB,KADK,EAML,EAAA;AAAG;KANL,CAAA;AAQD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACgC,MAAxB+B,wBAAwB,CAC5BvB,oBAD4B,EAEb;AACf,IAAA,MAAM,KAAKK,8BAAL,CACJL,oBADI,EAEJ,aAFI,CAAN,CAAA;AAID,GAAA;;AAn/FqB;;AChhFxB;AACA;AACA;;AAMA;AACA;AACA;AACO,MAAMwB,OAAN,CAAc;AAGnB;AACF;AACA;AACA;AACA;AACA;EACE/8B,WAAW,CAACg9B,OAAD,EAA2B;AAAA,IAAA,IAAA,CAR9BC,QAQ8B,GAAA,KAAA,CAAA,CAAA;IACpC,IAAKA,CAAAA,QAAL,GAAgBD,OAAhB,KAAA,IAAA,IAAgBA,OAAhB,KAAgBA,KAAAA,CAAAA,GAAAA,OAAhB,GAA2Bx+B,eAAe,EAA1C,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACiB,EAAA,OAAR0+B,QAAQ,GAAY;AACzB,IAAA,OAAO,IAAIH,OAAJ,CAAYv+B,eAAe,EAA3B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,EAAA,OAAb2+B,aAAa,CAClBv+B,SADkB,EAElBgU,OAFkB,EAGT;AACT,IAAA,IAAIhU,SAAS,CAACkB,UAAV,KAAyB,EAA7B,EAAiC;AAC/B,MAAA,MAAM,IAAIkB,KAAJ,CAAU,qBAAV,CAAN,CAAA;AACD,KAAA;;IACD,MAAMtC,SAAS,GAAGE,SAAS,CAACS,KAAV,CAAgB,EAAhB,EAAoB,EAApB,CAAlB,CAAA;;AACA,IAAA,IAAI,CAACuT,OAAD,IAAY,CAACA,OAAO,CAACwqB,cAAzB,EAAyC;MACvC,MAAM3+B,aAAa,GAAGG,SAAS,CAACS,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAtB,CAAA;AACA,MAAA,MAAMg+B,iBAAiB,GAAG1+B,YAAY,CAACF,aAAD,CAAtC,CAAA;;MACA,KAAK,IAAI6+B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,EAAtB,EAA0BA,EAAE,EAA5B,EAAgC;QAC9B,IAAI5+B,SAAS,CAAC4+B,EAAD,CAAT,KAAkBD,iBAAiB,CAACC,EAAD,CAAvC,EAA6C;AAC3C,UAAA,MAAM,IAAIt8B,KAAJ,CAAU,+BAAV,CAAN,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;IACD,OAAO,IAAI+7B,OAAJ,CAAY;MAACr+B,SAAD;AAAYE,MAAAA,SAAAA;AAAZ,KAAZ,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACiB,OAAR2+B,QAAQ,CAAC56B,IAAD,EAA4B;AACzC,IAAA,MAAMjE,SAAS,GAAGC,YAAY,CAACgE,IAAD,CAA9B,CAAA;AACA,IAAA,MAAM/D,SAAS,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAlB,CAAA;IACAD,SAAS,CAACE,GAAV,CAAc6D,IAAd,CAAA,CAAA;AACA/D,IAAAA,SAAS,CAACE,GAAV,CAAcJ,SAAd,EAAyB,EAAzB,CAAA,CAAA;IACA,OAAO,IAAIq+B,OAAJ,CAAY;MAACr+B,SAAD;AAAYE,MAAAA,SAAAA;AAAZ,KAAZ,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACe,EAAA,IAATF,SAAS,GAAc;AACzB,IAAA,OAAO,IAAIgD,SAAJ,CAAc,KAAKu7B,QAAL,CAAcv+B,SAA5B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AACe,EAAA,IAATE,SAAS,GAAe;IAC1B,OAAO,IAAA,CAAKq+B,QAAL,CAAcr+B,SAArB,CAAA;AACD,GAAA;;AA7EkB;;ACoErB;AACA;AACA;AACA;MACa4+B,gCAAgC,GAAGt9B,MAAM,CAAC0X,MAAP,CAAc;AAC5D6lB,EAAAA,iBAAiB,EAAE;AACjBn1B,IAAAA,KAAK,EAAE,CADU;IAEjB3B,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CACAJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADA,EAEAq4B,GAAA,CAAiB,YAAjB,CAFA,EAGA14B,uBAAY,CAACkB,EAAb,CAAgB,UAAhB,CAHA,CAFM,CAAA;GAHkD;AAW5Dy3B,EAAAA,iBAAiB,EAAE;AACjBr1B,IAAAA,KAAK,EAAE,CADU;AAEjB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,CAFM,CAAA;GAbkD;AAiB5Du4B,EAAAA,iBAAiB,EAAE;AACjBt1B,IAAAA,KAAK,EAAE,CADU;AAEjB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CACAJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADA,EAEAq4B,GAAA,EAFA,EAGA14B,uBAAY,CAAC8E,GAAb,CACEE,SAAA,EADF,EAEEhF,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACK,GAAb,EAApB,EAAwC,CAAC,CAAzC,CAFF,EAGE,WAHF,CAHA,CAFM,CAAA;GAnBkD;AA+B5Dw4B,EAAAA,qBAAqB,EAAE;AACrBv1B,IAAAA,KAAK,EAAE,CADc;AAErB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,CAFM,CAAA;GAjCkD;AAqC5Dy4B,EAAAA,gBAAgB,EAAE;AAChBx1B,IAAAA,KAAK,EAAE,CADS;AAEhB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAAD,CAFM,CAAA;AAFQ,GAAA;AArC0C,CAAd,EAAzC;AA6CA,MAAM04B,6BAAN,CAAoC;AACzC;AACF;AACA;AACE/9B,EAAAA,WAAW,GAAG,EAAE;;EAEY,OAArBgV,qBAAqB,CAC1B3L,WAD0B,EAEE;AAC5B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AAEA,IAAA,MAAMsS,qBAAqB,GAAGlQ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAA9B,CAAA;IACA,MAAMiD,KAAK,GAAG4M,qBAAqB,CAAC3U,MAAtB,CAA6B8I,WAAW,CAAC7I,IAAzC,CAAd,CAAA;AAEA,IAAA,IAAI4F,IAAJ,CAAA;;AACA,IAAA,KAAK,MAAM,CAAC43B,UAAD,EAAar3B,MAAb,CAAX,IAAmCzG,MAAM,CAACmV,OAAP,CACjCmoB,gCADiC,CAAnC,EAEG;AACD,MAAA,IAAK72B,MAAD,CAAgB2B,KAAhB,IAAyBA,KAA7B,EAAoC;AAClClC,QAAAA,IAAI,GAAG43B,UAAP,CAAA;AACA,QAAA,MAAA;AACD,OAAA;AACF,KAAA;;IACD,IAAI,CAAC53B,IAAL,EAAW;AACT,MAAA,MAAM,IAAIpF,KAAJ,CACJ,0DADI,CAAN,CAAA;AAGD,KAAA;;AACD,IAAA,OAAOoF,IAAP,CAAA;AACD,GAAA;;EAE6B,OAAvB63B,uBAAuB,CAC5B50B,WAD4B,EAEH;AACzB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAKs7B,eAAL,CAAqB70B,WAAW,CAACvI,IAAjC,EAAuC,CAAvC,CAAA,CAAA;IAEA,MAAM;AAACq9B,MAAAA,UAAAA;KAAcrqB,GAAAA,YAAU,CAC7B0pB,gCAAgC,CAACC,iBADJ,EAE7Bp0B,WAAW,CAAC7I,IAFiB,CAA/B,CAAA;IAKA,OAAO;AACLof,MAAAA,SAAS,EAAEvW,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD1B;AAELsV,MAAAA,KAAK,EAAE7P,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFtB;MAGLu6B,UAAU,EAAEC,MAAM,CAACD,UAAD,CAAA;KAHpB,CAAA;AAKD,GAAA;;EAE6B,OAAvBE,uBAAuB,CAC5Bh1B,WAD4B,EAEH;AACzB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;;AACA,IAAA,IAAIyG,WAAW,CAACvI,IAAZ,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B,MAAM,IAAIC,KAAJ,CACH,CAA6BqI,2BAAAA,EAAAA,WAAW,CAACvI,IAAZ,CAAiBC,MAAO,CAAA,0BAAA,CADlD,CAAN,CAAA;AAGD,KAAA;;IAED,MAAM;AAACye,MAAAA,SAAAA;KAAa1L,GAAAA,YAAU,CAC5B0pB,gCAAgC,CAACI,iBADL,EAE5Bv0B,WAAW,CAAC7I,IAFgB,CAA9B,CAAA;IAIA,OAAO;AACL89B,MAAAA,WAAW,EAAEj1B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELgc,MAAAA,SAAS,EAAEvW,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAF1B;AAGLsV,MAAAA,KAAK,EACH7P,WAAW,CAACvI,IAAZ,CAAiBC,MAAjB,GAA0B,CAA1B,GAA8BsI,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAlD,GAA2DnC,SAJxD;MAKL+d,SAAS,EAAEA,SAAS,CAACve,GAAV,CAAcrB,MAAM,IAAI,IAAI8B,SAAJ,CAAc9B,MAAd,CAAxB,CAAA;KALb,CAAA;AAOD,GAAA;;EAE4B,OAAtB2+B,sBAAsB,CAC3Bl1B,WAD2B,EAEH;AACxB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAKs7B,eAAL,CAAqB70B,WAAW,CAACvI,IAAjC,EAAuC,CAAvC,CAAA,CAAA;IAEA,OAAO;AACLw9B,MAAAA,WAAW,EAAEj1B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELgc,MAAAA,SAAS,EAAEvW,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAF1B;AAGL46B,MAAAA,SAAS,EAAEn1B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAHjC,CAAA;AAKD,GAAA;;EAE6B,OAAvB66B,uBAAuB,CAC5Bp1B,WAD4B,EAEH;AACzB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAKs7B,eAAL,CAAqB70B,WAAW,CAACvI,IAAjC,EAAuC,CAAvC,CAAA,CAAA;IAEA,OAAO;AACLw9B,MAAAA,WAAW,EAAEj1B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELgc,MAAAA,SAAS,EAAEvW,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAFjC,CAAA;AAID,GAAA;;EAEiC,OAA3B86B,2BAA2B,CAChCr1B,WADgC,EAEH;AAC7B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAKs7B,eAAL,CAAqB70B,WAAW,CAACvI,IAAjC,EAAuC,CAAvC,CAAA,CAAA;IAEA,OAAO;AACLw9B,MAAAA,WAAW,EAAEj1B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELgc,MAAAA,SAAS,EAAEvW,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAFjC,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EACuB,OAAdqR,cAAc,CAACrS,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACd,MAAV,CAAiB68B,yBAAyB,CAAC/7B,SAA3C,CAAL,EAA4D;AAC1D,MAAA,MAAM,IAAI5B,KAAJ,CACJ,kEADI,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;AACD;AACF;AACA;;;AACwB,EAAA,OAAfk9B,eAAe,CAACp9B,IAAD,EAAmB6W,cAAnB,EAA2C;AAC/D,IAAA,IAAI7W,IAAI,CAACC,MAAL,GAAc4W,cAAlB,EAAkC;MAChC,MAAM,IAAI3W,KAAJ,CACH,CAA6BF,2BAAAA,EAAAA,IAAI,CAACC,MAAO,CAAA,yBAAA,EAA2B4W,cAAe,CAAA,CADhF,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;;AAhIwC,CAAA;AAmIpC,MAAMgnB,yBAAN,CAAgC;AACrC;AACF;AACA;AACE3+B,EAAAA,WAAW,GAAG,EAAE;;EAMQ,OAAjB4+B,iBAAiB,CAAC7mB,MAAD,EAAkC;AACxD,IAAA,MAAM,CAAC8mB,kBAAD,EAAqBC,QAArB,IAAiCp9B,SAAS,CAAC2B,sBAAV,CACrC,CAAC0U,MAAM,CAAC6H,SAAP,CAAiBrgB,QAAjB,EAAD,EAA8BsV,uBAAU,CAACoD,MAAM,CAACF,MAAM,CAAComB,UAAR,CAAP,EAA4B,CAA5B,CAAxC,CADqC,EAErC,IAAA,CAAKv7B,SAFgC,CAAvC,CAAA;AAKA,IAAA,MAAMwD,IAAI,GAAGo3B,gCAAgC,CAACC,iBAA9C,CAAA;AACA,IAAA,MAAMj9B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5B+3B,MAAAA,UAAU,EAAElmB,MAAM,CAACF,MAAM,CAAComB,UAAR,CADU;AAE5BW,MAAAA,QAAQ,EAAEA,QAAAA;AAFkB,KAAP,CAAvB,CAAA;IAKA,MAAMh+B,IAAI,GAAG,CACX;AACE8C,MAAAA,MAAM,EAAEi7B,kBADV;AAEE5xB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KADW,EAMX;MACEtJ,MAAM,EAAEmU,MAAM,CAAC6H,SADjB;AAEE3S,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KANW,EAWX;MACEtJ,MAAM,EAAEmU,MAAM,CAACmB,KADjB;AAEEjM,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KAXW,EAgBX;MACEtJ,MAAM,EAAE8T,aAAa,CAAC9U,SADxB;AAEEqK,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KAhBW,CAAb,CAAA;IAuBA,OAAO,CACL,IAAIH,sBAAJ,CAA2B;MACzBnK,SAAS,EAAE,KAAKA,SADS;AAEzB9B,MAAAA,IAAI,EAAEA,IAFmB;AAGzBN,MAAAA,IAAI,EAAEA,IAAAA;KAHR,CADK,EAMLq+B,kBANK,CAAP,CAAA;AAQD,GAAA;;EAEuB,OAAjBE,iBAAiB,CAAChnB,MAAD,EAAkC;AACxD,IAAA,MAAM3R,IAAI,GAAGo3B,gCAAgC,CAACG,iBAA9C,CAAA;AACA,IAAA,MAAMn9B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;IAEA,MAAMtF,IAAI,GAAG,CACX;MACE8C,MAAM,EAAEmU,MAAM,CAACumB,WADjB;AAEErxB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KADW,EAMX;MACEtJ,MAAM,EAAEmU,MAAM,CAAC6H,SADjB;AAEE3S,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KANW,CAAb,CAAA;IAaA,OAAO,IAAIH,sBAAJ,CAA2B;MAChCnK,SAAS,EAAE,KAAKA,SADgB;AAEhC9B,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA,IAAAA;AAH0B,KAA3B,CAAP,CAAA;AAKD,GAAA;;EAEuB,OAAjBw+B,iBAAiB,CAACjnB,MAAD,EAAkC;AACxD,IAAA,MAAM3R,IAAI,GAAGo3B,gCAAgC,CAACI,iBAA9C,CAAA;AACA,IAAA,MAAMp9B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5BoZ,MAAAA,SAAS,EAAEzH,MAAM,CAACyH,SAAP,CAAiBve,GAAjB,CAAqBg+B,IAAI,IAAIA,IAAI,CAACh9B,OAAL,EAA7B,CAAA;AADiB,KAAP,CAAvB,CAAA;IAIA,MAAMnB,IAAI,GAAG,CACX;MACE8C,MAAM,EAAEmU,MAAM,CAACumB,WADjB;AAEErxB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KADW,EAMX;MACEtJ,MAAM,EAAEmU,MAAM,CAAC6H,SADjB;AAEE3S,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KANW,CAAb,CAAA;;IAaA,IAAI6K,MAAM,CAACmB,KAAX,EAAkB;MAChBpY,IAAI,CAACsG,IAAL,CACE;QACExD,MAAM,EAAEmU,MAAM,CAACmB,KADjB;AAEEjM,QAAAA,QAAQ,EAAE,IAFZ;AAGEC,QAAAA,UAAU,EAAE,IAAA;AAHd,OADF,EAME;QACEtJ,MAAM,EAAE8T,aAAa,CAAC9U,SADxB;AAEEqK,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;OAThB,CAAA,CAAA;AAYD,KAAA;;IAED,OAAO,IAAIH,sBAAJ,CAA2B;MAChCnK,SAAS,EAAE,KAAKA,SADgB;AAEhC9B,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA,IAAAA;AAH0B,KAA3B,CAAP,CAAA;AAKD,GAAA;;EAE2B,OAArB0+B,qBAAqB,CAACnnB,MAAD,EAAsC;AAChE,IAAA,MAAM3R,IAAI,GAAGo3B,gCAAgC,CAACK,qBAA9C,CAAA;AACA,IAAA,MAAMr9B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;IAEA,MAAMtF,IAAI,GAAG,CACX;MACE8C,MAAM,EAAEmU,MAAM,CAACumB,WADjB;AAEErxB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KADW,EAMX;MACEtJ,MAAM,EAAEmU,MAAM,CAAC6H,SADjB;AAEE3S,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KANW,CAAb,CAAA;IAaA,OAAO,IAAIH,sBAAJ,CAA2B;MAChCnK,SAAS,EAAE,KAAKA,SADgB;AAEhC9B,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA,IAAAA;AAH0B,KAA3B,CAAP,CAAA;AAKD,GAAA;;EAEsB,OAAhB2+B,gBAAgB,CAACpnB,MAAD,EAAiC;AACtD,IAAA,MAAM3R,IAAI,GAAGo3B,gCAAgC,CAACM,gBAA9C,CAAA;AACA,IAAA,MAAMt9B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;IAEA,MAAMtF,IAAI,GAAG,CACX;MACE8C,MAAM,EAAEmU,MAAM,CAACumB,WADjB;AAEErxB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KADW,EAMX;MACEtJ,MAAM,EAAEmU,MAAM,CAAC6H,SADjB;AAEE3S,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KANW,EAWX;MACEtJ,MAAM,EAAEmU,MAAM,CAACymB,SADjB;AAEEvxB,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,IAAA;AAHd,KAXW,CAAb,CAAA;IAkBA,OAAO,IAAIH,sBAAJ,CAA2B;MAChCnK,SAAS,EAAE,KAAKA,SADgB;AAEhC9B,MAAAA,IAAI,EAAEA,IAF0B;AAGhCN,MAAAA,IAAI,EAAEA,IAAAA;AAH0B,KAA3B,CAAP,CAAA;AAKD,GAAA;;AA3KoC,CAAA;AAA1Bm+B,0BAMJ/7B,YAAuB,IAAIlB,SAAJ,CAC5B,6CAD4B;;AChQhC;AACA;AACA;;AACO,MAAM09B,wBAAN,CAA+B;AACpC;AACF;AACA;AACEp/B,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;EAC8B,OAArBgV,qBAAqB,CAC1B3L,WAD0B,EAEI;AAC9B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AAEA,IAAA,MAAMsS,qBAAqB,GAAGlQ,uBAAY,CAACkB,EAAb,CAAgB,aAAhB,CAA9B,CAAA;IACA,MAAMiP,SAAS,GAAGD,qBAAqB,CAAC3U,MAAtB,CAA6B8I,WAAW,CAAC7I,IAAzC,CAAlB,CAAA;AAEA,IAAA,IAAI4F,IAAJ,CAAA;;AACA,IAAA,KAAK,MAAM,CAACgP,MAAD,EAASzO,MAAT,CAAX,IAA+BzG,MAAM,CAACmV,OAAP,CAC7BgqB,kCAD6B,CAA/B,EAEG;AACD,MAAA,IAAI14B,MAAM,CAAC2B,KAAP,IAAgB6M,SAApB,EAA+B;AAC7B/O,QAAAA,IAAI,GAAGgP,MAAP,CAAA;AACA,QAAA,MAAA;AACD,OAAA;AACF,KAAA;;IAED,IAAI,CAAChP,IAAL,EAAW;AACT,MAAA,MAAM,IAAIpF,KAAJ,CACJ,4DADI,CAAN,CAAA;AAGD,KAAA;;AAED,IAAA,OAAOoF,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC2B,OAAlBk5B,kBAAkB,CACvBj2B,WADuB,EAEH;AACpB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;IACA,MAAM;MAAC28B,KAAD;AAAQC,MAAAA,aAAAA;KAAiB1rB,GAAAA,YAAU,CACvCurB,kCAAkC,CAACI,YADI,EAEvCp2B,WAAW,CAAC7I,IAF2B,CAAzC,CAAA;IAIA,OAAO;MAAC++B,KAAD;AAAQC,MAAAA,aAAAA;KAAf,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EAC+B,OAAtBE,sBAAsB,CAC3Br2B,WAD2B,EAEH;AACxB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;IACA,MAAM;AAACiE,MAAAA,KAAAA;KAASiN,GAAAA,YAAU,CACxBurB,kCAAkC,CAACM,gBADX,EAExBt2B,WAAW,CAAC7I,IAFY,CAA1B,CAAA;IAIA,OAAO;AAACqG,MAAAA,KAAAA;KAAR,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACkC,OAAzB+4B,yBAAyB,CAC9Bv2B,WAD8B,EAEH;AAC3B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;IACA,MAAM;AAAC28B,MAAAA,KAAAA;KAASzrB,GAAAA,YAAU,CACxBurB,kCAAkC,CAACQ,mBADX,EAExBx2B,WAAW,CAAC7I,IAFY,CAA1B,CAAA;IAIA,OAAO;AAAC++B,MAAAA,KAAAA;KAAR,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACkC,OAAzBO,yBAAyB,CAC9Bz2B,WAD8B,EAEH;AAC3B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;IACA,MAAM;AAACm9B,MAAAA,aAAAA;KAAiBjsB,GAAAA,YAAU,CAChCurB,kCAAkC,CAACW,mBADH,EAEhC32B,WAAW,CAAC7I,IAFoB,CAAlC,CAAA;IAIA,OAAO;AAACu/B,MAAAA,aAAAA;KAAR,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACuB,OAAd9qB,cAAc,CAACrS,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACd,MAAV,CAAiBm+B,oBAAoB,CAACr9B,SAAtC,CAAL,EAAuD;AACrD,MAAA,MAAM,IAAI5B,KAAJ,CACJ,4DADI,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;;AArGmC,CAAA;AAwGtC;AACA;AACA;;AAsDA;AACA;AACA;AACA;MACaq+B,kCAAkC,GAAGn/B,MAAM,CAAC0X,MAAP,CAI/C;AACD6nB,EAAAA,YAAY,EAAE;AACZn3B,IAAAA,KAAK,EAAE,CADK;IAEZ3B,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CACAJ,uBAAY,CAACkB,EAAb,CAAgB,aAAhB,CADA,EAEAlB,uBAAY,CAACK,GAAb,CAAiB,OAAjB,CAFA,EAGAL,uBAAY,CAACK,GAAb,CAAiB,eAAjB,CAHA,CAFM,CAAA;GAHT;AAWDs6B,EAAAA,gBAAgB,EAAE;AAChBr3B,IAAAA,KAAK,EAAE,CADS;AAEhB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACkB,EAAb,CAAgB,aAAhB,CAAD,EAAiClB,uBAAY,CAACK,GAAb,CAAiB,OAAjB,CAAjC,CAFM,CAAA;GAbT;AAiBDw6B,EAAAA,mBAAmB,EAAE;AACnBv3B,IAAAA,KAAK,EAAE,CADY;AAEnB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACkB,EAAb,CAAgB,aAAhB,CAAD,EAAiClB,uBAAY,CAACK,GAAb,CAAiB,OAAjB,CAAjC,CAFM,CAAA;GAnBT;AAuBD26B,EAAAA,mBAAmB,EAAE;AACnB13B,IAAAA,KAAK,EAAE,CADY;AAEnB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAEN,CAACJ,uBAAY,CAACkB,EAAb,CAAgB,aAAhB,CAAD,EAAiC4O,GAAG,CAAC,eAAD,CAApC,CAFM,CAAA;AAFW,GAAA;AAvBpB,CAJ+C,EAA3C;AAmCP;AACA;AACA;;AACO,MAAMmrB,oBAAN,CAA2B;AAChC;AACF;AACA;AACEjgC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;EAKqB,OAAZkgC,YAAY,CAACnoB,MAAD,EAAqD;AACtE,IAAA,MAAM3R,IAAI,GAAGi5B,kCAAkC,CAACI,YAAhD,CAAA;AACA,IAAA,MAAMj/B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO2R,MAAP,CAAvB,CAAA;IACA,OAAO,IAAIhL,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,EAD0B;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;;EAEsB,OAAhB2/B,gBAAgB,CACrBpoB,MADqB,EAEG;AACxB,IAAA,MAAM3R,IAAI,GAAGi5B,kCAAkC,CAACM,gBAAhD,CAAA;AACA,IAAA,MAAMn/B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO2R,MAAP,CAAvB,CAAA;IACA,OAAO,IAAIhL,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,EAD0B;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;;EAEyB,OAAnB4/B,mBAAmB,CACxBroB,MADwB,EAEA;AACxB,IAAA,MAAM3R,IAAI,GAAGi5B,kCAAkC,CAACQ,mBAAhD,CAAA;AACA,IAAA,MAAMr/B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO2R,MAAP,CAAvB,CAAA;IACA,OAAO,IAAIhL,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,EAD0B;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;;EAEyB,OAAnB6/B,mBAAmB,CACxBtoB,MADwB,EAEA;AACxB,IAAA,MAAM3R,IAAI,GAAGi5B,kCAAkC,CAACW,mBAAhD,CAAA;AACA,IAAA,MAAMx/B,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5B25B,MAAAA,aAAa,EAAE9nB,MAAM,CAACF,MAAM,CAACgoB,aAAR,CAAA;AADO,KAAP,CAAvB,CAAA;IAGA,OAAO,IAAIhzB,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,EAD0B;MAEhC8B,SAAS,EAAE,KAAKA,SAFgB;AAGhCpC,MAAAA,IAAAA;AAHgC,KAA3B,CAAP,CAAA;AAKD,GAAA;;AA3D+B,CAAA;AAArBy/B,qBASJr9B,YAAuB,IAAIlB,SAAJ,CAC5B,6CAD4B;;ACzNhC,MAAM4+B,mBAAiB,GAAG,EAA1B,CAAA;AACA,MAAMC,kBAAgB,GAAG,EAAzB,CAAA;AACA,MAAMC,eAAe,GAAG,EAAxB,CAAA;AAEA;AACA;AACA;;AAiBA,MAAMC,0BAA0B,GAAGz7B,uBAAY,CAACI,MAAb,CAYjC,CACAJ,uBAAY,CAACkB,EAAb,CAAgB,eAAhB,CADA,EAEAlB,uBAAY,CAACkB,EAAb,CAAgB,SAAhB,CAFA,EAGAlB,uBAAY,CAAC07B,GAAb,CAAiB,iBAAjB,CAHA,EAIA17B,uBAAY,CAAC07B,GAAb,CAAiB,2BAAjB,CAJA,EAKA17B,uBAAY,CAAC07B,GAAb,CAAiB,iBAAjB,CALA,EAMA17B,uBAAY,CAAC07B,GAAb,CAAiB,2BAAjB,CANA,EAOA17B,uBAAY,CAAC07B,GAAb,CAAiB,mBAAjB,CAPA,EAQA17B,uBAAY,CAAC07B,GAAb,CAAiB,iBAAjB,CARA,EASA17B,uBAAY,CAAC07B,GAAb,CAAiB,yBAAjB,CATA,CAZiC,CAAnC,CAAA;AAwBO,MAAMC,cAAN,CAAqB;AAC1B;AACF;AACA;AACE3gC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;AAKE;AACF;AACA;AACA;AACA;EACuC,OAA9B4gC,8BAA8B,CACnC7oB,MADmC,EAEX;IACxB,MAAM;MAACrZ,SAAD;MAAYU,OAAZ;MAAqBqF,SAArB;AAAgCo8B,MAAAA,gBAAAA;AAAhC,KAAA,GAAoD9oB,MAA1D,CAAA;AAEA3L,IAAAA,MAAM,CACJ1N,SAAS,CAACqC,MAAV,KAAqBw/B,kBADjB,EAEH,CAAqBA,mBAAAA,EAAAA,kBAAiB,CAAsB7hC,oBAAAA,EAAAA,SAAS,CAACqC,MAAO,QAF1E,CAAN,CAAA;AAKAqL,IAAAA,MAAM,CACJ3H,SAAS,CAAC1D,MAAV,KAAqBy/B,eADjB,EAEH,CAAoBA,kBAAAA,EAAAA,eAAgB,CAAsB/7B,oBAAAA,EAAAA,SAAS,CAAC1D,MAAO,QAFxE,CAAN,CAAA;AAKA,IAAA,MAAM+/B,eAAe,GAAGL,0BAA0B,CAAC56B,IAAnD,CAAA;AACA,IAAA,MAAMk7B,eAAe,GAAGD,eAAe,GAAGpiC,SAAS,CAACqC,MAApD,CAAA;AACA,IAAA,MAAMigC,iBAAiB,GAAGD,eAAe,GAAGt8B,SAAS,CAAC1D,MAAtD,CAAA;IACA,MAAMkgC,aAAa,GAAG,CAAtB,CAAA;IAEA,MAAM3oB,eAAe,GAAG7Y,aAAM,CAAC6C,KAAP,CAAa0+B,iBAAiB,GAAG5hC,OAAO,CAAC2B,MAAzC,CAAxB,CAAA;AAEA,IAAA,MAAMuH,KAAK,GACTu4B,gBAAgB,IAAI,IAApB,GACI,MADJ;AAAA,MAEIA,gBAHN,CAAA;IAKAJ,0BAA0B,CAACrgC,MAA3B,CACE;MACE6gC,aADF;AAEEC,MAAAA,OAAO,EAAE,CAFX;MAGEH,eAHF;AAIEI,MAAAA,yBAAyB,EAAE74B,KAJ7B;MAKEw4B,eALF;AAMEM,MAAAA,yBAAyB,EAAE94B,KAN7B;MAOE04B,iBAPF;MAQEK,eAAe,EAAEjiC,OAAO,CAAC2B,MAR3B;AASEugC,MAAAA,uBAAuB,EAAEh5B,KAAAA;AAT3B,KADF,EAYEgQ,eAZF,CAAA,CAAA;AAeAA,IAAAA,eAAe,CAACxL,IAAhB,CAAqBpO,SAArB,EAAgCoiC,eAAhC,CAAA,CAAA;AACAxoB,IAAAA,eAAe,CAACxL,IAAhB,CAAqBrI,SAArB,EAAgCs8B,eAAhC,CAAA,CAAA;AACAzoB,IAAAA,eAAe,CAACxL,IAAhB,CAAqB1N,OAArB,EAA8B4hC,iBAA9B,CAAA,CAAA;IAEA,OAAO,IAAIj0B,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,EAD0B;MAEhC8B,SAAS,EAAE+9B,cAAc,CAAC/9B,SAFM;AAGhCpC,MAAAA,IAAI,EAAE8X,eAAAA;AAH0B,KAA3B,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;AACA;;;EACwC,OAA/BipB,+BAA+B,CACpCxpB,MADoC,EAEZ;IACxB,MAAM;MAACypB,UAAD;MAAapiC,OAAb;AAAsByhC,MAAAA,gBAAAA;AAAtB,KAAA,GAA0C9oB,MAAhD,CAAA;AAEA3L,IAAAA,MAAM,CACJo1B,UAAU,CAACzgC,MAAX,KAAsBu/B,mBADlB,EAEH,CAAsBA,oBAAAA,EAAAA,mBAAkB,CAAsBkB,oBAAAA,EAAAA,UAAU,CAACzgC,MAAO,QAF7E,CAAN,CAAA;;IAKA,IAAI;AACF,MAAA,MAAMi8B,OAAO,GAAGD,OAAO,CAACI,aAAR,CAAsBqE,UAAtB,CAAhB,CAAA;AACA,MAAA,MAAM9iC,SAAS,GAAGs+B,OAAO,CAACt+B,SAAR,CAAkBuD,OAAlB,EAAlB,CAAA;MACA,MAAMwC,SAAS,GAAGtF,IAAI,CAACC,OAAD,EAAU49B,OAAO,CAACp+B,SAAlB,CAAtB,CAAA;MAEA,OAAO,IAAA,CAAKgiC,8BAAL,CAAoC;QACzCliC,SADyC;QAEzCU,OAFyC;QAGzCqF,SAHyC;AAIzCo8B,QAAAA,gBAAAA;AAJyC,OAApC,CAAP,CAAA;KALF,CAWE,OAAOpnB,KAAP,EAAc;AACd,MAAA,MAAM,IAAIzY,KAAJ,CAAW,CAA8ByY,4BAAAA,EAAAA,KAAM,EAA/C,CAAN,CAAA;AACD,KAAA;AACF,GAAA;;AAnGyB,CAAA;AAAfknB,eASJ/9B,YAAuB,IAAIlB,SAAJ,CAC5B,6CAD4B;;AC5DhC;;AACA+/B,oBAAS,CAACxjC,KAAV,CAAgByjC,cAAhB,GAAiC,CAACxgC,GAAD,EAAkB,GAAGygC,IAArB,KAA4C;EAC3E,MAAMC,CAAC,GAAGC,SAAI,CAACvf,MAAL,CAAYvf,aAAZ,EAAoB7B,GAApB,CAAV,CAAA;EACAygC,IAAI,CAACz+B,OAAL,CAAa4+B,GAAG,IAAIF,CAAC,CAACG,MAAF,CAASD,GAAT,CAApB,CAAA,CAAA;EACA,OAAOF,CAAC,CAACI,MAAF,EAAP,CAAA;AACD,CAJD,CAAA;;AAMO,MAAMC,SAAS,GAAG,CACvBC,OADuB,EAEvBC,OAFuB,KAGpBV,oBAAS,CAACW,QAAV,CAAmBF,OAAnB,EAA4BC,OAA5B,EAAqC;AAACE,EAAAA,GAAG,EAAE,KAAN;AAAaC,EAAAA,SAAS,EAAE,IAAA;AAAxB,CAArC,CAHE,CAAA;AAI0Bb,oBAAS,CAACxjC,KAAV,CAAgBskC,kBAA1C;AACA,MAAMC,eAAe,GAAGf,oBAAS,CAAC9iC,YAAlC;;ACPP,MAAM2hC,iBAAiB,GAAG,EAA1B,CAAA;AACA,MAAMmC,sBAAsB,GAAG,EAA/B,CAAA;AACA,MAAMlC,gBAAgB,GAAG,EAAzB,CAAA;AACA,MAAMmC,iCAAiC,GAAG,EAA1C,CAAA;AAEA;AACA;AACA;;AA6BA,MAAMC,4BAA4B,GAAG39B,uBAAY,CAACI,MAAb,CAcnC,CACAJ,uBAAY,CAACkB,EAAb,CAAgB,eAAhB,CADA,EAEAlB,uBAAY,CAAC07B,GAAb,CAAiB,iBAAjB,CAFA,EAGA17B,uBAAY,CAACkB,EAAb,CAAgB,2BAAhB,CAHA,EAIAlB,uBAAY,CAAC07B,GAAb,CAAiB,kBAAjB,CAJA,EAKA17B,uBAAY,CAACkB,EAAb,CAAgB,4BAAhB,CALA,EAMAlB,uBAAY,CAAC07B,GAAb,CAAiB,mBAAjB,CANA,EAOA17B,uBAAY,CAAC07B,GAAb,CAAiB,iBAAjB,CAPA,EAQA17B,uBAAY,CAACkB,EAAb,CAAgB,yBAAhB,CARA,EASAlB,uBAAY,CAACC,IAAb,CAAkB,EAAlB,EAAsB,YAAtB,CATA,EAUAD,uBAAY,CAACC,IAAb,CAAkB,EAAlB,EAAsB,WAAtB,CAVA,EAWAD,uBAAY,CAACkB,EAAb,CAAgB,YAAhB,CAXA,CAdmC,CAArC,CAAA;AA4BO,MAAM08B,gBAAN,CAAuB;AAC5B;AACF;AACA;AACE5iC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;AAKE;AACF;AACA;AACA;EAC8B,OAArB6iC,qBAAqB,CAC1BnkC,SAD0B,EAElB;AACR0N,IAAAA,MAAM,CACJ1N,SAAS,CAACqC,MAAV,KAAqBw/B,gBADjB,EAEH,CAAqBA,mBAAAA,EAAAA,gBAAiB,CAAsB7hC,oBAAAA,EAAAA,SAAS,CAACqC,MAAO,QAF1E,CAAN,CAAA;;IAKA,IAAI;MACF,OAAOtB,aAAM,CAACE,IAAP,CACLmjC,wBAAI,CAACC,UAAL,CAAgBhB,MAAhB,CAAuBxiC,QAAQ,CAACb,SAAD,CAA/B,EAA4CsjC,MAA5C,EADK,EAEL3iC,KAFK,CAEC,CAACojC,sBAFF,CAAP,CAAA;KADF,CAIE,OAAOhpB,KAAP,EAAc;AACd,MAAA,MAAM,IAAIzY,KAAJ,CAAW,CAAuCyY,qCAAAA,EAAAA,KAAM,EAAxD,CAAN,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;AACA;;;EACuC,OAA9BmnB,8BAA8B,CACnC7oB,MADmC,EAEX;IACxB,MAAM;MAACrZ,SAAD;MAAYU,OAAZ;MAAqBqF,SAArB;MAAgCu+B,UAAhC;AAA4CnC,MAAAA,gBAAAA;AAA5C,KAAA,GACJ9oB,MADF,CAAA;IAEA,OAAO6qB,gBAAgB,CAACK,+BAAjB,CAAiD;AACtDC,MAAAA,UAAU,EAAEN,gBAAgB,CAACC,qBAAjB,CAAuCnkC,SAAvC,CAD0C;MAEtDU,OAFsD;MAGtDqF,SAHsD;MAItDu+B,UAJsD;AAKtDnC,MAAAA,gBAAAA;AALsD,KAAjD,CAAP,CAAA;AAOD,GAAA;AAED;AACF;AACA;AACA;;;EACwC,OAA/BoC,+BAA+B,CACpClrB,MADoC,EAEZ;IACxB,MAAM;AACJmrB,MAAAA,UAAU,EAAEC,UADR;MAEJ/jC,OAFI;MAGJqF,SAHI;MAIJu+B,UAJI;AAKJnC,MAAAA,gBAAgB,GAAG,CAAA;AALf,KAAA,GAMF9oB,MANJ,CAAA;AAQA,IAAA,IAAImrB,UAAJ,CAAA;;AACA,IAAA,IAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAClC,MAAA,IAAIA,UAAU,CAAC7iB,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;AAC/B4iB,QAAAA,UAAU,GAAGzjC,aAAM,CAACE,IAAP,CAAYwjC,UAAU,CAACC,MAAX,CAAkB,CAAlB,CAAZ,EAAkC,KAAlC,CAAb,CAAA;AACD,OAFD,MAEO;QACLF,UAAU,GAAGzjC,aAAM,CAACE,IAAP,CAAYwjC,UAAZ,EAAwB,KAAxB,CAAb,CAAA;AACD,OAAA;AACF,KAND,MAMO;AACLD,MAAAA,UAAU,GAAGC,UAAb,CAAA;AACD,KAAA;;AAED/2B,IAAAA,MAAM,CACJ82B,UAAU,CAACniC,MAAX,KAAsB0hC,sBADlB,EAEH,CAAkBA,gBAAAA,EAAAA,sBAAuB,CAAsBS,oBAAAA,EAAAA,UAAU,CAACniC,MAAO,QAF9E,CAAN,CAAA;IAKA,MAAMsiC,SAAS,GAAG,CAAA,GAAIX,iCAAtB,CAAA;IACA,MAAMY,gBAAgB,GAAGD,SAAzB,CAAA;AACA,IAAA,MAAMtC,eAAe,GAAGsC,SAAS,GAAGH,UAAU,CAACniC,MAA/C,CAAA;IACA,MAAMigC,iBAAiB,GAAGD,eAAe,GAAGt8B,SAAS,CAAC1D,MAA5B,GAAqC,CAA/D,CAAA;IACA,MAAMkgC,aAAa,GAAG,CAAtB,CAAA;AAEA,IAAA,MAAM3oB,eAAe,GAAG7Y,aAAM,CAAC6C,KAAP,CACtBqgC,4BAA4B,CAAC98B,IAA7B,GAAoCzG,OAAO,CAAC2B,MADtB,CAAxB,CAAA;IAIA4hC,4BAA4B,CAACviC,MAA7B,CACE;MACE6gC,aADF;MAEEF,eAFF;AAGEI,MAAAA,yBAAyB,EAAEN,gBAH7B;MAIEyC,gBAJF;AAKEC,MAAAA,0BAA0B,EAAE1C,gBAL9B;MAMEG,iBANF;MAOEK,eAAe,EAAEjiC,OAAO,CAAC2B,MAP3B;AAQEugC,MAAAA,uBAAuB,EAAET,gBAR3B;AASEp8B,MAAAA,SAAS,EAAElF,QAAQ,CAACkF,SAAD,CATrB;AAUEy+B,MAAAA,UAAU,EAAE3jC,QAAQ,CAAC2jC,UAAD,CAVtB;AAWEF,MAAAA,UAAAA;AAXF,KADF,EAcE1qB,eAdF,CAAA,CAAA;IAiBAA,eAAe,CAACxL,IAAhB,CAAqBvN,QAAQ,CAACH,OAAD,CAA7B,EAAwCujC,4BAA4B,CAAC98B,IAArE,CAAA,CAAA;IAEA,OAAO,IAAIkH,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,EAD0B;MAEhC8B,SAAS,EAAEggC,gBAAgB,CAAChgC,SAFI;AAGhCpC,MAAAA,IAAI,EAAE8X,eAAAA;AAH0B,KAA3B,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;AACA;;;EACwC,OAA/BipB,+BAA+B,CACpCxpB,MADoC,EAEZ;IACxB,MAAM;AAACypB,MAAAA,UAAU,EAAEgC,IAAb;MAAmBpkC,OAAnB;AAA4ByhC,MAAAA,gBAAAA;AAA5B,KAAA,GAAgD9oB,MAAtD,CAAA;AAEA3L,IAAAA,MAAM,CACJo3B,IAAI,CAACziC,MAAL,KAAgBu/B,iBADZ,EAEH,CAAsBA,oBAAAA,EAAAA,iBAAkB,CAAsBkD,oBAAAA,EAAAA,IAAI,CAACziC,MAAO,QAFvE,CAAN,CAAA;;IAKA,IAAI;AACF,MAAA,MAAMygC,UAAU,GAAGjiC,QAAQ,CAACikC,IAAD,CAA3B,CAAA;AACA,MAAA,MAAM9kC,SAAS,GAAG8jC,eAAe,CAC/BhB,UAD+B,EAE/B,KAAA;AAAM;AAFyB,OAAf,CAGhBniC,KAHgB,CAGV,CAHU,CAAlB,CAFE;;AAMF,MAAA,MAAMokC,WAAW,GAAGhkC,aAAM,CAACE,IAAP,CAClBmjC,wBAAI,CAACC,UAAL,CAAgBhB,MAAhB,CAAuBxiC,QAAQ,CAACH,OAAD,CAA/B,CAA0C4iC,CAAAA,MAA1C,EADkB,CAApB,CAAA;MAGA,MAAM,CAACv9B,SAAD,EAAYu+B,UAAZ,CAAA,GAA0Bf,SAAS,CAACwB,WAAD,EAAcjC,UAAd,CAAzC,CAAA;MAEA,OAAO,IAAA,CAAKZ,8BAAL,CAAoC;QACzCliC,SADyC;QAEzCU,OAFyC;QAGzCqF,SAHyC;QAIzCu+B,UAJyC;AAKzCnC,QAAAA,gBAAAA;AALyC,OAApC,CAAP,CAAA;KAXF,CAkBE,OAAOpnB,KAAP,EAAc;AACd,MAAA,MAAM,IAAIzY,KAAJ,CAAW,CAA8ByY,4BAAAA,EAAAA,KAAM,EAA/C,CAAN,CAAA;AACD,KAAA;AACF,GAAA;;AA1J2B,CAAA;AAAjBmpB,iBASJhgC,YAAuB,IAAIlB,SAAJ,CAC5B,6CAD4B;;AChEhC;AACA;AACA;AACA;;MACagiC,eAAe,GAAG,IAAIhiC,SAAJ,CAC7B,6CAD6B,EAAxB;AAIP;AACA;AACA;;AACO,MAAMiiC,UAAN,CAAiB;AACtB;;AAEA;;AAGA;AACF;AACA;AACA;AACA;AACE3jC,EAAAA,WAAW,CAAC4jC,MAAD,EAAoBC,UAApB,EAA2C;AAAA,IAAA,IAAA,CATtDD,MASsD,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAPtDC,UAOsD,GAAA,KAAA,CAAA,CAAA;IACpD,IAAKD,CAAAA,MAAL,GAAcA,MAAd,CAAA;IACA,IAAKC,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;AACD,GAAA;;AAdqB,CAAA;;AAsBxB;AACA;AACA;AACO,MAAMC,MAAN,CAAa;AAClB;;AAEA;;AAEA;;AAGA;AACF;AACA;AACE9jC,EAAAA,WAAW,CAAC+jC,aAAD,EAAwB1nB,KAAxB,EAAuC2nB,SAAvC,EAA6D;AAAA,IAAA,IAAA,CATxED,aASwE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAPxE1nB,KAOwE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CALxE2nB,SAKwE,GAAA,KAAA,CAAA,CAAA;IACtE,IAAKD,CAAAA,aAAL,GAAqBA,aAArB,CAAA;IACA,IAAK1nB,CAAAA,KAAL,GAAaA,KAAb,CAAA;IACA,IAAK2nB,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;AACD,GAAA;AAED;AACF;AACA;;;AAnBoB,CAAA;AAAPF,OAoBJjgC,UAAkB,IAAIigC,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBpiC,SAAS,CAACmC,OAA3B;;AAkI3B;AACA;AACA;AACO,MAAMogC,gBAAN,CAAuB;AAC5B;AACF;AACA;AACEjkC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;EAC8B,OAArBgV,qBAAqB,CAC1B3L,WAD0B,EAEJ;AACtB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AAEA,IAAA,MAAMsS,qBAAqB,GAAGlQ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAA9B,CAAA;IACA,MAAM8P,SAAS,GAAGD,qBAAqB,CAAC3U,MAAtB,CAA6B8I,WAAW,CAAC7I,IAAzC,CAAlB,CAAA;AAEA,IAAA,IAAI4F,IAAJ,CAAA;;AACA,IAAA,KAAK,MAAM,CAACgP,MAAD,EAASzO,MAAT,CAAX,IAA+BzG,MAAM,CAACmV,OAAP,CAAe6uB,yBAAf,CAA/B,EAA0E;AACxE,MAAA,IAAIv9B,MAAM,CAAC2B,KAAP,IAAgB6M,SAApB,EAA+B;AAC7B/O,QAAAA,IAAI,GAAGgP,MAAP,CAAA;AACA,QAAA,MAAA;AACD,OAAA;AACF,KAAA;;IAED,IAAI,CAAChP,IAAL,EAAW;AACT,MAAA,MAAM,IAAIpF,KAAJ,CAAU,oDAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAOoF,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACyB,OAAhB+9B,gBAAgB,CACrB96B,WADqB,EAEE;AACvB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAACgF,UAAD;AAAaC,MAAAA,MAAAA;KAAU+N,GAAAA,YAAU,CACrCowB,yBAAyB,CAACE,UADW,EAErC/6B,WAAW,CAAC7I,IAFyB,CAAvC,CAAA;IAKA,OAAO;AACL6jC,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELkC,MAAAA,UAAU,EAAE,IAAI69B,UAAJ,CACV,IAAIjiC,SAAJ,CAAcoE,UAAU,CAAC89B,MAAzB,CADU,EAEV,IAAIliC,SAAJ,CAAcoE,UAAU,CAAC+9B,UAAzB,CAFU,CAFP;AAML99B,MAAAA,MAAM,EAAE,IAAI+9B,MAAJ,CACN/9B,MAAM,CAACg+B,aADD,EAENh+B,MAAM,CAACsW,KAFD,EAGN,IAAI3a,SAAJ,CAAcqE,MAAM,CAACi+B,SAArB,CAHM,CAAA;KANV,CAAA;AAYD,GAAA;AAED;AACF;AACA;;;EACuB,OAAdM,cAAc,CACnBj7B,WADmB,EAEE;AACrB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IACAgT,YAAU,CAACowB,yBAAyB,CAACK,QAA3B,EAAqCl7B,WAAW,CAAC7I,IAAjD,CAAV,CAAA;IAEA,OAAO;AACL6jC,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAEL8mB,MAAAA,UAAU,EAAErhB,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAF3B;AAGLwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAHxC,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACwB,OAAf4gC,eAAe,CACpBn7B,WADoB,EAEE;AACtB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IACA,MAAM;MAAC2jC,aAAD;AAAgBC,MAAAA,sBAAAA;KAA0B5wB,GAAAA,YAAU,CACxDowB,yBAAyB,CAACS,SAD8B,EAExDt7B,WAAW,CAAC7I,IAF4C,CAA1D,CAAA;AAKA,IAAA,MAAMokC,CAAuB,GAAG;AAC9BP,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MADH;AAE9BwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFR;AAG9B6T,MAAAA,mBAAmB,EAAE,IAAI/V,SAAJ,CAAc+iC,aAAd,CAHS;AAI9BC,MAAAA,sBAAsB,EAAE;AACtBp8B,QAAAA,KAAK,EAAEo8B,sBAAAA;AADe,OAAA;KAJ1B,CAAA;;AAQA,IAAA,IAAIr7B,WAAW,CAACvI,IAAZ,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B6jC,CAAC,CAACC,eAAF,GAAoBx7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAA,CAAoB8C,MAAxC,CAAA;AACD,KAAA;;AACD,IAAA,OAAOghC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACgC,OAAvBE,uBAAuB,CAC5Bz7B,WAD4B,EAEE;AAC9B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MACJ2jC,aADI;MAEJC,sBAFI;MAGJK,aAHI;AAIJC,MAAAA,cAAAA;KACElxB,GAAAA,YAAU,CACZowB,yBAAyB,CAACe,iBADd,EAEZ57B,WAAW,CAAC7I,IAFA,CALd,CAAA;AAUA,IAAA,MAAMokC,CAA+B,GAAG;AACtCP,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MADK;AAEtCshC,MAAAA,aAAa,EAAE77B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFG;AAGtCmhC,MAAAA,aAAa,EAAEA,aAHuB;AAItCC,MAAAA,cAAc,EAAE,IAAItjC,SAAJ,CAAcsjC,cAAd,CAJsB;AAKtCvtB,MAAAA,mBAAmB,EAAE,IAAI/V,SAAJ,CAAc+iC,aAAd,CALiB;AAMtCC,MAAAA,sBAAsB,EAAE;AACtBp8B,QAAAA,KAAK,EAAEo8B,sBAAAA;AADe,OAAA;KAN1B,CAAA;;AAUA,IAAA,IAAIr7B,WAAW,CAACvI,IAAZ,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B6jC,CAAC,CAACC,eAAF,GAAoBx7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAA,CAAoB8C,MAAxC,CAAA;AACD,KAAA;;AACD,IAAA,OAAOghC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACoB,OAAXO,WAAW,CAAC97B,WAAD,EAAwD;AACxE,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IACA,MAAM;AAAC2U,MAAAA,QAAAA;KAAY3B,GAAAA,YAAU,CAC3BowB,yBAAyB,CAACkB,KADC,EAE3B/7B,WAAW,CAAC7I,IAFe,CAA7B,CAAA;IAKA,OAAO;AACL6jC,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELyhC,MAAAA,gBAAgB,EAAEh8B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFjC;AAGLwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAHjC;AAIL6R,MAAAA,QAAAA;KAJF,CAAA;AAMD,GAAA;AAED;AACF;AACA;;;EACoB,OAAX6vB,WAAW,CAACj8B,WAAD,EAAwD;AACxE,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IACAgT,YAAU,CAACowB,yBAAyB,CAACqB,KAA3B,EAAkCl8B,WAAW,CAAC7I,IAA9C,CAAV,CAAA;IAEA,OAAO;AACL6jC,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAEL4hC,MAAAA,iBAAiB,EAAEn8B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFlC;AAGLwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAHxC,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACuB,OAAd6hC,cAAc,CACnBp8B,WADmB,EAEE;AACrB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IACA,MAAM;AAAC2U,MAAAA,QAAAA;KAAY3B,GAAAA,YAAU,CAC3BowB,yBAAyB,CAACwB,QADC,EAE3Br8B,WAAW,CAAC7I,IAFe,CAA7B,CAAA;AAKA,IAAA,MAAMokC,CAAsB,GAAG;AAC7BP,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MADJ;AAE7BoS,MAAAA,QAAQ,EAAE3M,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFD;AAG7BwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAHT;AAI7B6R,MAAAA,QAAAA;KAJF,CAAA;;AAMA,IAAA,IAAIpM,WAAW,CAACvI,IAAZ,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B6jC,CAAC,CAACC,eAAF,GAAoBx7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAA,CAAoB8C,MAAxC,CAAA;AACD,KAAA;;AACD,IAAA,OAAOghC,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACyB,OAAhBe,gBAAgB,CACrBt8B,WADqB,EAEE;AACvB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IACAgT,YAAU,CAACowB,yBAAyB,CAAC0B,UAA3B,EAAuCv8B,WAAW,CAAC7I,IAAnD,CAAV,CAAA;IAEA,OAAO;AACL6jC,MAAAA,WAAW,EAAEh7B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD5B;AAELwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAFxC,CAAA;AAID,GAAA;AAED;AACF;AACA;;;EACuB,OAAdqR,cAAc,CAACrS,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACd,MAAV,CAAiB+jC,YAAY,CAACjjC,SAA9B,CAAL,EAA+C;AAC7C,MAAA,MAAM,IAAI5B,KAAJ,CAAU,oDAAV,CAAN,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACuB,EAAA,OAAdwU,cAAc,CAAC1U,IAAD,EAAmB6W,cAAnB,EAA2C;AAC9D,IAAA,IAAI7W,IAAI,CAACC,MAAL,GAAc4W,cAAlB,EAAkC;MAChC,MAAM,IAAI3W,KAAJ,CACH,CAA6BF,2BAAAA,EAAAA,IAAI,CAACC,MAAO,CAAA,yBAAA,EAA2B4W,cAAe,CAAA,CADhF,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;;AAxO2B,CAAA;AA2O9B;AACA;AACA;;AA+CA;AACA;AACA;AACA;MACausB,yBAAyB,GAAGhkC,MAAM,CAAC0X,MAAP,CAItC;AACDwsB,EAAAA,UAAU,EAAE;AACV97B,IAAAA,KAAK,EAAE,CADG;IAEV3B,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA6D,CACnEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADmE,EAEnE2E,UAAA,EAFmE,EAGnEA,MAAA,EAHmE,CAA7D,CAAA;GAHT;AASD26B,EAAAA,SAAS,EAAE;AACTr8B,IAAAA,KAAK,EAAE,CADE;IAET3B,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA4D,CAClEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADkE,EAElE2E,SAAA,CAAiB,eAAjB,CAFkE,EAGlEhF,uBAAY,CAACK,GAAb,CAAiB,wBAAjB,CAHkE,CAA5D,CAAA;GAXT;AAiBDk/B,EAAAA,QAAQ,EAAE;AACRj8B,IAAAA,KAAK,EAAE,CADC;AAER3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA2D,CACjEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADiE,CAA3D,CAAA;GAnBT;AAuBD+/B,EAAAA,KAAK,EAAE;AACL98B,IAAAA,KAAK,EAAE,CADF;AAEL3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAAwD,CAC9DJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAD8D,EAE9DL,uBAAY,CAACgB,IAAb,CAAkB,UAAlB,CAF8D,CAAxD,CAAA;GAzBT;AA8BD0/B,EAAAA,QAAQ,EAAE;AACRp9B,IAAAA,KAAK,EAAE,CADC;AAER3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA2D,CACjEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADiE,EAEjEL,uBAAY,CAACgB,IAAb,CAAkB,UAAlB,CAFiE,CAA3D,CAAA;GAhCT;AAqCD4/B,EAAAA,UAAU,EAAE;AACVt9B,IAAAA,KAAK,EAAE,CADG;AAEV3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA6D,CACnEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADmE,CAA7D,CAAA;GAvCT;AA2CDkgC,EAAAA,KAAK,EAAE;AACLj9B,IAAAA,KAAK,EAAE,CADF;AAEL3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAAwD,CAC9DJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAD8D,CAAxD,CAAA;GA7CT;AAiDD4/B,EAAAA,iBAAiB,EAAE;AACjB38B,IAAAA,KAAK,EAAE,CADU;AAEjB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CACN,CACEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADF,EAEE2E,SAAA,CAAiB,eAAjB,CAFF,EAGEhF,uBAAY,CAACK,GAAb,CAAiB,wBAAjB,CAHF,EAIE2E,UAAA,CAAkB,eAAlB,CAJF,EAKEA,SAAA,CAAiB,gBAAjB,CALF,CADM,CAAA;AAFS,GAAA;AAjDlB,CAJsC,EAAlC;AAmEP;AACA;AACA;;AAMA;AACA;AACA;MACa87B,wBAAwB,GAAG5lC,MAAM,CAAC0X,MAAP,CAAc;AACpDmuB,EAAAA,MAAM,EAAE;AACNz9B,IAAAA,KAAK,EAAE,CAAA;GAF2C;AAIpD09B,EAAAA,UAAU,EAAE;AACV19B,IAAAA,KAAK,EAAE,CAAA;AADG,GAAA;AAJwC,CAAd,EAAjC;AASP;AACA;AACA;;AACO,MAAMu9B,YAAN,CAAmB;AACxB;AACF;AACA;AACE7lC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;AAcE;AACF;AACA;EACmB,OAAVimC,UAAU,CAACluB,MAAD,EAAwD;IACvE,MAAM;MAACssB,WAAD;MAAcv+B,UAAd;AAA0BC,MAAAA,MAAM,EAAEmgC,WAAAA;AAAlC,KAAA,GAAiDnuB,MAAvD,CAAA;AACA,IAAA,MAAMhS,MAAc,GAAGmgC,WAAW,IAAIpC,MAAM,CAACjgC,OAA7C,CAAA;AACA,IAAA,MAAMuC,IAAI,GAAG89B,yBAAyB,CAACE,UAAvC,CAAA;AACA,IAAA,MAAM5jC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5BN,MAAAA,UAAU,EAAE;QACV89B,MAAM,EAAErkC,QAAQ,CAACuG,UAAU,CAAC89B,MAAX,CAAkBrkC,QAAlB,EAAD,CADN;QAEVskC,UAAU,EAAEtkC,QAAQ,CAACuG,UAAU,CAAC+9B,UAAX,CAAsBtkC,QAAtB,EAAD,CAAA;OAHM;AAK5BwG,MAAAA,MAAM,EAAE;QACNg+B,aAAa,EAAEh+B,MAAM,CAACg+B,aADhB;QAEN1nB,KAAK,EAAEtW,MAAM,CAACsW,KAFR;QAGN2nB,SAAS,EAAEzkC,QAAQ,CAACwG,MAAM,CAACi+B,SAAP,CAAiBzkC,QAAjB,EAAD,CAAA;AAHb,OAAA;AALoB,KAAP,CAAvB,CAAA;AAWA,IAAA,MAAM+Y,eAAe,GAAG;AACtBxX,MAAAA,IAAI,EAAE,CACJ;AAAC8C,QAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE,IAAA;AAAnD,OADI,EAEJ;AAACtJ,QAAAA,MAAM,EAAE0O,kBAAT;AAA6BrF,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,KAAA;AAA1D,OAFI,CADgB;MAKtBtK,SAAS,EAAE,KAAKA,SALM;AAMtBpC,MAAAA,IAAAA;KANF,CAAA;AAQA,IAAA,OAAO,IAAIuM,sBAAJ,CAA2BuL,eAA3B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;EAC8B,OAArBJ,qBAAqB,CAC1BH,MAD0B,EAEb;AACb,IAAA,MAAM9N,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;AACAlD,IAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACQ,qBAAd,CAAoC;MAClCtC,UAAU,EAAEmC,MAAM,CAACnC,UADe;MAElCC,gBAAgB,EAAEkC,MAAM,CAACssB,WAFS;MAGlCluB,UAAU,EAAE4B,MAAM,CAAC5B,UAHe;MAIlCxT,IAAI,EAAEoV,MAAM,CAACpV,IAJqB;MAKlC8S,QAAQ,EAAEsC,MAAM,CAACtC,QALiB;MAMlCC,KAAK,EAAE,KAAKA,KANsB;AAOlC9S,MAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AAPkB,KAApC,CADF,CAAA,CAAA;IAYA,MAAM;MAACyhC,WAAD;MAAcv+B,UAAd;AAA0BC,MAAAA,MAAAA;AAA1B,KAAA,GAAoCgS,MAA1C,CAAA;AACA,IAAA,OAAO9N,WAAW,CAAC8D,GAAZ,CAAgB,IAAA,CAAKk4B,UAAL,CAAgB;MAAC5B,WAAD;MAAcv+B,UAAd;AAA0BC,MAAAA,MAAAA;AAA1B,KAAhB,CAAhB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACsB,OAAb+R,aAAa,CAACC,MAAD,EAAgD;AAClE,IAAA,MAAM9N,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;AACAlD,IAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACI,aAAd,CAA4B;MAC1BlC,UAAU,EAAEmC,MAAM,CAACnC,UADO;MAE1BC,gBAAgB,EAAEkC,MAAM,CAACssB,WAFC;MAG1B5uB,QAAQ,EAAEsC,MAAM,CAACtC,QAHS;MAI1BC,KAAK,EAAE,KAAKA,KAJc;AAK1B9S,MAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AALU,KAA5B,CADF,CAAA,CAAA;IAUA,MAAM;MAACyhC,WAAD;MAAcv+B,UAAd;AAA0BC,MAAAA,MAAAA;AAA1B,KAAA,GAAoCgS,MAA1C,CAAA;AACA,IAAA,OAAO9N,WAAW,CAAC8D,GAAZ,CAAgB,IAAA,CAAKk4B,UAAL,CAAgB;MAAC5B,WAAD;MAAcv+B,UAAd;AAA0BC,MAAAA,MAAAA;AAA1B,KAAhB,CAAhB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;;;EACiB,OAARogC,QAAQ,CAACpuB,MAAD,EAA2C;IACxD,MAAM;MAACssB,WAAD;MAAcjwB,gBAAd;AAAgCsW,MAAAA,UAAAA;AAAhC,KAAA,GAA8C3S,MAApD,CAAA;AAEA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAACK,QAAvC,CAAA;AACA,IAAA,MAAM/jC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;AAEA,IAAA,OAAO,IAAI+G,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;AAC3BjN,MAAAA,IAAI,EAAE,CACJ;AAAC8C,QAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE,IAAA;AAAnD,OADI,EAEJ;AAACtJ,QAAAA,MAAM,EAAE8mB,UAAT;AAAqBzd,QAAAA,QAAQ,EAAE,KAA/B;AAAsCC,QAAAA,UAAU,EAAE,KAAA;AAAlD,OAFI,EAGJ;AAACtJ,QAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE,KAAA;AAA3D,OAHI,EAIJ;AACEtJ,QAAAA,MAAM,EAAE8O,2BADV;AAEEzF,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;AAHd,OAJI,EASJ;AAACtJ,QAAAA,MAAM,EAAE8/B,eAAT;AAA0Bz2B,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;AAAvD,OATI,EAUJ;AAACtJ,QAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;AAAvD,OAVI,CADqB;MAa3BtK,SAAS,EAAE,KAAKA,SAbW;AAc3BpC,MAAAA,IAAAA;AAd2B,KAAtB,CAAP,CAAA;AAgBD,GAAA;AAED;AACF;AACA;AACA;;;EACkB,OAAT4lC,SAAS,CAACruB,MAAD,EAA4C;IAC1D,MAAM;MACJssB,WADI;MAEJjwB,gBAFI;MAGJqD,mBAHI;MAIJitB,sBAJI;AAKJG,MAAAA,eAAAA;AALI,KAAA,GAMF9sB,MANJ,CAAA;AAQA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAACS,SAAvC,CAAA;AACA,IAAA,MAAMnkC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5Bq+B,MAAAA,aAAa,EAAEllC,QAAQ,CAACkY,mBAAmB,CAAClY,QAApB,EAAD,CADK;MAE5BmlC,sBAAsB,EAAEA,sBAAsB,CAACp8B,KAAAA;AAFnB,KAAP,CAAvB,CAAA;IAKA,MAAMxH,IAAI,GAAG,CACX;AAAC8C,MAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE,IAAA;AAAnD,KADW,EAEX;AAACtJ,MAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE,IAAA;AAA3D,KAFW,EAGX;AAACtJ,MAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,MAAAA,QAAQ,EAAE,IAArC;AAA2CC,MAAAA,UAAU,EAAE,KAAA;AAAvD,KAHW,CAAb,CAAA;;AAKA,IAAA,IAAI23B,eAAJ,EAAqB;MACnB/jC,IAAI,CAACsG,IAAL,CAAU;AAACxD,QAAAA,MAAM,EAAEihC,eAAT;AAA0B53B,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;OAAjE,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,IAAIC,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;MAC3BjN,IAD2B;MAE3B8B,SAAS,EAAE,KAAKA,SAFW;AAG3BpC,MAAAA,IAAAA;AAH2B,KAAtB,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;AACA;;;EAC0B,OAAjB6lC,iBAAiB,CAACtuB,MAAD,EAAoD;IAC1E,MAAM;MACJssB,WADI;MAEJa,aAFI;MAGJH,aAHI;MAIJC,cAJI;MAKJvtB,mBALI;MAMJitB,sBANI;AAOJG,MAAAA,eAAAA;AAPI,KAAA,GAQF9sB,MARJ,CAAA;AAUA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAACe,iBAAvC,CAAA;AACA,IAAA,MAAMzkC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5Bq+B,MAAAA,aAAa,EAAEllC,QAAQ,CAACkY,mBAAmB,CAAClY,QAApB,EAAD,CADK;MAE5BmlC,sBAAsB,EAAEA,sBAAsB,CAACp8B,KAFnB;AAG5By8B,MAAAA,aAAa,EAAEA,aAHa;AAI5BC,MAAAA,cAAc,EAAEzlC,QAAQ,CAACylC,cAAc,CAACzlC,QAAf,EAAD,CAAA;AAJI,KAAP,CAAvB,CAAA;IAOA,MAAMuB,IAAI,GAAG,CACX;AAAC8C,MAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE,IAAA;AAAnD,KADW,EAEX;AAACtJ,MAAAA,MAAM,EAAEshC,aAAT;AAAwBj4B,MAAAA,QAAQ,EAAE,IAAlC;AAAwCC,MAAAA,UAAU,EAAE,KAAA;AAApD,KAFW,EAGX;AAACtJ,MAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE,KAAA;AAA3D,KAHW,CAAb,CAAA;;AAKA,IAAA,IAAI23B,eAAJ,EAAqB;MACnB/jC,IAAI,CAACsG,IAAL,CAAU;AAACxD,QAAAA,MAAM,EAAEihC,eAAT;AAA0B53B,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;OAAjE,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,IAAIC,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;MAC3BjN,IAD2B;MAE3B8B,SAAS,EAAE,KAAKA,SAFW;AAG3BpC,MAAAA,IAAAA;AAH2B,KAAtB,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACyB,OAAhB8lC,gBAAgB,CAACvuB,MAAD,EAAmD;IACxE,MAAM;MAACssB,WAAD;MAAcjwB,gBAAd;MAAgCixB,gBAAhC;AAAkD5vB,MAAAA,QAAAA;AAAlD,KAAA,GAA8DsC,MAApE,CAAA;AACA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAACkB,KAAvC,CAAA;AACA,IAAA,MAAM5kC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAACqP,MAAAA,QAAAA;AAAD,KAAP,CAAvB,CAAA;IACA,OAAO,IAAI1I,sBAAJ,CAA2B;AAChCjM,MAAAA,IAAI,EAAE,CACJ;AAAC8C,QAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE,IAAA;AAAnD,OADI,EAEJ;AAACtJ,QAAAA,MAAM,EAAEyhC,gBAAT;AAA2Bp4B,QAAAA,QAAQ,EAAE,KAArC;AAA4CC,QAAAA,UAAU,EAAE,IAAA;AAAxD,OAFI,EAGJ;AAACtJ,QAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;AAAvD,OAHI,CAD0B;MAMhCtK,SAAS,EAAE,KAAKA,SANgB;AAOhCpC,MAAAA,IAAAA;AAPgC,KAA3B,CAAP,CAAA;AASD,GAAA;AAED;AACF;AACA;;;EACc,OAAL+lC,KAAK,CAACxuB,MAAD,EAAwC;AAClD,IAAA,MAAM9N,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;AACAlD,IAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACI,aAAd,CAA4B;MAC1BlC,UAAU,EAAEmC,MAAM,CAAC3D,gBADO;MAE1ByB,gBAAgB,EAAEkC,MAAM,CAACstB,gBAFC;AAG1B5vB,MAAAA,QAAQ,EAAE,CAHgB;MAI1BC,KAAK,EAAE,KAAKA,KAJc;AAK1B9S,MAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AALU,KAA5B,CADF,CAAA,CAAA;IASA,OAAOqH,WAAW,CAAC8D,GAAZ,CAAgB,KAAKu4B,gBAAL,CAAsBvuB,MAAtB,CAAhB,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;;;EACsB,OAAbyuB,aAAa,CAACzuB,MAAD,EAAgD;IAClE,MAAM;MACJssB,WADI;MAEJjwB,gBAFI;MAGJixB,gBAHI;MAIJlvB,UAJI;MAKJxT,IALI;AAMJ8S,MAAAA,QAAAA;AANI,KAAA,GAOFsC,MAPJ,CAAA;AAQA,IAAA,MAAM9N,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;AACAlD,IAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACgB,QAAd,CAAuB;AACrBpC,MAAAA,aAAa,EAAE+uB,gBADM;MAErBlvB,UAFqB;MAGrBxT,IAHqB;MAIrB+S,KAAK,EAAE,KAAKA,KAJS;AAKrB9S,MAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AALK,KAAvB,CADF,CAAA,CAAA;AASA,IAAA,OAAOqH,WAAW,CAAC8D,GAAZ,CACL,IAAA,CAAKu4B,gBAAL,CAAsB;MACpBjC,WADoB;MAEpBjwB,gBAFoB;MAGpBixB,gBAHoB;AAIpB5vB,MAAAA,QAAAA;AAJoB,KAAtB,CADK,CAAP,CAAA;AAQD,GAAA;AAED;AACF;AACA;;;EACc,OAALgxB,KAAK,CAAC1uB,MAAD,EAAwC;IAClD,MAAM;MAACssB,WAAD;MAAcmB,iBAAd;AAAiCpxB,MAAAA,gBAAAA;AAAjC,KAAA,GAAqD2D,MAA3D,CAAA;AACA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAACqB,KAAvC,CAAA;AACA,IAAA,MAAM/kC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;AAEA,IAAA,OAAO,IAAI+G,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;AAC3BjN,MAAAA,IAAI,EAAE,CACJ;AAAC8C,QAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE,IAAA;AAAnD,OADI,EAEJ;AAACtJ,QAAAA,MAAM,EAAE4hC,iBAAT;AAA4Bv4B,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE,IAAA;AAAzD,OAFI,EAGJ;AAACtJ,QAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE,KAAA;AAA3D,OAHI,EAIJ;AACEtJ,QAAAA,MAAM,EAAE8O,2BADV;AAEEzF,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,UAAU,EAAE,KAAA;AAHd,OAJI,EASJ;AAACtJ,QAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;AAAvD,OATI,CADqB;MAY3BtK,SAAS,EAAE,KAAKA,SAZW;AAa3BpC,MAAAA,IAAAA;AAb2B,KAAtB,CAAP,CAAA;AAeD,GAAA;AAED;AACF;AACA;;;EACiB,OAARkmC,QAAQ,CAAC3uB,MAAD,EAA2C;IACxD,MAAM;MAACssB,WAAD;MAAcjwB,gBAAd;MAAgC4B,QAAhC;MAA0CP,QAA1C;AAAoDovB,MAAAA,eAAAA;AAApD,KAAA,GACJ9sB,MADF,CAAA;AAEA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAACwB,QAAvC,CAAA;AACA,IAAA,MAAMllC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAACqP,MAAAA,QAAAA;AAAD,KAAP,CAAvB,CAAA;IAEA,MAAM3U,IAAI,GAAG,CACX;AAAC8C,MAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE,IAAA;AAAnD,KADW,EAEX;AAACtJ,MAAAA,MAAM,EAAEoS,QAAT;AAAmB/I,MAAAA,QAAQ,EAAE,KAA7B;AAAoCC,MAAAA,UAAU,EAAE,IAAA;AAAhD,KAFW,EAGX;AAACtJ,MAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE,KAAA;AAA3D,KAHW,EAIX;AACEtJ,MAAAA,MAAM,EAAE8O,2BADV;AAEEzF,MAAAA,QAAQ,EAAE,KAFZ;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KAJW,EASX;AAACtJ,MAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,MAAAA,QAAQ,EAAE,IAArC;AAA2CC,MAAAA,UAAU,EAAE,KAAA;AAAvD,KATW,CAAb,CAAA;;AAWA,IAAA,IAAI23B,eAAJ,EAAqB;MACnB/jC,IAAI,CAACsG,IAAL,CAAU;AAACxD,QAAAA,MAAM,EAAEihC,eAAT;AAA0B53B,QAAAA,QAAQ,EAAE,KAApC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;OAAjE,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,OAAO,IAAIC,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;MAC3BjN,IAD2B;MAE3B8B,SAAS,EAAE,KAAKA,SAFW;AAG3BpC,MAAAA,IAAAA;AAH2B,KAAtB,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACmB,OAAVmmC,UAAU,CAAC5uB,MAAD,EAA6C;IAC5D,MAAM;MAACssB,WAAD;AAAcjwB,MAAAA,gBAAAA;AAAd,KAAA,GAAkC2D,MAAxC,CAAA;AACA,IAAA,MAAM3R,IAAI,GAAG89B,yBAAyB,CAAC0B,UAAvC,CAAA;AACA,IAAA,MAAMplC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,CAAvB,CAAA;AAEA,IAAA,OAAO,IAAI+G,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;AAC3BjN,MAAAA,IAAI,EAAE,CACJ;AAAC8C,QAAAA,MAAM,EAAEygC,WAAT;AAAsBp3B,QAAAA,QAAQ,EAAE,KAAhC;AAAuCC,QAAAA,UAAU,EAAE,IAAA;AAAnD,OADI,EAEJ;AAACtJ,QAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE,KAAA;AAA3D,OAFI,EAGJ;AAACtJ,QAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,QAAAA,QAAQ,EAAE,IAArC;AAA2CC,QAAAA,UAAU,EAAE,KAAA;AAAvD,OAHI,CADqB;MAM3BtK,SAAS,EAAE,KAAKA,SANW;AAO3BpC,MAAAA,IAAAA;AAP2B,KAAtB,CAAP,CAAA;AASD,GAAA;;AA/UuB,CAAA;AAAbqlC,aASJjjC,YAAuB,IAAIlB,SAAJ,CAC5B,6CAD4B;AATnBmkC,aAoBJnwB,QAAgB;;AC/kBzB;AACA;AACA;;AACO,MAAMkxB,QAAN,CAAe;AAIA;EAEpB5mC,WAAW,CACT2qB,UADS,EAETkc,eAFS,EAGTC,oBAHS,EAIT/b,UAJS,EAKT;AAAA,IAAA,IAAA,CAVFJ,UAUE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CATFkc,eASE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARFC,oBAQE,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAPF/b,UAOE,GAAA,KAAA,CAAA,CAAA;IACA,IAAKJ,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;IACA,IAAKkc,CAAAA,eAAL,GAAuBA,eAAvB,CAAA;IACA,IAAKC,CAAAA,oBAAL,GAA4BA,oBAA5B,CAAA;IACA,IAAK/b,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;AACD,GAAA;;AAhBmB,CAAA;AAmBtB;AACA;AACA;;AAsCA;AACA;AACA;AACO,MAAMgc,eAAN,CAAsB;AAC3B;AACF;AACA;AACE/mC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;EAC8B,OAArBgV,qBAAqB,CAC1B3L,WAD0B,EAEL;AACrB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AAEA,IAAA,MAAMsS,qBAAqB,GAAGlQ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CAA9B,CAAA;IACA,MAAM8P,SAAS,GAAGD,qBAAqB,CAAC3U,MAAtB,CAA6B8I,WAAW,CAAC7I,IAAzC,CAAlB,CAAA;AAEA,IAAA,IAAI4F,IAAJ,CAAA;;AACA,IAAA,KAAK,MAAM,CAACgP,MAAD,EAASzO,MAAT,CAAX,IAA+BzG,MAAM,CAACmV,OAAP,CAAe2xB,wBAAf,CAA/B,EAAyE;AACvE,MAAA,IAAIrgC,MAAM,CAAC2B,KAAP,IAAgB6M,SAApB,EAA+B;AAC7B/O,QAAAA,IAAI,GAAGgP,MAAP,CAAA;AACA,QAAA,MAAA;AACD,OAAA;AACF,KAAA;;IAED,IAAI,CAAChP,IAAL,EAAW;AACT,MAAA,MAAM,IAAIpF,KAAJ,CAAU,mDAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAOoF,IAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACgC,OAAvB6gC,uBAAuB,CAC5B59B,WAD4B,EAEH;AACzB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAACmF,MAAAA,QAAAA;KAAY6N,GAAAA,YAAU,CAC3BkzB,wBAAwB,CAACE,iBADE,EAE3B79B,WAAW,CAAC7I,IAFe,CAA7B,CAAA;IAKA,OAAO;AACLkqB,MAAAA,UAAU,EAAErhB,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAEL+mB,MAAAA,UAAU,EAAEthB,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAF3B;AAGLqC,MAAAA,QAAQ,EAAE,IAAI2gC,QAAJ,CACR,IAAIllC,SAAJ,CAAcuE,QAAQ,CAAC0kB,UAAvB,CADQ,EAER,IAAIjpB,SAAJ,CAAcuE,QAAQ,CAAC4gC,eAAvB,CAFQ,EAGR,IAAInlC,SAAJ,CAAcuE,QAAQ,CAAC6gC,oBAAvB,CAHQ,EAIR7gC,QAAQ,CAAC8kB,UAJD,CAAA;KAHZ,CAAA;AAUD,GAAA;AAED;AACF;AACA;;;EACwB,OAAfyZ,eAAe,CACpBn7B,WADoB,EAEC;AACrB,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;MAAC2jC,aAAD;AAAgB0C,MAAAA,qBAAAA;KAAyBrzB,GAAAA,YAAU,CACvDkzB,wBAAwB,CAACrC,SAD8B,EAEvDt7B,WAAW,CAAC7I,IAF2C,CAAzD,CAAA;IAKA,OAAO;AACLkqB,MAAAA,UAAU,EAAErhB,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAELwQ,MAAAA,gBAAgB,EAAE/K,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAFjC;AAGL6T,MAAAA,mBAAmB,EAAE,IAAI/V,SAAJ,CAAc+iC,aAAd,CAHhB;AAIL0C,MAAAA,qBAAqB,EAAE;AACrB7+B,QAAAA,KAAK,EAAE6+B,qBAAAA;AADc,OAAA;KAJzB,CAAA;AAQD,GAAA;AAED;AACF;AACA;;;EACuB,OAAd1B,cAAc,CACnBp8B,WADmB,EAEY;AAC/B,IAAA,IAAA,CAAK4L,cAAL,CAAoB5L,WAAW,CAACzG,SAAhC,CAAA,CAAA;AACA,IAAA,IAAA,CAAK4S,cAAL,CAAoBnM,WAAW,CAACvI,IAAhC,EAAsC,CAAtC,CAAA,CAAA;IAEA,MAAM;AAAC2U,MAAAA,QAAAA;KAAY3B,GAAAA,YAAU,CAC3BkzB,wBAAwB,CAACtB,QADE,EAE3Br8B,WAAW,CAAC7I,IAFe,CAA7B,CAAA;IAKA,OAAO;AACLkqB,MAAAA,UAAU,EAAErhB,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAD3B;AAELwjC,MAAAA,0BAA0B,EAAE/9B,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,EAAoB8C,MAF3C;MAGL6R,QAHK;AAILO,MAAAA,QAAQ,EAAE3M,WAAW,CAACvI,IAAZ,CAAiB,CAAjB,CAAoB8C,CAAAA,MAAAA;KAJhC,CAAA;AAMD,GAAA;AAED;AACF;AACA;;;EACuB,OAAdqR,cAAc,CAACrS,SAAD,EAAuB;IAC1C,IAAI,CAACA,SAAS,CAACd,MAAV,CAAiBulC,WAAW,CAACzkC,SAA7B,CAAL,EAA8C;AAC5C,MAAA,MAAM,IAAI5B,KAAJ,CAAU,mDAAV,CAAN,CAAA;AACD,KAAA;AACF,GAAA;AAED;AACF;AACA;;;AACuB,EAAA,OAAdwU,cAAc,CAAC1U,IAAD,EAAmB6W,cAAnB,EAA2C;AAC9D,IAAA,IAAI7W,IAAI,CAACC,MAAL,GAAc4W,cAAlB,EAAkC;MAChC,MAAM,IAAI3W,KAAJ,CACH,CAA6BF,2BAAAA,EAAAA,IAAI,CAACC,MAAO,CAAA,yBAAA,EAA2B4W,cAAe,CAAA,CADhF,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;;AA1H0B,CAAA;AA6H7B;AACA;AACA;;AA0BA,MAAMqvB,wBAAwB,GAAG9mC,MAAM,CAAC0X,MAAP,CAI9B;AACDsvB,EAAAA,iBAAiB,EAAE;AACjB5+B,IAAAA,KAAK,EAAE,CADU;AAEjB3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAAmE,CACzEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADyE,EAEzE2E,QAAA,EAFyE,CAAnE,CAAA;GAHT;AAQD26B,EAAAA,SAAS,EAAE;AACTr8B,IAAAA,KAAK,EAAE,CADE;IAET3B,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA2D,CACjEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADiE,EAEjE2E,SAAA,CAAiB,eAAjB,CAFiE,EAGjEhF,uBAAY,CAACK,GAAb,CAAiB,uBAAjB,CAHiE,CAA3D,CAAA;GAVT;AAgBDqgC,EAAAA,QAAQ,EAAE;AACRp9B,IAAAA,KAAK,EAAE,CADC;AAER3B,IAAAA,MAAM,EAAE3B,uBAAY,CAACI,MAAb,CAA0D,CAChEJ,uBAAY,CAACK,GAAb,CAAiB,aAAjB,CADgE,EAEhEL,uBAAY,CAACgB,IAAb,CAAkB,UAAlB,CAFgE,CAA1D,CAAA;AAFA,GAAA;AAhBT,CAJ8B,CAAjC,CAAA;AA6BA;AACA;AACA;;AAMA;AACA;AACA;MACashC,uBAAuB,GAAGpnC,MAAM,CAAC0X,MAAP,CAAc;AACnD2vB,EAAAA,KAAK,EAAE;AACLj/B,IAAAA,KAAK,EAAE,CAAA;GAF0C;AAInD09B,EAAAA,UAAU,EAAE;AACV19B,IAAAA,KAAK,EAAE,CAAA;AADG,GAAA;AAJuC,CAAd,EAAhC;AASP;AACA;AACA;;AACO,MAAM++B,WAAN,CAAkB;AACvB;AACF;AACA;AACErnC,EAAAA,WAAW,GAAG,EAAE;AAEhB;AACF;AACA;;;AAcE;AACF;AACA;EAC0B,OAAjBwnC,iBAAiB,CACtBzvB,MADsB,EAEE;IACxB,MAAM;MAAC2S,UAAD;MAAaC,UAAb;AAAyB1kB,MAAAA,QAAAA;AAAzB,KAAA,GAAqC8R,MAA3C,CAAA;AACA,IAAA,MAAM3R,IAAI,GAAG4gC,wBAAwB,CAACE,iBAAtC,CAAA;AACA,IAAA,MAAM1mC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5BH,MAAAA,QAAQ,EAAE;QACR0kB,UAAU,EAAEprB,QAAQ,CAAC0G,QAAQ,CAAC0kB,UAAT,CAAoBprB,QAApB,EAAD,CADZ;QAERsnC,eAAe,EAAEtnC,QAAQ,CAAC0G,QAAQ,CAAC4gC,eAAT,CAAyBtnC,QAAzB,EAAD,CAFjB;QAGRunC,oBAAoB,EAAEvnC,QAAQ,CAC5B0G,QAAQ,CAAC6gC,oBAAT,CAA8BvnC,QAA9B,EAD4B,CAHtB;QAMRwrB,UAAU,EAAE9kB,QAAQ,CAAC8kB,UAAAA;AANb,OAAA;AADkB,KAAP,CAAvB,CAAA;AAUA,IAAA,MAAMzS,eAAe,GAAG;AACtBxX,MAAAA,IAAI,EAAE,CACJ;AAAC8C,QAAAA,MAAM,EAAE8mB,UAAT;AAAqBzd,QAAAA,QAAQ,EAAE,KAA/B;AAAsCC,QAAAA,UAAU,EAAE,IAAA;AAAlD,OADI,EAEJ;AAACtJ,QAAAA,MAAM,EAAE0O,kBAAT;AAA6BrF,QAAAA,QAAQ,EAAE,KAAvC;AAA8CC,QAAAA,UAAU,EAAE,KAAA;AAA1D,OAFI,EAGJ;AAACtJ,QAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAE,KAAA;AAA3D,OAHI,EAIJ;AAACtJ,QAAAA,MAAM,EAAE+mB,UAAT;AAAqB1d,QAAAA,QAAQ,EAAE,IAA/B;AAAqCC,QAAAA,UAAU,EAAE,KAAA;AAAjD,OAJI,CADgB;MAOtBtK,SAAS,EAAE,KAAKA,SAPM;AAQtBpC,MAAAA,IAAAA;KARF,CAAA;AAUA,IAAA,OAAO,IAAIuM,sBAAJ,CAA2BuL,eAA3B,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;;;EACsB,OAAbR,aAAa,CAACC,MAAD,EAA+C;AACjE,IAAA,MAAM9N,WAAW,GAAG,IAAIkD,WAAJ,EAApB,CAAA;AACAlD,IAAAA,WAAW,CAAC8D,GAAZ,CACE2J,aAAa,CAACI,aAAd,CAA4B;MAC1BlC,UAAU,EAAEmC,MAAM,CAACnC,UADO;MAE1BC,gBAAgB,EAAEkC,MAAM,CAAC2S,UAFC;MAG1BjV,QAAQ,EAAEsC,MAAM,CAACtC,QAHS;MAI1BC,KAAK,EAAE,KAAKA,KAJc;AAK1B9S,MAAAA,SAAS,EAAE,IAAKA,CAAAA,SAAAA;AALU,KAA5B,CADF,CAAA,CAAA;AAUA,IAAA,OAAOqH,WAAW,CAAC8D,GAAZ,CACL,IAAA,CAAKy5B,iBAAL,CAAuB;MACrB9c,UAAU,EAAE3S,MAAM,CAAC2S,UADE;AAErBC,MAAAA,UAAU,EAAE5S,MAAM,CAAC9R,QAAP,CAAgB0kB,UAFP;MAGrB1kB,QAAQ,EAAE8R,MAAM,CAAC9R,QAAAA;AAHI,KAAvB,CADK,CAAP,CAAA;AAOD,GAAA;AAED;AACF;AACA;;;EACkB,OAATmgC,SAAS,CAACruB,MAAD,EAA2C;IACzD,MAAM;MACJ2S,UADI;MAEJtW,gBAFI;MAGJqD,mBAHI;AAIJ0vB,MAAAA,qBAAAA;AAJI,KAAA,GAKFpvB,MALJ,CAAA;AAOA,IAAA,MAAM3R,IAAI,GAAG4gC,wBAAwB,CAACrC,SAAtC,CAAA;AACA,IAAA,MAAMnkC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAC5Bq+B,MAAAA,aAAa,EAAEllC,QAAQ,CAACkY,mBAAmB,CAAClY,QAApB,EAAD,CADK;MAE5B4nC,qBAAqB,EAAEA,qBAAqB,CAAC7+B,KAAAA;AAFjB,KAAP,CAAvB,CAAA;IAKA,MAAMxH,IAAI,GAAG,CACX;AAAC8C,MAAAA,MAAM,EAAE8mB,UAAT;AAAqBzd,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE,IAAA;AAAlD,KADW,EAEX;AAACtJ,MAAAA,MAAM,EAAEsO,mBAAT;AAA8BjF,MAAAA,QAAQ,EAAE,KAAxC;AAA+CC,MAAAA,UAAU,EAAE,KAAA;AAA3D,KAFW,EAGX;AAACtJ,MAAAA,MAAM,EAAEwQ,gBAAT;AAA2BnH,MAAAA,QAAQ,EAAE,IAArC;AAA2CC,MAAAA,UAAU,EAAE,KAAA;AAAvD,KAHW,CAAb,CAAA;AAMA,IAAA,OAAO,IAAIC,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;MAC3BjN,IAD2B;MAE3B8B,SAAS,EAAE,KAAKA,SAFW;AAG3BpC,MAAAA,IAAAA;AAH2B,KAAtB,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;;;EACiB,OAARkmC,QAAQ,CAAC3uB,MAAD,EAAqD;IAClE,MAAM;MAAC2S,UAAD;MAAa0c,0BAAb;MAAyC3xB,QAAzC;AAAmDO,MAAAA,QAAAA;AAAnD,KAAA,GAA+D+B,MAArE,CAAA;AACA,IAAA,MAAM3R,IAAI,GAAG4gC,wBAAwB,CAACtB,QAAtC,CAAA;AACA,IAAA,MAAMllC,IAAI,GAAGmT,UAAU,CAACvN,IAAD,EAAO;AAACqP,MAAAA,QAAAA;AAAD,KAAP,CAAvB,CAAA;IAEA,MAAM3U,IAAI,GAAG,CACX;AAAC8C,MAAAA,MAAM,EAAE8mB,UAAT;AAAqBzd,MAAAA,QAAQ,EAAE,KAA/B;AAAsCC,MAAAA,UAAU,EAAE,IAAA;AAAlD,KADW,EAEX;AAACtJ,MAAAA,MAAM,EAAEoS,QAAT;AAAmB/I,MAAAA,QAAQ,EAAE,KAA7B;AAAoCC,MAAAA,UAAU,EAAE,IAAA;AAAhD,KAFW,EAGX;AAACtJ,MAAAA,MAAM,EAAEwjC,0BAAT;AAAqCn6B,MAAAA,QAAQ,EAAE,IAA/C;AAAqDC,MAAAA,UAAU,EAAE,KAAA;AAAjE,KAHW,CAAb,CAAA;AAMA,IAAA,OAAO,IAAIC,WAAJ,EAAkBY,CAAAA,GAAlB,CAAsB;MAC3BjN,IAD2B;MAE3B8B,SAAS,EAAE,KAAKA,SAFW;AAG3BpC,MAAAA,IAAAA;AAH2B,KAAtB,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACqB,EAAA,OAAZinC,YAAY,CACjB1vB,MADiB,EAEjB2vB,yBAFiB,EAGjBC,iBAHiB,EAIJ;AACb,IAAA,IAAI5vB,MAAM,CAACtC,QAAP,GAAkBiyB,yBAAyB,GAAGC,iBAAlD,EAAqE;AACnE,MAAA,MAAM,IAAI3mC,KAAJ,CACJ,0DADI,CAAN,CAAA;AAGD,KAAA;;AACD,IAAA,OAAOqmC,WAAW,CAACX,QAAZ,CAAqB3uB,MAArB,CAAP,CAAA;AACD,GAAA;;AAnJsB,CAAA;AAAZsvB,YASJzkC,YAAuB,IAAIlB,SAAJ,CAC5B,6CAD4B;AATnB2lC,YAoBJ3xB,QAAgB;;MCrSZkyB,kBAAkB,GAAG,IAAIlmC,SAAJ,CAChC,6CADgC,EAA3B;AAIP;AACA;AACA;;AAoBA,MAAMmmC,UAAU,GAAGhmB,gBAAI,CAAC;EACtBxD,IAAI,EAAEwC,kBAAM,EADU;AAEtBinB,EAAAA,OAAO,EAAE7lB,oBAAQ,CAACpB,kBAAM,EAAP,CAFK;AAGtBknB,EAAAA,OAAO,EAAE9lB,oBAAQ,CAACpB,kBAAM,EAAP,CAHK;AAItBmnB,EAAAA,eAAe,EAAE/lB,oBAAQ,CAACpB,kBAAM,EAAP,CAAA;AAJH,CAAD,CAAvB,CAAA;AAOA;AACA;AACA;;AACO,MAAMonB,aAAN,CAAoB;AACzB;AACF;AACA;;AAEE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACEjoC,EAAAA,WAAW,CAACkB,GAAD,EAAiBskB,IAAjB,EAA6B;AAAA,IAAA,IAAA,CAZxCtkB,GAYwC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARxCskB,IAQwC,GAAA,KAAA,CAAA,CAAA;IACtC,IAAKtkB,CAAAA,GAAL,GAAWA,GAAX,CAAA;IACA,IAAKskB,CAAAA,IAAL,GAAYA,IAAZ,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACuB,OAAd0iB,cAAc,CACnBtoC,QADmB,EAEG;AACtB,IAAA,IAAIuK,SAAS,GAAG,CAAC,GAAGvK,QAAJ,CAAhB,CAAA;AACA,IAAA,MAAMuoC,cAAc,GAAG/+B,YAAA,CAAsBe,SAAtB,CAAvB,CAAA;AACA,IAAA,IAAIg+B,cAAc,KAAK,CAAvB,EAA0B,OAAO,IAAP,CAAA;IAE1B,MAAMC,UAA4B,GAAG,EAArC,CAAA;;IACA,KAAK,IAAI/9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,MAAA,MAAM3L,SAAS,GAAG,IAAIgD,SAAJ,CAAcyI,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmBgC,iBAAnB,CAAd,CAAlB,CAAA;AACA8I,MAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgBgC,iBAAhB,CAAZ,CAAA;AACA,MAAA,MAAM4L,QAAQ,GAAG9C,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAA,CAAsB,CAAtB,CAAA,KAA6B,CAA9C,CAAA;AACA8K,MAAAA,SAAS,GAAGA,SAAS,CAAC9K,KAAV,CAAgB,CAAhB,CAAZ,CAAA;MACA+oC,UAAU,CAAChhC,IAAX,CAAgB;QAAC1I,SAAD;AAAYuO,QAAAA,QAAAA;OAA5B,CAAA,CAAA;AACD,KAAA;;IAED,IAAIm7B,UAAU,CAAC,CAAD,CAAV,CAAc1pC,SAAd,CAAwBoD,MAAxB,CAA+B8lC,kBAA/B,CAAJ,EAAwD;AACtD,MAAA,IAAIQ,UAAU,CAAC,CAAD,CAAV,CAAcn7B,QAAlB,EAA4B;AAC1B,QAAA,MAAMo7B,OAAY,GAAGr+B,UAAA,EAAoBzJ,CAAAA,MAApB,CAA2Bd,aAAM,CAACE,IAAP,CAAYwK,SAAZ,CAA3B,CAArB,CAAA;AACA,QAAA,MAAMqb,IAAI,GAAGtX,IAAI,CAACo6B,KAAL,CAAWD,OAAX,CAAb,CAAA;AACAE,QAAAA,kBAAU,CAAC/iB,IAAD,EAAOqiB,UAAP,CAAV,CAAA;QACA,OAAO,IAAII,aAAJ,CAAkBG,UAAU,CAAC,CAAD,CAAV,CAAc1pC,SAAhC,EAA2C8mB,IAA3C,CAAP,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AAtDwB;;MCzCdgjB,eAAe,GAAG,IAAI9mC,SAAJ,CAC7B,6CAD6B,EAAxB;;AAgEP;AACA;AACA;AACA;AACA;AACA,MAAM+mC,iBAAiB,GAAGzjC,uBAAY,CAACI,MAAb,CAAqC,CAC7D4E,SAAA,CAAiB,YAAjB,CAD6D,EAE7DA,SAAA,CAAiB,sBAAjB,CAF6D,EAG7DhF,uBAAY,CAACkB,EAAb,CAAgB,YAAhB,CAH6D,EAI7DlB,uBAAY,CAACgP,IAAb,EAJ6D;AAK7DhP,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACI,MAAb,CAAoB,CAClBJ,uBAAY,CAACgP,IAAb,CAAkB,MAAlB,CADkB,EAElBhP,uBAAY,CAACK,GAAb,CAAiB,mBAAjB,CAFkB,CAApB,CADF,EAKEL,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACK,GAAb,EAApB,EAAwC,CAAC,CAAzC,CALF,EAME,OANF,CAL6D,EAa7DL,uBAAY,CAACkB,EAAb,CAAgB,eAAhB,CAb6D,EAc7DlB,uBAAY,CAACgP,IAAb,CAAkB,UAAlB,CAd6D,EAe7DhP,uBAAY,CAACgP,IAAb,EAf6D;AAgB7DhP,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACI,MAAb,CAAoB,CAClBJ,uBAAY,CAACgP,IAAb,CAAkB,OAAlB,CADkB,EAElBhK,SAAA,CAAiB,iBAAjB,CAFkB,CAApB,CADF,EAKEhF,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACK,GAAb,EAApB,EAAwC,CAAC,CAAzC,CALF,EAME,kBANF,CAhB6D,EAwB7DL,uBAAY,CAACI,MAAb,CACE,CACEJ,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACI,MAAb,CAAoB,CAClB4E,SAAA,CAAiB,kBAAjB,CADkB,EAElBhF,uBAAY,CAACgP,IAAb,CAAkB,6BAAlB,CAFkB,EAGlBhP,uBAAY,CAACgP,IAAb,CAAkB,aAAlB,CAHkB,CAApB,CADF,EAME,EANF,EAOE,KAPF,CADF,EAUEhP,uBAAY,CAACgP,IAAb,CAAkB,KAAlB,CAVF,EAWEhP,uBAAY,CAACkB,EAAb,CAAgB,SAAhB,CAXF,CADF,EAcE,aAdF,CAxB6D,EAwC7DlB,uBAAY,CAACgP,IAAb,EAxC6D;AAyC7DhP,uBAAY,CAAC8E,GAAb,CACE9E,uBAAY,CAACI,MAAb,CAAoB,CAClBJ,uBAAY,CAACgP,IAAb,CAAkB,OAAlB,CADkB,EAElBhP,uBAAY,CAACgP,IAAb,CAAkB,SAAlB,CAFkB,EAGlBhP,uBAAY,CAACgP,IAAb,CAAkB,aAAlB,CAHkB,CAApB,CADF,EAMEhP,uBAAY,CAACM,MAAb,CAAoBN,uBAAY,CAACK,GAAb,EAApB,EAAwC,CAAC,CAAzC,CANF,EAOE,cAPF,CAzC6D,EAkD7DL,uBAAY,CAACI,MAAb,CACE,CAACJ,uBAAY,CAACgP,IAAb,CAAkB,MAAlB,CAAD,EAA4BhP,uBAAY,CAACgP,IAAb,CAAkB,WAAlB,CAA5B,CADF,EAEE,eAFF,CAlD6D,CAArC,CAA1B,CAAA;;AAoEA;AACA;AACA;AACO,MAAM00B,WAAN,CAAkB;AAWvB;AACF;AACA;EACE1oC,WAAW,CAACsH,IAAD,EAAwB;AAAA,IAAA,IAAA,CAbnCqjB,UAamC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAZnCmc,oBAYmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAXnC/b,UAWmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAVnCE,QAUmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CATnC0d,KASmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CARnCC,gBAQmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAPnCC,WAOmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CANnC/d,YAMmC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CALnCge,aAKmC,GAAA,KAAA,CAAA,CAAA;AACjC,IAAA,IAAA,CAAKne,UAAL,GAAkBrjB,IAAI,CAACqjB,UAAvB,CAAA;AACA,IAAA,IAAA,CAAKmc,oBAAL,GAA4Bx/B,IAAI,CAACw/B,oBAAjC,CAAA;AACA,IAAA,IAAA,CAAK/b,UAAL,GAAkBzjB,IAAI,CAACyjB,UAAvB,CAAA;AACA,IAAA,IAAA,CAAKE,QAAL,GAAgB3jB,IAAI,CAAC2jB,QAArB,CAAA;AACA,IAAA,IAAA,CAAK0d,KAAL,GAAarhC,IAAI,CAACqhC,KAAlB,CAAA;AACA,IAAA,IAAA,CAAKC,gBAAL,GAAwBthC,IAAI,CAACshC,gBAA7B,CAAA;AACA,IAAA,IAAA,CAAKC,WAAL,GAAmBvhC,IAAI,CAACuhC,WAAxB,CAAA;AACA,IAAA,IAAA,CAAK/d,YAAL,GAAoBxjB,IAAI,CAACwjB,YAAzB,CAAA;AACA,IAAA,IAAA,CAAKge,aAAL,GAAqBxhC,IAAI,CAACwhC,aAA1B,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;;;EACwB,OAAfx0B,eAAe,CACpB1U,MADoB,EAEP;IACb,MAAMmpC,aAAa,GAAG,CAAtB,CAAA;AACA,IAAA,MAAMC,EAAE,GAAGP,iBAAiB,CAACloC,MAAlB,CAAyBhB,QAAQ,CAACK,MAAD,CAAjC,EAA2CmpC,aAA3C,CAAX,CAAA;AAEA,IAAA,IAAI9d,QAAuB,GAAG+d,EAAE,CAAC/d,QAAjC,CAAA;;AACA,IAAA,IAAI,CAAC+d,EAAE,CAACC,aAAR,EAAuB;AACrBhe,MAAAA,QAAQ,GAAG,IAAX,CAAA;AACD,KAAA;;IAED,OAAO,IAAIyd,WAAJ,CAAgB;AACrB/d,MAAAA,UAAU,EAAE,IAAIjpB,SAAJ,CAAcsnC,EAAE,CAACre,UAAjB,CADS;AAErBmc,MAAAA,oBAAoB,EAAE,IAAIplC,SAAJ,CAAcsnC,EAAE,CAAClC,oBAAjB,CAFD;MAGrB/b,UAAU,EAAEie,EAAE,CAACje,UAHM;MAIrB4d,KAAK,EAAEK,EAAE,CAACL,KAJW;MAKrB1d,QALqB;MAMrB2d,gBAAgB,EAAEI,EAAE,CAACJ,gBAAH,CAAoB3nC,GAApB,CAAwBioC,oBAAxB,CANG;AAOrBL,MAAAA,WAAW,EAAEM,cAAc,CAACH,EAAE,CAACH,WAAJ,CAPN;MAQrB/d,YAAY,EAAEke,EAAE,CAACle,YARI;MASrBge,aAAa,EAAEE,EAAE,CAACF,aAAAA;AATG,KAAhB,CAAP,CAAA;AAWD,GAAA;;AAtDsB,CAAA;;AAyDzB,SAASI,oBAAT,CAA8B;EAC5BrC,eAD4B;AAE5BxqB,EAAAA,KAAAA;AAF4B,CAA9B,EAGwC;EACtC,OAAO;IACLA,KADK;AAELwqB,IAAAA,eAAe,EAAE,IAAInlC,SAAJ,CAAcmlC,eAAd,CAAA;GAFnB,CAAA;AAID,CAAA;;AAED,SAASuC,gBAAT,CAA0B;EACxBh1B,gBADwB;EAExBi1B,2BAFwB;AAGxBC,EAAAA,WAAAA;AAHwB,CAA1B,EAI8B;EAC5B,OAAO;AACLl1B,IAAAA,gBAAgB,EAAE,IAAI1S,SAAJ,CAAc0S,gBAAd,CADb;IAELi1B,2BAFK;AAGLC,IAAAA,WAAAA;GAHF,CAAA;AAKD,CAAA;;AAED,SAASH,cAAT,CAAwB;EAACI,GAAD;EAAMC,GAAN;AAAWC,EAAAA,OAAAA;AAAX,CAAxB,EAAwE;AACtE,EAAA,IAAIA,OAAJ,EAAa;AACX,IAAA,OAAO,EAAP,CAAA;AACD,GAAA;;AAED,EAAA,OAAO,CACL,GAAGF,GAAG,CAAClqC,KAAJ,CAAUmqC,GAAG,GAAG,CAAhB,CAAA,CAAmBvoC,GAAnB,CAAuBmoC,gBAAvB,CADE,EAEL,GAAGG,GAAG,CAAClqC,KAAJ,CAAU,CAAV,EAAamqC,GAAb,CAAA,CAAkBvoC,GAAlB,CAAsBmoC,gBAAtB,CAFE,CAAP,CAAA;AAID;;AC3OD,MAAMrpB,QAAQ,GAAG;AACfhF,EAAAA,IAAI,EAAE;AACJ2uB,IAAAA,MAAM,EAAE,8BADJ;AAEJC,IAAAA,OAAO,EAAE,+BAFL;IAGJ,cAAgB,EAAA,qCAAA;GAJH;AAMf9uB,EAAAA,KAAK,EAAE;AACL6uB,IAAAA,MAAM,EAAE,+BADH;AAELC,IAAAA,OAAO,EAAE,gCAFJ;IAGL,cAAgB,EAAA,sCAAA;AAHX,GAAA;AANQ,CAAjB,CAAA;;AAeA;AACA;AACA;AACO,SAASC,aAAT,CAAuBC,OAAvB,EAA0CC,GAA1C,EAAiE;EACtE,MAAM5oC,GAAG,GAAG4oC,GAAG,KAAK,KAAR,GAAgB,MAAhB,GAAyB,OAArC,CAAA;;EAEA,IAAI,CAACD,OAAL,EAAc;AACZ,IAAA,OAAO9pB,QAAQ,CAAC7e,GAAD,CAAR,CAAc,QAAd,CAAP,CAAA;AACD,GAAA;;EAED,MAAM6jB,GAAG,GAAGhF,QAAQ,CAAC7e,GAAD,CAAR,CAAc2oC,OAAd,CAAZ,CAAA;;EACA,IAAI,CAAC9kB,GAAL,EAAU;IACR,MAAM,IAAI/jB,KAAJ,CAAW,CAAA,QAAA,EAAUE,GAAI,CAAY2oC,UAAAA,EAAAA,OAAQ,EAA7C,CAAN,CAAA;AACD,GAAA;;AACD,EAAA,OAAO9kB,GAAP,CAAA;AACD;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AAOA;AACO,eAAeglB,4BAAf,CACL/5B,UADK,EAELkqB,cAFK,EAGL8P,oCAHK,EAOLC,mBAPK,EAQ0B;AAC/B,EAAA,IAAIC,oBAAJ,CAAA;AAGA,EAAA,IAAIt3B,OAAJ,CAAA;;AACA,EAAA,IACEo3B,oCAAoC,IACpC9pC,MAAM,CAACyE,SAAP,CAAiB+I,cAAjB,CAAgCC,IAAhC,CACEq8B,oCADF,EAEE,sBAFF,CAFF,EAME;AACAE,IAAAA,oBAAoB,GAClBF,oCADF,CAAA;AAEAp3B,IAAAA,OAAO,GAAGq3B,mBAAV,CAAA;AACD,GAVD,MAUO;AACLr3B,IAAAA,OAAO,GAAGo3B,oCAAV,CAAA;AAGD,GAAA;;EACD,MAAMn3B,WAAW,GAAGD,OAAO,IAAI;IAC7BE,aAAa,EAAEF,OAAO,CAACE,aADM;AAE7BC,IAAAA,mBAAmB,EAAEH,OAAO,CAACG,mBAAR,IAA+BH,OAAO,CAACI,UAF/B;IAG7BE,cAAc,EAAEN,OAAO,CAACM,cAAAA;GAH1B,CAAA;EAMA,MAAMzO,SAAS,GAAG,MAAMuL,UAAU,CAACiqB,kBAAX,CACtBC,cADsB,EAEtBrnB,WAFsB,CAAxB,CAAA;AAKA,EAAA,MAAMG,UAAU,GAAGJ,OAAO,IAAIA,OAAO,CAACI,UAAtC,CAAA;EACA,MAAMihB,mBAAmB,GAAGiW,oBAAoB,GAC5Cl6B,UAAU,CAACqD,kBAAX,CAA8B62B,oBAA9B,EAAoDl3B,UAApD,CAD4C,GAE5ChD,UAAU,CAACqD,kBAAX,CAA8B5O,SAA9B,EAAyCuO,UAAzC,CAFJ,CAAA;AAGA,EAAA,MAAMI,MAAM,GAAG,CAAC,MAAM6gB,mBAAP,EAA4B1yB,KAA3C,CAAA;;EAEA,IAAI6R,MAAM,CAAC3P,GAAX,EAAgB;AACd,IAAA,MAAM,IAAIzC,KAAJ,CACH,CAAA,gBAAA,EAAkByD,SAAU,CAAA,SAAA,EAAWyJ,IAAI,CAACC,SAAL,CAAeiF,MAAf,CAAuB,GAD3D,CAAN,CAAA;AAGD,GAAA;;AAED,EAAA,OAAO3O,SAAP,CAAA;AACD;;ACvED;AACA;AACA;;AACO,MAAM0lC,gBAAgB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}